[
    {
        "id": "f25ce1f1-dee5-4964-a1ae-ba3646f7defc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": []
        }
    },
    {
        "id": "b6891d90-18ad-44a5-915b-3d4d772971c9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Recognizing and Realizing Temporal Reachability Graphs Thomas Erlebach # \u001a Department of Computer Science, Durham University, UK Othon Michail # \u001a Department of Computer Science, University of Liverpool, UK Nils Morawietz # \u001a Friedrich Schiller University Jena, Institute of Computer Science, Germany LaBRI, Université de Bordeaux, France Abstract A temporal graph G = (G, λ) can be represented by an underlying graph G = (V, E) together with a function λ that assigns to each edge e ∈E the set of time steps during which e is present.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Science",
                "Computer",
                "Department",
                "University",
                "Temporal",
                "Erlebach",
                "Durham",
                "Michail",
                "Liverpool",
                "Morawietz"
            ]
        }
    },
    {
        "id": "42ee4b08-4702-4a28-8323-6250e3627b43",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The reachability graph of G is the directed graph D = (V, A) with (u, v) ∈A if only if there is a temporal path from u to v. We study the Reachability Graph Realizability (RGR) problem that asks whether a given directed graph D = (V, A) is the reachability graph of some temporal graph. The question can be asked for undirected or directed temporal graphs, for reachability defined via strict or non-strict temporal paths, and with or without restrictions on λ (proper, simple, or happy).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "reachability",
                "temporal",
                "directed",
                "RGR",
                "Realizability",
                "graphs",
                "path",
                "paths",
                "problem"
            ]
        }
    },
    {
        "id": "a7016dd5-e3f8-4518-9b72-f8787e1849ad",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Answering an open question posed by Casteigts et al. (Theoretical Computer Science 991 (2024)), we show that all variants of the problem are NP-complete, except for two variants that become trivial in the directed case. For undirected temporal graphs, we consider the complexity of the problem with respect to the solid graph, that is, the graph containing all edges that could potentially receive a label in any realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Casteigts",
                "Answering",
                "open",
                "question",
                "posed",
                "problem",
                "Theoretical",
                "Science",
                "variants",
                "Computer"
            ]
        }
    },
    {
        "id": "3f51de03-5d6f-48be-b390-761c1ace4ab6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that the RGR problem is polynomial-time solvable if the solid graph is a tree and fixed-parameter tractable with respect to the feedback edge set number of the solid graph. As we show, the latter parameter can presumably not be replaced by smaller parameters like feedback vertex set or treedepth, since the problem is W[2]-hard with respect to these parameters.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "solid",
                "graph",
                "RGR",
                "respect",
                "show",
                "problem",
                "feedback",
                "set",
                "polynomial-time",
                "solvable"
            ]
        }
    },
    {
        "id": "3f07bd4d-a784-4483-8af0-bf93cb6cf60b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "2012 ACM Subject Classification Theory of computation →Design and analysis of algorithms Keywords and phrases parameterized complexity, temporal graphs, FPT algorithm, feedback edge set, directed graph recognition 1 Introduction Temporal graphs are graphs whose edge set can change over time. The vertex set is often assumed to be fixed, and the edge set can differ from one time step to the next. The study of temporal graphs has attracted significant attention in recent years [4, 20, 21].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ACM",
                "Design",
                "FPT",
                "Introduction",
                "set",
                "Subject",
                "Classification",
                "Theory",
                "Keywords",
                "edge"
            ]
        }
    },
    {
        "id": "bc211d37-8817-4558-877d-317ff413f6ab",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A temporal graph G with vertex set V can be represented as a sequence (Gi)i∈[L], where Gi = (V, Ei) is the graph containing the edges that are present in time step i. An alternative way to represent G is to specify a graph G = (V, E) together with a labeling function λ : E →2[L] that maps each edge e ∈E to the (possibly empty) set of time steps in which e is present. We write G = (G, λ) in this case. If an edge e is present in time step i, we refer to (e, i) as a time edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "present",
                "graph",
                "edge",
                "step",
                "set",
                "sequence",
                "temporal",
                "vertex",
                "represented"
            ]
        }
    },
    {
        "id": "ede2fe8a-a1de-42c3-8795-ab40c40346a4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A strict temporal path from u to v in G is a sequence of time edges such that the edges form a u-v-path in the underlying graph and the time steps are strictly increasing. A non-strict temporal path is defined analogously, except that the time steps only need to be non-decreasing.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "edges",
                "increasing",
                "temporal",
                "path",
                "steps",
                "strict",
                "sequence",
                "form",
                "underlying"
            ]
        }
    },
    {
        "id": "0bf30b3d-0fe4-4c6a-9f08-ece197531fdc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Given a temporal graph G, the reachability relation (with respect to strict or non-strict temporal paths) can be represented as a directed graph D = (V, A), called the reachability graph, with (u, v) ∈A for u ̸= v if and only if there exists a (strict or non-strict, respectively) temporal path from u to v in G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "graph",
                "reachability",
                "strict",
                "non-strict",
                "relation",
                "called",
                "respect",
                "represented",
                "directed"
            ]
        }
    },
    {
        "id": "e4b346b1-2edd-47c7-a530-8a4709dcfb10",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that self-loops, which would represent arXiv:2503.15771v1 [cs.CC] 20 Mar 2025 2 Recognizing and Realizing Temporal Reachability Graphs Table 1 The complexity results for all variants of RGR. Red cells indicate NP-hard cases and green cells indicate cases that are trivial (and thus polynomial-time solvable).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Mar",
                "Recognizing",
                "Table",
                "RGR",
                "cs.CC",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "Note"
            ]
        }
    },
    {
        "id": "f2828243-9f03-4b60-aede-6bc7eafdf31f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Strict Non-strict Any Theorem 27 Theorem 29 Simple Theorem 27 Theorem 29 Proper Theorem 29 Happy Theorem 29 (a) undirected Strict Non-strict Any Lemma 64 and [10] Theorem 67 Simple Lemma 64 and [10] Theorem 67 Proper Theorem 67 Happy Theorem 67 (b) directed the trivial reachability from a vertex to itself, are omitted from D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Theorem",
                "Proper",
                "Happy",
                "Non-strict",
                "Simple",
                "Lemma",
                "Strict",
                "undirected",
                "directed",
                "trivial"
            ]
        }
    },
    {
        "id": "037619e8-5064-4bbe-b6ae-8c5335bc8173",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A natural question is then which directed graphs D = (V, A) can arise as reachability graphs of temporal graphs, and how difficult it is to determine for a given directed graph D = (V, A) whether there exists a temporal graph G with reachability graph D. This question was posed as an open problem by Casteigts et al. [3, Open question 5]. In this paper, we answer this open question by showing that this decision problem is NP-hard.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graphs",
                "graph",
                "directed",
                "reachability",
                "temporal",
                "question",
                "open",
                "natural",
                "arise",
                "difficult"
            ]
        }
    },
    {
        "id": "e1cd5cea-252a-4d56-b2ba-8e41d0ba9669",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Actually, there are a number of variations of the question, as we may ask for an undirected or a directed temporal graph G, for a temporal graph with a restricted kind of labeling (simple, proper, happy), and may consider reachability with respect to strict or non-strict temporal paths.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "simple",
                "proper",
                "happy",
                "graph",
                "question",
                "labeling",
                "paths",
                "number",
                "variations"
            ]
        }
    },
    {
        "id": "c0e546b5-83a6-4998-be8e-9e84d9b9b32c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that all these variations are NP-hard if we ask for an undirected temporal graph, and also if we ask for a directed temporal graph except for two variations (strict temporal paths with arbitrary or simple labelings) that are known to become trivial in the directed case [10]. See Table 1 for an overview of these complexity results. From the positive side, we present the following algorithmic results.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "graph",
                "variations",
                "directed",
                "strict",
                "labelings",
                "case",
                "results",
                "show",
                "NP-hard"
            ]
        }
    },
    {
        "id": "bc9f9a8e-441f-4ac2-88c5-ebc685ec0ce6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For a given digraph D = (V, A), we refer to {u, v} for u, v ∈V as a solid edge if both (u, v) and (v, u) are in A. Let G = (V, E) be the undirected graph on V whose edge set is the set of solid edges. We refer to G as the solid graph of D. We show that all undirected problem variants can be solved in polynomial time if the solid graph is a tree. Furthermore, we give an FPT algorithm with respect to the feedback edge set number of the solid graph.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "solid",
                "graph",
                "edge",
                "refer",
                "set",
                "digraph",
                "undirected",
                "edges",
                "FPT",
                "tree"
            ]
        }
    },
    {
        "id": "3e62bf10-6c0e-4700-8fc8-505b23e03364",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This parameter can presumably not be replaced by smaller parameters like feedback vertex set, treedepth, or pathwidth, since two undirected versions of our problem turn out to be W[2]-hard for these parameters. Related work Casteigts et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "treedepth",
                "set",
                "pathwidth",
                "hard",
                "parameters",
                "replaced",
                "smaller",
                "feedback",
                "vertex",
                "undirected"
            ]
        }
    },
    {
        "id": "73e7e072-92b9-4d89-8626-73aae79840c9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[3] studied the relationships between the classes of reachability graphs that arise from undirected temporal graphs if different restrictions are placed on the graph (proper, simple, happy [3]) and depending on whether strict or non-strict temporal paths are considered. They showed that reachability with respect to strict temporal paths in arbitrary temporal graphs yields the widest class of reachability graphs while reachability in happy temporal graphs yields the narrowest class.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "graphs",
                "reachability",
                "proper",
                "simple",
                "paths",
                "studied",
                "considered",
                "happy",
                "strict"
            ]
        }
    },
    {
        "id": "49ff9343-8764-43d9-ae62-d537a40bf429",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The class of reachability graphs that arise from proper temporal graphs is the same as for non-strict paths in arbitrary temporal graphs, and this class is larger than the class of reachability graphs arising from non-strict reachability in simple temporal graphs. Strict reachability in simple temporal graphs was also shown to lie between the happy case and the general strict case.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graphs",
                "class",
                "temporal",
                "reachability",
                "non-strict",
                "simple",
                "arise",
                "proper",
                "paths",
                "arbitrary"
            ]
        }
    },
    {
        "id": "357efd84-ea94-4db1-a03f-7689a56d074e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Döring [10] showed that the class “strict & simple” is incomparable to “non-strict & simple” and to “non-strict / proper”, completing the picture of a two-stranded hierarchy for undirected temporal graphs. She also extended the study to directed temporal graphs and showed that their classes of reachability graphs form a single-stranded hierarchy from happy to strict & simple, the latter being equivalent to the general strict case. Thomas Erlebach, Othon Michail, Nils Morawietz 3 Casteigts et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "simple",
                "non-strict",
                "graphs",
                "Döring",
                "proper",
                "strict",
                "showed",
                "temporal",
                "class",
                "completing"
            ]
        }
    },
    {
        "id": "419fb92a-185e-49ff-b94a-8ea15e326672",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[3] posed the open question whether there is a characterization of the directed graphs that arise as reachability graphs of temporal graphs (or of some restricted subclass of temporal graphs), and how hard it is to decide whether a given directed graph is the reachability graph of some temporal graph. These questions were posed again by Döring [10], also in relation to the setting of directed temporal graphs. This is in particular of interest because Casteigts et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graphs",
                "temporal",
                "reachability",
                "graph",
                "directed",
                "posed",
                "Döring",
                "open",
                "characterization",
                "arise"
            ]
        }
    },
    {
        "id": "70cfc7cf-ee42-42dc-8852-597249864a28",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[5] showed that several temporal graph problems can be solved in FPT time with respect to temporal parameters defined over the reachability graph. In this paper we resolve these open questions regarding the complexity of all directed and undirected variants. Besides that, our work falls into the field of temporal graph realization problems.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "FPT",
                "showed",
                "temporal",
                "graph",
                "solved",
                "time",
                "respect",
                "parameters",
                "defined",
                "reachability"
            ]
        }
    },
    {
        "id": "ea4fab4f-565f-42b0-9cdd-f59c3257a198",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In these problems, one is given some data about the behavior of a temporal graph, and the goal is to detect whether there actually is a temporal graph with this behavior (and to compute such a temporal graph if one exists). Klobas et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "graph",
                "behavior",
                "problems",
                "exists",
                "data",
                "goal",
                "detect",
                "compute",
                "Klobas"
            ]
        }
    },
    {
        "id": "72d6bcdc-5d3e-4831-9eb9-40c0a5598c58",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[16] introduced the problem of deciding for a given matrix of fastest travel durations and a period ∆whether there exists a simple temporal graph G with period ∆with the property that the duration of the fastest temporal path between any pair of nodes in G is equal to the value specified in the input matrix. Erlebach et al. [12] extended the problem to a multi-label version, assuming that the input specifies a bound ℓon the maximum number of labels per edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "period",
                "matrix",
                "fastest",
                "temporal",
                "introduced",
                "durations",
                "duration",
                "problem",
                "input",
                "deciding"
            ]
        }
    },
    {
        "id": "9675adbd-0f3e-4b6c-b690-8367ec48780b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Motivated by the constraints in the design of transportation networks, Mertzios et al. [19] considered the modified version of the problem (with one label per edge) where the fastest temporal path between any pair of nodes is only upper-bounded by the value specified in the input matrix. The problem of generating a temporal graph realizing a given reachability graph is an instance of the more general class of temporal network design problem.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Mertzios",
                "problem",
                "temporal",
                "Motivated",
                "constraints",
                "transportation",
                "design",
                "graph",
                "networks",
                "network"
            ]
        }
    },
    {
        "id": "b0748ee2-8346-4da8-8fc4-b1e25edaaa71",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In such problems, the objective is to construct a temporal network that satisfies specified constraints while optimizing certain network-quality measures. These problems have natural applications in transportation and logistics, communication networks, social networks, and epidemiology. In an early example studied by Kempe et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "measures",
                "problems",
                "objective",
                "construct",
                "temporal",
                "satisfies",
                "constraints",
                "optimizing",
                "network-quality",
                "networks"
            ]
        }
    },
    {
        "id": "5cbf24a0-40b8-4f55-b277-b8443382dc08",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[14], the goal was to reconstruct a temporal labeling restricted to a single label per edge, so that a designated root reaches via temporal paths all vertices in a set P while avoiding those in a set N. For multi-labeled temporal graphs, Mertzios et al.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "temporal",
                "edge",
                "goal",
                "reconstruct",
                "labeling",
                "restricted",
                "single",
                "label",
                "designated"
            ]
        }
    },
    {
        "id": "dda95c7a-85a1-4416-afaf-9e28b5ac49cf",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "[18] studied the problem of designing a temporal graph that preserves all reachabilities or paths of an underlying static graph while minimizing either the temporality (the maximum number of labels per edge) or the temporal cost (the total number of labels used). Göbel et al. [13] showed that it is NP-complete to decide whether the edges of a given undirected graph can be labeled with a single label per edge in such a way that each vertex can reach every other vertex via a strict temporal path.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "number",
                "temporal",
                "graph",
                "studied",
                "temporality",
                "cost",
                "labels",
                "problem",
                "designing",
                "preserves"
            ]
        }
    },
    {
        "id": "65214077-55a2-493b-acec-a1e9e3e303a4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Other studies have focused on variants of minimizing edge deletions [11], vertex deletions [24], or edge delays [8] to restrict reachability, motivated, for instance, by epidemic containment strategies that limit interactions. Temporal network design is an active area of research, with further related questions explored for example in [1, 15, 6]. For general introductory texts to the area of dynamic networks the reader is referred to [4, 20, 21]. Organization of the paper.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "deletions",
                "motivated",
                "edge",
                "vertex",
                "delays",
                "reachability",
                "instance",
                "interactions",
                "studies",
                "focused"
            ]
        }
    },
    {
        "id": "fe79b302-b3bc-4712-992d-0b64e12745cb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In Section 2 we provide a formal problem definition and define the notions used in this work. In Section 3, we show upper and lower bounds for the required number of labels per edge in any realization and provide a single exponential algorithm for all problem variants. Afterwards, in Section 4, we analyze properties and define splitting operations based on bridge edges in the solid graph of the undirected versions of our problem.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Section",
                "problem",
                "provide",
                "work",
                "define",
                "formal",
                "definition",
                "notions",
                "variants",
                "edge"
            ]
        }
    },
    {
        "id": "dfdfe3ff-c2e5-471f-9630-aae0e1ca88c2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "These structural insights will be mainly used in our FPT algorithm in Section 7, but also 4 Recognizing and Realizing Temporal Reachability Graphs immediately let us describe a polynomial-time algorithm for instances where the solid graph is a tree in Section 5. In Section 6, we then provide NP-hardness results for all undirected problem versions as well as parameterized intractability results for two of them with respect to feedback vertex set number and treedepth.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Section",
                "Recognizing",
                "FPT",
                "Realizing",
                "Temporal",
                "Reachability",
                "algorithm",
                "Graphs",
                "graph",
                "structural"
            ]
        }
    },
    {
        "id": "0e6d5b22-0cd0-4930-aed7-d57591c57cc1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Afterwards, in Section 7, we provide our main algorithmic result: an FPT algorithm with respect to the feedback edge set number fes of the solid graph.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Section",
                "FPT",
                "result",
                "graph",
                "provide",
                "main",
                "algorithmic",
                "algorithm",
                "respect",
                "feedback"
            ]
        }
    },
    {
        "id": "1fffb458-deb6-4719-86d6-8c4e50d24008",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This algorithm is achieved in three steps: Firstly, we apply our splitting operations of Section 4 and provide a polynomial-time reduction rule to simplify the instance at hand, such that all we need to deal with is a subset X∗of vertices of size O(fes) for which the remainder of the graph decomposes into edge-disjoint trees that only interact with X∗via two leaves each. We call such trees connector trees.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Firstly",
                "Section",
                "fes",
                "trees",
                "steps",
                "hand",
                "algorithm",
                "achieved",
                "apply",
                "splitting"
            ]
        }
    },
    {
        "id": "9be9790f-b9bf-4d11-b8ab-2bb03db2b3ad",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Secondly, we show that we can efficiently extend the set X∗to a set W ∗of size O(fes) such that each respective connector tree is more or less independent from the remainder of the graph with respect to the interactions of temporal paths in any realization. All these preprocessing steps run in polynomial time. Afterwards, our algorithm enumerates all reasonable labelings on the edges incident with vertices of W ∗and tries to extend each such labeling to a realization for D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "fes",
                "show",
                "efficiently",
                "size",
                "respective",
                "connector",
                "tree",
                "independent",
                "remainder"
            ]
        }
    },
    {
        "id": "8c996b27-f5c4-4555-93c7-e65951c0a8c3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we show, there are only FPT many such reasonable labelings and for each such labeling, there are only FPT many possible extensions that need to be checked. Finally, in Section 8 we briefly discuss the directed version of the problem and provide NP-hardness results for all but the two trivial cases. 2 Preliminaries For definitions on parameterized complexity, the Exponential Time Hypothesis (ETH), or parameters like treedepth, we refer to the textbooks [9, 7].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "FPT",
                "show",
                "checked",
                "labelings",
                "labeling",
                "reasonable",
                "extensions",
                "Section",
                "ETH",
                "Finally"
            ]
        }
    },
    {
        "id": "2d8f7dd1-1041-4fd6-afa3-c87ba7e5c842",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For natural numbers i, j with i ≤j we write [i] for the set {1, 2, 3, . . . , i} and [i, j] for the set {i, i + 1, i + 2, . . . , j}. For an undirected graph G = (V, E), we denote an edge between vertices u and v as {u, v} or uv. By N(v) = {u ∈V | vu ∈E} we denote the set of neighbors of u. The degree of v is the size of N(v). An edge e ∈E is a bridge or bridge edge in a graph G = (V, E) if deleting e increases the number of connected components.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "write",
                "edge",
                "natural",
                "denote",
                "graph",
                "bridge",
                "numbers",
                "number",
                "components"
            ]
        }
    },
    {
        "id": "443cefbd-5de9-43db-879c-4a550ebfaabd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A vertex of degree 1 is called a pendant vertex, and an edge incident with a pendant vertex is called a pendant edge. For directed graphs, we denote an arc from u to v by (u, v). A directed graph D is simple if it has no parallel arcs and no self-loops, and it is a directed acyclic graph (DAG) if it does not contain a directed cycle. The in-degree of a vertex v in D is the number of incoming arcs of v, i.e., the number of arcs with head v.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "pendant",
                "called",
                "directed",
                "edge",
                "vertex",
                "arcs",
                "degree",
                "incident",
                "graph",
                "DAG"
            ]
        }
    },
    {
        "id": "7769b011-00e2-47f0-aafb-b703a8c4c1ea",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, the out-degree of a vertex v is the number of arcs with tail v. The degree of a vertex in D is then the sum of its in-degree and out-degree. A temporal graph G with vertex set V and lifetime L is given by a sequence (Gt)t∈[L] of L static graphs Gt = (V, Et) referred to as snapshots or layers. The graph G↓= (V, E↓) with E↓= S i∈[L] Ei is called the underlying graph of G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "Similarly",
                "out-degree",
                "graph",
                "number",
                "arcs",
                "tail",
                "degree",
                "sum",
                "in-degree"
            ]
        }
    },
    {
        "id": "eafb22d4-e772-4671-a763-ceae1d21b1a4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Alternatively, G can be represented by an undirected graph G = (V, E) with E ⊇S t∈[L] Et and a labeling function λ : E →2[1,L] that assigns to each edge e the (possibly empty) set of time steps during which e is present, i.e., λ(e) = {t ∈[L] | e ∈Et}. We write G = (G, λ) in this case. In this representation we allow G to contain extra edges in addition to the edges of the underlying graph; such edges e satisfy λ(e) = ∅.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "Alternatively",
                "possibly",
                "empty",
                "set",
                "present",
                "represented",
                "undirected",
                "labeling",
                "function"
            ]
        }
    },
    {
        "id": "a8b668f5-2b27-406a-8065-84813f310505",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is useful because in the problems we consider in this paper, there is a natural choice of a graph G = (V, E), the so-called solid graph defined below, that contains all edges of the underlying graph of every realization but may contain additional edges. We assume that each layer of a temporal graph is an undirected graph unless we explicitly Thomas Erlebach, Othon Michail, Nils Morawietz 5 refer to directed temporal graphs. If t ∈λ(e), we refer to (e, t) as a time edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "paper",
                "problems",
                "natural",
                "choice",
                "so-called",
                "solid",
                "defined",
                "underlying",
                "realization"
            ]
        }
    },
    {
        "id": "610680fa-67ab-4e02-858a-2369d0df34b7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A temporal path from u to v in G is a sequence of time edges ((ej, tj))j∈[ℓ] for some ℓsuch that (e1, e2, . . . , eℓ) is a u-v path in G and t1 ≤t2 ≤· · · ≤tℓholds in the non-strict case and t1 < t2 < · · · < tℓ holds in the strict case. A temporal graph is proper if no two adjacent edges share a label, simple if every edge has a single label, and happy if it is both proper and simple [3].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "sequence",
                "time",
                "ℓsuch",
                "path",
                "temporal",
                "edges",
                "label",
                "case",
                "proper",
                "simple"
            ]
        }
    },
    {
        "id": "0211241a-df35-42b4-9366-ae99a5f397cc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that for proper and happy temporal graphs there is no distinction between strict and non-strict temporal paths. The reachability graph R(G) of a temporal graph G with vertex set V is the directed graph (V, A) with the same vertex set V and (u, v) ∈A if and only if u ̸= v and G contains a temporal path from u to v. Note that R(G) depends on whether we consider strict or non-strict temporal paths and can be computed in polynomial time in both cases [2].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "graph",
                "Note",
                "paths",
                "non-strict",
                "set",
                "proper",
                "happy",
                "distinction",
                "strict"
            ]
        }
    },
    {
        "id": "d56e0447-0d01-48f9-9650-ef93ff8f45bd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We are interested in the following problem: Reachability Graph Realizability (RGR) Input: A simple directed graph D = (V, A). Question: Does there exist a temporal graph G with R(G) = D? For yes-instances of RGR, we are also interested in computing a temporal graph G with R(G) = D. We refer to such a temporal graph as a solution or a realization for D, and we typically represent it by a labeling function.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Input",
                "Graph",
                "Reachability",
                "Realizability",
                "RGR",
                "temporal",
                "problem",
                "interested",
                "simple",
                "directed"
            ]
        }
    },
    {
        "id": "fae874bc-2445-41c8-bdf5-60b9cb62b441",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "With the adjacency matrix representation of D in mind, we also write Duv = 1 for (u, v) ∈A and Duv = 0 for (u, v) /∈A. We can consider RGR with respect to reachability via strict temporal paths or with respect to non-strict temporal paths. Furthermore, we can require the realization of D to be simple, proper, or happy. For proper and happy temporal graphs, strict and non-strict reachability coincide.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Duv",
                "mind",
                "temporal",
                "respect",
                "paths",
                "adjacency",
                "matrix",
                "representation",
                "write",
                "RGR"
            ]
        }
    },
    {
        "id": "b2575e14-d176-4976-9f74-bf3664d7bb6a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Therefore, the distinct problem variants that we can consider are Any Strict RGR, Any Non-strict RGR, Simple Strict RGR, Simple Non-strict RGR, Proper RGR, and Happy RGR. Finally, we write DRGR instead of RGR if we are asking for a directed temporal graph that realizes D. We sometimes write URGR if we want to make it explicit that we are asking for an undirected realization. The solid graph. If Duv = 1 and Dvu = 1 for some u ̸= v, we say that there is a solid edge between u and v.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "RGR",
                "Simple",
                "Strict",
                "Non-strict",
                "Proper",
                "Happy",
                "distinct",
                "problem",
                "variants",
                "DRGR"
            ]
        }
    },
    {
        "id": "bde3dd39-b3a5-4e1f-9294-43b89d3c490b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Duv = 1 and Dvu = 0, we say that there is a dashed arc from u to v. We use G = (V, E) to denote the graph on V whose edge set is the set of solid edges, and we refer to this graph as the solid graph (of D). It is clear that only solid edges can receive labels in a realization of D, as the two endpoints of an edge that is present in at least one time step can reach each other.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Duv",
                "Dvu",
                "solid",
                "graph",
                "dashed",
                "arc",
                "set",
                "edge",
                "edges",
                "denote"
            ]
        }
    },
    {
        "id": "47ebc910-9802-472a-8fb6-7d03d5559189",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Solid edges that are bridges of the solid graph must receive labels, but a solid edge e that is not a bridge need not necessarily receive labels, as the endpoints of e could reach each other via temporal paths of length greater than one in a realization. ▶Observation 1. Let D be an instance of URGR. Let λ be a realization of D and let {u, v} and {v, w} be solid edges that both receive at least one label under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Solid",
                "receive",
                "Observation",
                "edges",
                "graph",
                "necessarily",
                "endpoints",
                "reach",
                "temporal",
                "paths"
            ]
        }
    },
    {
        "id": "72dba4c3-7cb1-4d84-970b-1eb9d2371065",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If D contains neither the arc (u, w) nor the arc (w, u), then there is a label α such that λ({u, v}) = λ({v, w}) = {α}. Note that Observation 1 implies that for Proper URGR, Happy URGR, and Non-strict URGR, no realization for D can assign labels to both of two adjacent edges {u, v} and {v, w} if D contains neither (u, w) nor (w, u). A path P = (u0 = u, u1, u2, . . . , uℓ= v) from u to v in G is a dense u-v-path if there exist dashed arcs (ui, uj) for all 0 ≤i < j ≤ℓ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "arc",
                "Observation",
                "Happy",
                "Proper",
                "Non-strict",
                "label",
                "labels",
                "arcs",
                "Note"
            ]
        }
    },
    {
        "id": "aaafa5a4-456d-4040-865c-9304143fe91d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that in each undirected realization of D, each temporal path is a dense path in G. Similarly, for directed realizations of D, each temporal path is a dense path in D, where we define dense paths in D analogously to dense paths in G. 6 Recognizing and Realizing Temporal Reachability Graphs We say that a realization λ is frugal if there is no edge e such that the set of labels assigned to e can be replaced by a smaller set while maintaining the property that λ is a realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "dense",
                "temporal",
                "paths",
                "realization",
                "Note",
                "undirected",
                "Recognizing",
                "set",
                "Realizing"
            ]
        }
    },
    {
        "id": "3f807ee3-f35f-403e-89da-b6effaf23195",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We say that a realization λ is minimal on edge e if it is impossible to obtain another realization by replacing λ(e) with a proper subset. A realization is minimal if it is minimal on every edge e. Note that every frugal realization is also minimal. 3 Basic Observations and an Exponential Algorithm We first provide upper and lower bounds for the number of labels per edge in a minimal realization. ▶Lemma 2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "minimal",
                "realization",
                "edge",
                "subset",
                "impossible",
                "obtain",
                "replacing",
                "proper",
                "Lemma",
                "Basic"
            ]
        }
    },
    {
        "id": "e2c4c3f1-8675-4610-829b-f992d303eefc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let D be an instance of URGR, and let e be a solid edge of G that is not part of a triangle. In each minimal realization of D, e receives at most two labels. Moreover, if D is an instance of any version of URGR besides Any Strict URGR, then in each minimal realization, e receives at most one label. Proof. First, consider Any Strict URGR. Consider a minimal realization and assume the edge e has at least three labels.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "minimal",
                "Strict",
                "realization",
                "instance",
                "triangle",
                "labels",
                "receives",
                "solid",
                "part"
            ]
        }
    },
    {
        "id": "beacf7c6-d24c-4949-8bb0-539ec82b3509",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let Le, Ue, and Me be its smallest label, its largest label, and an arbitrary label in between. Note that no solid edge f ̸= e incident with an endpoint of e can have a label in (Le, Ue) as this would imply a solid edge forming a triangle containing e. Hence, all other edges incident with endpoints of e only have labels ≤Le or ≥Ue.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "smallest",
                "largest",
                "arbitrary",
                "incident",
                "solid",
                "edge",
                "Note",
                "labels",
                "endpoint"
            ]
        }
    },
    {
        "id": "6ccb6b00-50ad-4d42-a485-3d8648ae59aa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Replacing the labels of e by the single label Me maintains exactly the temporal paths containing e that exist before the change, a contradiction to the original realization being minimal. Furthermore, if the original labeling was proper, than the resulting labeling is also proper. For Simple Strict URGR, Simple Non-strict URGR and Happy URGR, it is trivially true that e has at most one label in any realization. Now, consider Any Non-strict URGR and Proper URGR.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "proper",
                "original",
                "Non-strict",
                "Simple",
                "Replacing",
                "change",
                "minimal",
                "realization",
                "single"
            ]
        }
    },
    {
        "id": "34e459da-f3ea-423e-9d10-35cdc00a3dd4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume that e has at least two labels in a minimal realization, and let Le and Ue be the smallest and largest label of e. Note that no solid edge f ̸= e incident with an endpoint of e can have a label in [Le, Ue]: A label in (Le, Ue) would create a solid edge forming a triangle, f cannot share a label with e in a proper labeling, and f sharing a label with e would create a solid edge forming a triangle in the non-strict case.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "solid",
                "edge",
                "Assume",
                "realization",
                "minimal",
                "smallest",
                "largest",
                "create",
                "forming"
            ]
        }
    },
    {
        "id": "1016b9d9-7a6b-463e-a744-5fe93b2feb4d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thus, all other edges incident with endpoints of e only have labels < Le or > Ue. Replacing the labels of e by Le maintains exactly the temporal paths containing e that exist before the change, a contradiction to the original realization being minimal. ◀ For general edges, we show a linear upper bound with respect to the number of vertices. ▶Lemma 3. If a graph D = (V, A) is realizable, then each minimal realization for D assigns at most n = |V | labels per edge. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "incident",
                "endpoints",
                "Lemma",
                "edges",
                "realization",
                "minimal",
                "Replacing",
                "change",
                "maintains"
            ]
        }
    },
    {
        "id": "967c4800-1ba1-47c2-873e-ed8f6c8f1190",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let e be an edge with more than n labels. We show that at least one can be removed. For each vertex v define αv as the earliest time step in which vertex v can traverse the edge e (if any). Let β be a label of e that is unequal to all αv labels. Then, removing β from e preserves at least one temporal (x, y)-path, if such a path existed before. ◀ Note that this implies that all versions of URGR and DRGR under consideration are in NP.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "vertex",
                "labels",
                "path",
                "Note",
                "removed",
                "URGR",
                "DRGR",
                "show",
                "label"
            ]
        }
    },
    {
        "id": "5672c2e1-131b-40b0-9fa5-ad0160226e6c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Next, we show that this bound on the number of labels per edge is essentially tight for Any Strict URGR. Thomas Erlebach, Othon Michail, Nils Morawietz 7 ▶Theorem 4. For Any Strict URGR, there is an infinite family of directed graphs B, such that for every D = (V, A) ∈B, where G = (V, E) is the solid graph of D, all of the following properties hold: G is planar. G has a feedback vertex set of size 2 and a feedback edge set of size Θ(n), where n = |V |.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Strict",
                "Theorem",
                "show",
                "bound",
                "number",
                "labels",
                "essentially",
                "tight",
                "Erlebach"
            ]
        }
    },
    {
        "id": "b5cc4cc6-282e-4d94-bfd6-4f8333152834",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "D is realizable and there is an edge e ∈E such that every realization of D uses Ω(n) labels on e. Proof. The graphs of solid edges of the reachability graphs in B resemble books with vertices around the sides of their pages. The spine of the book consists of an edge u0u′ 0 joining an upper spine-vertex u0 and a lower spine-vertex u′ 0.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "realizable",
                "realization",
                "edge",
                "graphs",
                "spine-vertex",
                "Proof",
                "edges",
                "pages",
                "books"
            ]
        }
    },
    {
        "id": "f758d9d5-fc73-47ef-8615-c465adb10e3c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Every page has an index 1 ≤i ≤L, where L ≥5 is the total number of pages, and consists of two upper vertices, ui and vi, and two lower vertices, u′ i and v′ i, located at the middle and end of the upper and lower boundaries, respectively. We call ui and u′ i the inner and vi and v′ i the outer vertices of page i.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "upper",
                "lower",
                "vertices",
                "page",
                "index",
                "located",
                "boundaries",
                "total",
                "number",
                "consists"
            ]
        }
    },
    {
        "id": "7381f3e6-0d57-4b20-b826-5d843fcfacd8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The set of edges of page i consists of edges u0ui, uivi, viv′ i, u′ iv′ i, and u′ 0u′ i, around the sides of the page, as well as two additional diagonal edges, u0u′ i and u′ 0ui, between the spine and the inner vertices. We then modify the constructed graph by making pages 1, 2, L −1 and L incomplete: For i = 1, 2, page i does not contain the lower-side vertices u′ i and v′ i, and the diagonal between ui and u′ 0 is a dashed arc (ui, u′ 0) instead of a solid edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "page",
                "edges",
                "uivi",
                "diagonal",
                "vertices",
                "viv′",
                "set",
                "consists",
                "iv′",
                "sides"
            ]
        }
    },
    {
        "id": "cb003613-0e37-48a7-bcdb-c191e6d5afed",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For i = L −1, L, page i does not contain the upper-side vertices ui and vi, and the diagonal between u′ i and u0 is a dashed arc (u0, u′ i) instead of a solid edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "page",
                "arc",
                "edge",
                "upper-side",
                "vertices",
                "diagonal",
                "dashed",
                "solid"
            ]
        }
    },
    {
        "id": "41f55e96-0f3a-4765-bb1e-65cc79741b1d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, there is a dashed arc from every inner vertex of a page i to every same-side (i.e., upper to upper and lower to lower) inner vertex of a page j if and only if i < j and both vertices exist, and there is a dashed arc to every opposite-side (i.e., upper to lower and lower to upper) inner vertex of a page k if and only if i + 1 < k and the target vertex exists. All remaining ordered pairs of vertices (u, v) are specified as unreachable by D (i.e., (u, v) is not a dashed arc).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "upper",
                "lower",
                "page",
                "dashed",
                "arc",
                "exist",
                "exists",
                "vertices",
                "same-side"
            ]
        }
    },
    {
        "id": "32d9d0f2-0f51-41a4-99ce-42835ba97e80",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "See Figure 1(a). Note that n = 4(L −4) + 2 · 4 + 2 = 4L −6 and the solid graph has m = 7(L −4) + 2 · 4 + 1 = 7L −19 edges. u0 uk v′ k u′ k u′ 0 u′ j v′ j v′ i uj vj vi ui vk u′ i i < j < k (a) u0 u′ 0 ui vi u′ i v′ i 1 ≤i ≤L (b) Figure 1 (a) An example of the graph of solid edges and dashed arcs for a D ∈B restricted to three pages. (b) A planar drawing of the solid edges. We start by proving the last property, fixing the edge u0u′ 0 of the spine as the edge required by it.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Figure",
                "solid",
                "edges",
                "edge",
                "graph",
                "Note",
                "pages",
                "dashed",
                "arcs",
                "restricted"
            ]
        }
    },
    {
        "id": "1b7f4ca6-5b13-43f3-a27d-d0eabe3a096a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We will show that u0u′ 0 must have at least L −2 = n/4 −1/2 = Θ(n) labels. 8 Recognizing and Realizing Temporal Reachability Graphs We claim that no two edges of a page i can have distinct labels, so edges of page i can be labeled by at most one label, which we denote by li. The two upper edges cannot have distinct labels, otherwise a missing arc between u0 and vi would be realized. The same holds for the two lower edges.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "edges",
                "distinct",
                "Recognizing",
                "page",
                "show",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs"
            ]
        }
    },
    {
        "id": "40856dfd-4453-477f-adc5-6605583c15d4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, viv′ i and the diagonal edges cannot have a label different from that of the upper and lower edges, otherwise a missing arc would be realized. This implies that the only way to realize the arcs of viv′ i is to label it by li. Edges uivi and u′ iv′ i must also be labeled by li as any other path to realize their arcs would need to use two consecutive edges of page i. For i = 1, 2, both upper edges of page i must be labeled as they are bridges.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "Similarly",
                "viv′",
                "label",
                "realized",
                "arcs",
                "diagonal",
                "lower",
                "missing",
                "realize"
            ]
        }
    },
    {
        "id": "8265328f-0302-432a-a2dc-ccbce536728b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For i = L −1, L, both lower edges of page i must be labeled for the same reason. For 3 ≤i ≤L −2, at least one of the edges uiu0 and uiu′ 0 must be labeled, and at least one of the edges u′ iu′ 0 and u′ iu0 must be labeled, as the arcs between ui or u′ i and u0 and u′ 0 cannot be realized otherwise. We will show that u0ui and u′ 0u′ i receive a label (which must be equal to li) while the diagonals u0u′ i and u′ 0ui do not receive a label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labeled",
                "edges",
                "reason",
                "lower",
                "page",
                "label",
                "receive",
                "uiu′",
                "iu′",
                "arcs"
            ]
        }
    },
    {
        "id": "823c072e-ef26-4438-b6c4-1dad0f19a622",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "First, observe that lj > li must hold for any j > i, otherwise the arc (ui, uj) or (u′ i, u′ j) cannot be realized. Now, assume for a contradiction that there is a page i with 3 ≤i ≤L −2 in which a diagonal receives a label. Consider the smallest such i. Observe that u0u′ i cannot receive label li as this would realize an arc (ui−1, u′ i). Thus, u′ iu′ 0 must receive label li.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "observe",
                "realized",
                "arc",
                "hold",
                "receive",
                "assume",
                "contradiction",
                "page",
                "diagonal"
            ]
        }
    },
    {
        "id": "c880b4be-a59d-4e7c-a51e-90b4d45f69b4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, uiu0 must also receive label li as the arc (ui−1, ui) must be realized via the path ui−1, u0, ui; it cannot be realized via a temporal path ending with the edge u′ 0ui as the existence of such a path would imply a temporal path from ui−1 to u′ i, a contradiction. Finally, edge uiu′ 0 cannot receive a label; otherwise, ui can reach both u0 and u′ 0 at time li and therefore reach u′ i+1 at time li+1, a contradiction.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "realized",
                "temporal",
                "contradiction",
                "arc",
                "receive",
                "label",
                "edge",
                "time",
                "ending"
            ]
        }
    },
    {
        "id": "49c1dac9-1c89-4053-bde9-7f67747d216a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This shows that it is impossible that a diagonal edge in page i receives a label. For every two distinct pages i and j such that i < j, the arcs from the inner vertices of i to the same-side inner vertices of j imply that u0ui, u′ 0u′ i and u0uj, u′ 0u′ j must be labeled by li and lj, respectively, and that li < lj as observed above. Thus, the pages must have increasing labels according to the order of their indices.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "pages",
                "shows",
                "impossible",
                "diagonal",
                "edge",
                "receives",
                "page",
                "label",
                "labels"
            ]
        }
    },
    {
        "id": "086a6e8f-323e-47a5-8963-e2b924636a29",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For every page 1 ≤i ≤L −2, in order to realize the arc (ui, u′ i+2) and/or (u′ i, ui+2) (for every i at least one of these two arcs exists), the spine edge u0u′ 0 must have a label l such that li < l < li+2. Furthermore, that label must be equal to li+1, as li < l < li+1 would create a temporal path from an inner vertex of page i to an opposite-side inner vertex of page i + 1, and li+1 < l < li+2 can be excluded analogously. Thus, the spine edge must receive labels l2, l3, . . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "page",
                "spine",
                "exists",
                "vertex",
                "edge",
                "arc",
                "arcs",
                "label",
                "order",
                "realize"
            ]
        }
    },
    {
        "id": "bb4f52da-6ce0-461a-8df2-7e02093a6d89",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": ", lL−1, a total of L −2 distinct labels. The remaining part of the property follows by observing that the labeling assigning label i to all non-diagonal edges of page i, for all 1 ≤i ≤L, and labels 2, 3, 4, . . . , L −2, L −1 to the spine, realizes D. For all 1 < i + 1 < j ≤L, all arcs from the inner vertices of a side of page i to the opposite-side inner vertices of page j are realized by using label i + 1 of the spine. These temporal paths also realize the arcs (ui, u′ 0) for all i = 1, 2, . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "page",
                "labels",
                "label",
                "distinct",
                "total",
                "spine",
                "vertices",
                "arcs",
                "remaining",
                "part"
            ]
        }
    },
    {
        "id": "e25563b9-c416-4fd9-89de-68b9a2dc02d4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": ". L −2, (u′ 0, ui) for i = 3, . . . , L −2, (u0, u′ i) for i = 3, . . . , L, and the arcs (u′ i, u0) for i = 3 . . . , L −2. Thus, all solid diagonals in pages 3, . . . , L −2 and the diagonal arcs in the remaining levels are realized. For same-side inner vertices, the temporal paths realizing them go directly through the respective spine-vertex.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arcs",
                "pages",
                "realized",
                "vertices",
                "spine-vertex",
                "diagonals",
                "diagonal",
                "solid",
                "remaining",
                "levels"
            ]
        }
    },
    {
        "id": "bedadff2-f03a-442d-9e28-25daccd233cd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As required, no dashed arc between the outer vertices and the rest of the graph is realized as all these paths go through inner vertices, and no two edges incident to an inner vertex use different labels. For all 1 ≤i < j ≤L, no dashed arc from the inner vertices of page j to those of page i is realized because j > i. For the first property we draw the book pages as nested trapezoids with their area increasing by increasing index, and having the spine as their shared basis (see Figure 1(b)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "dashed",
                "arc",
                "realized",
                "required",
                "labels",
                "outer",
                "rest",
                "graph",
                "paths"
            ]
        }
    },
    {
        "id": "77588f31-731f-499c-9caa-2dc3423088f3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This gives a planar drawing of all edges but the diagonals. For all 1 ≤i ≤L−1, the diagonals u′ iu0 and ui+1u′ 0 can be drawn on the face between pages i and i + 1 without crossing each Thomas Erlebach, Othon Michail, Nils Morawietz 9 other. Diagonals u1u′ 0 and u′ Lu0 can be drawn on the face formed by page 1 and on the outer face, respectively.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "diagonals",
                "face",
                "drawn",
                "planar",
                "drawing",
                "edges",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils"
            ]
        }
    },
    {
        "id": "5cd30438-cf84-47b0-8227-51cc947608bd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This completes a planar drawing of a supergraph of G in which all L pages are complete; the graph G (in which some vertices and edges have been removed from pages 1, 2, L −1, L) thus also admits a planar drawing. The spine vertices form a feedback vertex set of size 2. The union of the diagonal edges and the edges joining the outer vertices of pages 3 to L −2 forms a feedback edge set of size 3(L −4) = 3n/4 −15/2 and every feedback edge set has size at least (7L −19) −(n −1) = 3n/4 −15/2 = Θ(n).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "planar",
                "drawing",
                "vertices",
                "feedback",
                "set",
                "edges",
                "pages",
                "size",
                "completes",
                "complete"
            ]
        }
    },
    {
        "id": "52512c45-79b2-49d6-897a-681ca6e64aa5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thus, the second property holds. ◀ We now present single exponential algorithms for all directed and undirected version of RGR under consideration based on our upper bounds on the number of assigned labels per edge/arc. ▶Theorem 5. Each version of URGR and DRGR under consideration can be solved in 2O(|A|) · nO(1) time, where A denotes the arc set of the input graph. Proof. We describe a dynamic program.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "holds",
                "property",
                "Theorem",
                "version",
                "consideration",
                "RGR",
                "arc",
                "URGR",
                "DRGR",
                "edge"
            ]
        }
    },
    {
        "id": "f38a3fc1-5337-403c-a741-1fedef1b14ea",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We state the program only explicitly for Any Strict URGR and afterwards argue how the dynamic program can be adapted to the other problem variants considered. Let D = (V, A) be an instance of Any Strict URGR and let n := |V |. Moreover, let E denote the set of solid edges of D and let m := |E|. Due to Lemma 3, there is a realization for D if and only if there is a realization for D with lifetime at most m · n.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Strict",
                "URGR",
                "program",
                "considered",
                "state",
                "explicitly",
                "argue",
                "dynamic",
                "adapted",
                "problem"
            ]
        }
    },
    {
        "id": "aee86e78-511c-4a7e-9fce-0f31fa3e53bd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each subset A′ ⊆A and each i ∈[0, m · n], our dynamic programming table T has an entry T[A′, i]. This entry stores whether there is a temporal graph G with lifetime at most i, such that the strict reachability graph of G is D′ := (V, A′). For i = 0, we set T[∅, 0] = 1 and T[A′, 0] = 0 for each nonempty A′ ⊆A. For each i ∈[1, m · n] and each A′ ⊆A, we set T[A′, i] = ∃A′′ ⊆A′.∃S ⊆E.T[A′ \\ A′′, i −1] ∧(∀(u, v) ∈A′′.∃w.(w = u ∨(u, w) ∈A′ \\ A′′) ∧w reaches v via an edge of S) ∧(∀(u, v) /∈A′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "entry",
                "subset",
                "dynamic",
                "programming",
                "table",
                "graph",
                "set",
                "stores",
                "temporal",
                "lifetime"
            ]
        }
    },
    {
        "id": "8501e88a-ef39-4a35-84d0-31b548bab5ba",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "̸ ∃w.(w = u ∨(u, w) ∈A′ \\ A′′) ∧w reaches v via an edge of S) Intuitively, the recurrence resembles splitting the reachability of arcs A′ into two sets A′′ and A′ \\ A′′. We recursively check for the existence of a temporal graph G′′ of lifetime at most i −1 with strict reachability graph equal to (V, A′ \\ A′′), and if such a temporal graph exists, we append a new snapshot to the end with edges S.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Intuitively",
                "graph",
                "reachability",
                "temporal",
                "reaches",
                "recurrence",
                "resembles",
                "splitting",
                "arcs",
                "sets"
            ]
        }
    },
    {
        "id": "3d4127ad-adc7-4c39-aaba-1c465c0628ed",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The second and the third line of the recurrence then ensure that (i) all arcs of A′ \\ A′′ are realized by introducing this new snapshot i, and that (ii) no arcs outside of A′ are realized by introducing this new snapshot i. We omit the formal correctness proof and proceed with the evaluation of the dynamic program. The graph D is realizable if and only if T[A, n · m] = 1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realized",
                "introducing",
                "snapshot",
                "arcs",
                "line",
                "recurrence",
                "ensure",
                "program",
                "omit",
                "formal"
            ]
        }
    },
    {
        "id": "44233d95-58fe-4338-b5bf-f22e008499e8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since there are 2|A| · n · m table entries and each such entry can be computed in 2|A| · 2|E| · nO(1) ⊆2O(|A|) · nO(1) time, the whole algorithm runs in 2O(|A|) · nO(1) time. This completes the proof for Any Strict URGR. Moreover, note that a corresponding realization (if one exists) can be found in the same time via traceback. If we consider proper labelings, we can modify the recurrence to only allowed to take subsets of edges S ⊆E that are matchings.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "table",
                "entries",
                "entry",
                "computed",
                "algorithm",
                "runs",
                "URGR",
                "Strict",
                "completes"
            ]
        }
    },
    {
        "id": "315d84b5-7fc5-48f0-9149-aaff5a546ecc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If we consider non-strict paths, we can modify the recurrence to ask whether w reaches v via a path using only edges of S instead of only a single edge of S. 10 Recognizing and Realizing Temporal Reachability Graphs If we consider simple labelings, we can modify the dynamic program by a third dimen- sion E′ ⊆E which stores the edges of E we may possibly assign labels to.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "modify",
                "edges",
                "non-strict",
                "recurrence",
                "reaches",
                "single",
                "paths",
                "path",
                "Recognizing",
                "Realizing"
            ]
        }
    },
    {
        "id": "1532f2f0-7b35-4641-81f7-02c61ad95ef9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In the recurrence, we then have to ensure that S is only a subset of E′ and also remove S from the allowed edges in the recursive call, that is, we have to replace T[A′ \\ A′′, i −1] by T[A′ \\ A′′, i −1, E′ \\ S]. For the versions of DRGRunder consideration, we do essentially the same, except that S has to be a subset of A. If we consider proper labelings, instead of picking a matching for S, we must pick a set of arcs that do not induce a path of length more than one.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subset",
                "recurrence",
                "call",
                "ensure",
                "remove",
                "allowed",
                "edges",
                "recursive",
                "replace",
                "consideration"
            ]
        }
    },
    {
        "id": "60364765-3343-4c6a-9cd8-a66ddd55f677",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If we consider simple labelings, we do essentially the same as in the undirected case. We extend the table by a third dimension that stores the arcs A∗of A we may possibly assign labels to. In the recurrence, we then have to ensure that S is only a subset of A∗. ◀ 4 Solid Bridge Edges: Properties and Splitting Operations In this section, we show several structural results as well as three splitting operations for graphs with bridge edges in the solid graph.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labelings",
                "case",
                "simple",
                "essentially",
                "undirected",
                "Bridge",
                "Edges",
                "Splitting",
                "Operations",
                "Solid"
            ]
        }
    },
    {
        "id": "7df8619c-c1ae-4d8c-b8ae-edcb4a3f7b0c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "These insights will be important for our FPT algorithm and will also simplify instances of URGR where the solid graph is a tree. Consider a bridge edge e = {u, v} whose deletion splits the solid graph G into connected components Gu and Gv, where Gu contains u and Gv contains v. A dashed arc (a, b) spans e if a ∈V (Gu) and b ∈V (Gv) or vice versa. Two arcs (a, b) and (c, d) span e in the same direction if they span e and either a, c ∈V (Gu) or a, c ∈V (Gv).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "FPT",
                "URGR",
                "solid",
                "graph",
                "tree",
                "insights",
                "important",
                "algorithm",
                "simplify",
                "instances"
            ]
        }
    },
    {
        "id": "f9d8ed7e-8fe3-4947-90b6-f2e2b675597c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If e has a single label in a realization, then it must be the case that the dashed arcs spanning e are “transitive” in the following sense: If dashed arcs (a, b) and (c, d) both span e in the same direction, then (a, d) and (c, b) must also be dashed arcs. This is because for any two temporal paths that pass through e in the same direction, the part of one path up to edge e can be combined with the part of the other path after e. ▶Definition 6.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "dashed",
                "arcs",
                "direction",
                "transitive",
                "realization",
                "sense",
                "part",
                "single",
                "label",
                "case"
            ]
        }
    },
    {
        "id": "b4983293-fb1e-4a62-818c-6b9b0bd68404",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consider a bridge edge e = {u, v} whose deletion splits the solid graph G into connected components Gu and Gv. The edge e is a special bridge edge if there exist vertices a in Gu and b in Gv such that Dav = 1, Dub = 1 and Dab = 0 (or if the same condition holds with u and v exchanged). A bridge edge that is not special is called non-special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "bridge",
                "Dub",
                "Dav",
                "Dab",
                "deletion",
                "splits",
                "solid",
                "graph",
                "connected"
            ]
        }
    },
    {
        "id": "e1aa53c5-f2f0-4afc-bb02-bb9b637c17b8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Intuitively, a special bridge edge is a bridge edge e such that there are dashed arcs spanning e in the same direction for which transitivity (as outlined above) is violated. We also refer to special bridge edges as special bridges, special solid edges, or just as special edges. ▶Lemma 7. In each frugal realization of D, every special bridge edge is assigned two labels and every non-special bridge edge is assigned a single label. Proof. Let λ be a frugal realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "bridge",
                "special",
                "edge",
                "edges",
                "Intuitively",
                "transitivity",
                "violated",
                "Lemma",
                "dashed",
                "arcs"
            ]
        }
    },
    {
        "id": "45a76dfd-482d-421e-b8e3-7f592d44804f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consider a bridge edge e = {u, v}. It is clear that e must receive at least one label in λ, as otherwise the endpoints of e cannot reach each other. As a bridge edge is not contained in a triangle, it receives at most two labels in λ by Lemma 2. It is clear that every special edge must receive two labels as otherwise the violation of transitivity that happens on a special edge would be impossible. Assume that e = {u, v} is a non-special edge that has received two labels x and y with x < y.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "labels",
                "bridge",
                "clear",
                "receive",
                "Lemma",
                "special",
                "receives",
                "label",
                "endpoints"
            ]
        }
    },
    {
        "id": "2dcfa885-3c5f-4ad6-bd37-f251502c492d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We claim that replacing the double label of e by the new label (x + y)/2 produces a new solution λ′ that also realizes D, a contradiction to λ being frugal. (The possibly half-integral label (x+y)/2 can be made integral in the end by replacing all labels by integers while maintaining their order.) Thomas Erlebach, Othon Michail, Nils Morawietz 11 Consider strict temporal paths first. Note again that the edges f ̸= e incident with endpoints of e can only have labels ≤x or ≥y.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "produces",
                "frugal",
                "label",
                "replacing",
                "claim",
                "double",
                "solution",
                "realizes",
                "contradiction",
                "labels"
            ]
        }
    },
    {
        "id": "b1024cbc-0d82-48aa-aa9e-3940614cd921",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We consider the reachability from Gu to Gv. (The arguments for the reachability from Gv to Gu are analogous.) Case 1: If every a ∈V (Gu) can reach v in step x in (G, λ), then it can reach v in step (x + y)/2 in (G, λ′). The vertices in V (Gv) that u can reach starting in time step x in λ are precisely the vertices in V (Gv) that can be reached starting in time step (x+y)/2 in λ′, and hence the reachability from Gu to Gv is the same in (G, λ′) as in (G, λ).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reachability",
                "step",
                "reach",
                "vertices",
                "time",
                "starting",
                "analogous",
                "arguments",
                "Case",
                "precisely"
            ]
        }
    },
    {
        "id": "e9878877-3ddd-40c3-b6f9-caa65ce20df3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Case 2: If there exists a ∈V (Gu) that can reach v only in step y in (G, λ), then every vertex b in V (Gv) that can be reached from u in (G, λ) must be reachable starting from u in time step y in (G, λ) (otherwise a would not be able to reach b, making e a special edge). All vertices from V (Gu) that can reach v in (G, λ) can reach v in (G, λ′) in time step (x + y)/2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "step",
                "time",
                "Case",
                "making",
                "edge",
                "exists",
                "vertex",
                "reached",
                "reachable"
            ]
        }
    },
    {
        "id": "05f431b2-86a1-41b6-8a8a-0135f259427d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, the vertices in V (Gv) that u can reach starting in time step x in (G, λ) (which are the same as those that can be reached starting at u in time step y in (G, λ)) are precisely the vertices in V (Gv) that can be reached starting at u in time step (x + y)/2 in (G, λ′). Hence, the reachability from V (Gu) to V (Gv) is the same in (G, λ′) as in (G, λ). Repeating such replacements then yields a valid solution in which all non-special edges have a single label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "starting",
                "step",
                "vertices",
                "reached",
                "reach",
                "precisely",
                "reachability",
                "Repeating",
                "label"
            ]
        }
    },
    {
        "id": "48075ca6-a348-4c96-a98f-f0788ae918c5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The same approach works for non-strict temporal graphs (where the labels of edges f ̸= e incident with endpoints of e must be < x or > y in (G, λ)). Furthermore, if the original labeling is proper, then the final labeling is also proper. ◀ Note that this implies the following due to Lemma 2. ▶Corollary 8. Let D be an instance of any version of URGR under consideration besides Any Strict URGR. If the solid graph of D contains a special solid edge, then D is a no-instance.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "proper",
                "labeling",
                "URGR",
                "approach",
                "works",
                "non-strict",
                "temporal",
                "labels",
                "incident",
                "endpoints"
            ]
        }
    },
    {
        "id": "092e0544-c676-4523-bf70-de057d9fc3b7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We are now interested in when a pair of bridge edges that share an endpoint must, must not, or may share a label. For the non-strict problem variants (and thus also the happy and proper cases for strict paths), adjacent bridges obviously cannot share a label. The following definition captures the condition for when adjacent bridges must share a label in the other cases. ▶Definition 9. Consider Any Strict URGR or Simple Strict URGR. Let D be an instance of URGR and let G be the solid graph of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "share",
                "label",
                "strict",
                "URGR",
                "bridges",
                "definition",
                "adjacent",
                "interested",
                "pair",
                "edges"
            ]
        }
    },
    {
        "id": "74c7b59f-2eed-456b-8376-fa6c3c78368c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let {u, c} and {v, c} be bridges in G, and let Vu (Vv) denote the set of vertices in the same connected component as u (v) in G −{{u, c}} (G −{{v, c}}). We say that {u, c} and {v, c} are bundled, if (u, v) /∈A and (v, u) /∈A, or at least one of the two edges is special with respect to D[Vu ∪Vv ∪{c}]. Note that the second condition of Definition 9 cannot occur in a yes-instance of Simple Strict URGR. ▶Lemma 10. In every realization, each pair of bundled bridges shares a label. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "denote",
                "set",
                "vertices",
                "connected",
                "component",
                "bridges",
                "bundled",
                "Definition",
                "URGR",
                "Lemma"
            ]
        }
    },
    {
        "id": "69cf2648-18e4-4de2-a9d1-7463b6fed32b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consider bridges {u, c} and {v, c} that are bundled. If (u, v) /∈A and (v, u) /∈A, both edges must receive the same single label. Assume for the rest of the proof that one of the two arcs, say the arc (u, v) is in A (and hence (v, u) /∈A) and at least one of the two edges {u, c} and {v, c} is special. This can only happen in the Any Strict URGR model. The labels on {c, v} must be at least as large as the largest label on {c, u}, as v cannot reach u.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "bridges",
                "bundled",
                "edges",
                "label",
                "Strict",
                "URGR",
                "arcs",
                "arc",
                "labels",
                "receive"
            ]
        }
    },
    {
        "id": "51c4da0c-8436-401d-93dc-84abdccef72e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As at least one of the two edges {u, c} and {v, c} is special in G[Vu ∪Vv ∪{c}] by Definition 9, there must exist vertices a ∈Vu and b ∈Vv such that Dac = Dub = 1 and 12 Recognizing and Realizing Temporal Reachability Graphs Dab = 0 if {u, c} is special or such that Dav = Dcb = 1 and Dab = 0 if {v, c} is special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dab",
                "special",
                "Dub",
                "Dcb",
                "Definition",
                "Dac",
                "Recognizing",
                "Dav",
                "Realizing",
                "Temporal"
            ]
        }
    },
    {
        "id": "ed6bb5e3-fa14-439a-89a0-0230b2ca20d8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "(It cannot be that {u, c} or {v, c} is special because there are vertices x ∈Vv and y ∈Vu with Dxc = Dvy = 1 or Dxu = Dcy = 1 and Dxy = 0; this would contradict the absence of a temporal path from v to u.) If {u, c} and {v, c} did not share a label, any temporal path from a to c could be concatenated with any temporal path from c to b, contradicting Dab = 0. Hence, the two edges must share a label. ◀ Next, we characterize pairs of adjacent bridges that must not share a label in any realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dvy",
                "Dcy",
                "path",
                "Dxc",
                "Dxu",
                "Dxy",
                "temporal",
                "share",
                "label",
                "special"
            ]
        }
    },
    {
        "id": "fcb13834-025d-4450-8ea2-353d51df6dd7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "▶Definition 11. Let D be an instance of URGR and let G be the solid graph of D. Let {u, c} and {v, c} be bridges in G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Definition",
                "URGR",
                "instance",
                "solid",
                "graph",
                "bridges"
            ]
        }
    },
    {
        "id": "a230e658-8719-4239-91bd-90830fcc009d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We say that {u, c} and {v, c} are separated, if we consider Proper URGR, Happy URGR, or Non-strict URGR, we consider Simple Strict URGR and A contains an arc of {(u, v), (v, u)}, one arc of {(u, v), (v, u)} is contained in A and neither of the bridges {u, c} and {v, c} is special, there are w1, w2 ∈N(c) such that {c, w1} and {c, w2} are also bridges and (u, w1, w2, v) or (v, w1, w2, u) is a path in D, or there is w ∈N(c) such that {w, c} is also a bridge and (u, w, v) (or (v, w, u)) is a path in D such that (i) {u, c} is non-special, (ii) {w, c} is special, or (iii) {v, c} is non-special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "special",
                "non-special",
                "path",
                "bridges",
                "arc",
                "Happy",
                "Proper",
                "Non-strict",
                "Simple"
            ]
        }
    },
    {
        "id": "72ae4bb2-056a-4346-9ee0-07ccf3cd6330",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "▶Lemma 12. In every frugal realization, each pair of separated bridges shares no label. Proof. If we consider non-strict paths, adjacent bridges cannot share a label because a shared label would imply a triangle containing at least one of these bridges. If we consider proper or happy labeling, no two adjacent edges can share a label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "label",
                "bridges",
                "share",
                "adjacent",
                "Proof",
                "realization",
                "frugal",
                "pair",
                "separated"
            ]
        }
    },
    {
        "id": "58c2c35e-2dc9-48c4-8bdb-41638985b815",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If we consider Simple Strict URGR and A contains, say, the arc (u, v), then the label of {c, v} must be larger than the label of {c, u} because each edge receives at most one label and the two edges must form a temporal path from u to v. If neither of the bridges {u, c} and {v, c} is special and A contains one of the arcs (u, v) or (v, u) (note that it cannot contain both), the same argument as in the previous paragraph shows that the single labels of the two bridges cannot be the same.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "Simple",
                "Strict",
                "URGR",
                "edge",
                "edges",
                "larger",
                "receives",
                "form",
                "temporal"
            ]
        }
    },
    {
        "id": "a76f6eca-a8d0-4877-8fb8-ab13b22f4261",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Now consider the case that there exist w1, w2 ∈N(c) such that {c, w1} and {c, w2} are also bridges and (u, w1, w2, v) is a path in D. (The argument for the case that (v, w1, w2, u) is a path in D is analogous.) As the four edges from c to u, w1, w2, v are all bridges, there cannot be any solid edge among the vertices u, w1, w2, v. Thus, there are dashed arcs (u, w1), (w1, w2) and (w2, v). Let x1 = u, x2 = w1, x3 = w2, and x4 = v. Let λ be a frugal realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "case",
                "path",
                "exist",
                "bridges",
                "analogous",
                "argument",
                "edges",
                "edge",
                "solid",
                "vertices"
            ]
        }
    },
    {
        "id": "5d508200-2347-43db-92d3-b1dca6b022d0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For i ∈[4], let ℓxi = min λ({c, xi}) and hxi = max λ({c, xi}). We have ℓxi < hxi+1 for i ∈[3] as (xi, xi+1) ∈A and hxi ≤ℓxi+1 as (xi+1, xi) /∈A. Thus, we have hx1 ≤ℓx2 < hx3 ≤ℓx4, showing that hx1 < ℓx4 and hence {c, x1} and {c, x4} cannot share a label. Finally, consider the case that there is w ∈N(c) such that {w, c} is also a bridge and (u, w, v) is a path in D such that (i) {u, c} is non-special, (ii) {w, c} is special, or (iii) {v, c} is non-special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "hxi",
                "ℓxi",
                "min",
                "max",
                "non-special",
                "Finally",
                "iii",
                "showing",
                "label",
                "share"
            ]
        }
    },
    {
        "id": "0ce91f2b-c489-43e3-bb9f-5b6cb49912b4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "(The argument for the case that (v, w, u) is a path in D is analogous.) Again, there cannot be any solid edges among the vertices u, w, v and thus there are dashed arcs (u, w) and (w, v). Let x1 = u, x2 = w and x3 = v and let λ be a frugal realization, and define ℓxi and hxi for i ∈[3] as above. We have ℓx1 ≤hx1 ≤ℓx2 ≤hx2 ≤ℓx3 ≤hx3 and ℓxi < hxi+1 for i ∈[2]. If {u, c} = {x1, c} is non-special, we have hx1 = ℓx1 < hx2 ≤ℓx3. If {w, c} = {x2, c} is special, we have hx1 ≤ℓx2 < hx2 ≤ℓx3.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "analogous",
                "argument",
                "case",
                "path",
                "ℓxi",
                "hxi",
                "arcs",
                "solid",
                "edges",
                "vertices"
            ]
        }
    },
    {
        "id": "8d5b7cac-4d0b-4475-8bca-971e12211c70",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If {v, c} = {x3, c} is non-special, we have hx3 = ℓx3 > ℓx2 ≥hx1. In all three cases, we have hx1 < ℓx3, showing that {c, x1} and {c, x3} cannot share a label. ◀ Thomas Erlebach, Othon Michail, Nils Morawietz 13 Lemmas 10 and 12, thus imply the following. ▶Corollary 13. Let e and e′ be adjacent bridges that are both bundled and separated in D. Then D is not realizable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "non-special",
                "Lemmas",
                "Corollary",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "cases"
            ]
        }
    },
    {
        "id": "66e807b8-ca41-488d-934e-6cdfd888a52f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "4.1 Splitting Into Subinstances Next, we show that bridge edges in the solid graph can be used to split an instance into smaller subinstances that can be solved independently and have the property that the original instance is realizable if and only if the two subinstances are realizable. First, consider non-special bridges. ▶Lemma 14 (Splitting at a non-special bridge). Consider any variant of URGR.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Subinstances",
                "Splitting",
                "instance",
                "realizable",
                "bridge",
                "Lemma",
                "show",
                "edges",
                "solid",
                "graph"
            ]
        }
    },
    {
        "id": "f0d645f2-e9e2-4673-8de5-f89f44e86dee",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let e = {u, v} be a non-special bridge edge, and let Gu and Gv be the connected components of G resulting from the deletion of e. Then the instance D is realizable if and only if the subinstances induced by V (Gu) ∪{v} and V (Gv) ∪{u} are realizable. Proof. Let Du and Dv denote the subinstances induced by V (Gu) ∪{v} and V (Gv) ∪{u}, respectively. If D is realizable, then the realization λ induces realizations of the two subinstances Du and Dv.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subinstances",
                "realizable",
                "edge",
                "induced",
                "non-special",
                "bridge",
                "connected",
                "components",
                "resulting",
                "deletion"
            ]
        }
    },
    {
        "id": "b84e4b99-324b-48d2-b9c2-b7e985f17e23",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Du and Dv are realizable, their realizations assign a single label to e, and these realizations can be chosen so that e receives the same label in both realizations. Hence, the union of the two realizations is a realization of D. ◀ By applying Lemma 14 repeatedly to a non-special bridge edge that is not pendant until no such edge exists, we obtain subinstances in which all non-special bridge are pendant. Now consider special bridges.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realizations",
                "label",
                "realizable",
                "assign",
                "single",
                "chosen",
                "receives",
                "non-special",
                "Lemma",
                "bridge"
            ]
        }
    },
    {
        "id": "b0470310-3538-4c7f-9b05-b1d450903fac",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Special bridge edges cannot occur in yes-instances of any variant of URGR except Any Strict URGR (see Corollary 8), so we only consider Any Strict URGR in the following. Let edge e = {u, v} be a special bridge with Gu and Gv defined as above.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Strict",
                "Corollary",
                "Special",
                "bridge",
                "occur",
                "yes-instances",
                "variant",
                "edges",
                "edge"
            ]
        }
    },
    {
        "id": "a6af810b-3007-422a-956b-39f4fec6234c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If the instance is realizable, for every vertex in V (Gu) there are at most three possibilities for which vertices in V (Gv) it can reach, depending on whether it cannot reach v, can reach v at time α, or can reach v only at time β, where α and β with α < β are the labels assigned to e in the realization. The same holds with Gu and Gv exchanged. If this condition is violated, then the instance cannot be realized. The following definition captures this condition.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "time",
                "realizable",
                "depending",
                "realization",
                "instance",
                "vertex",
                "possibilities",
                "vertices",
                "labels"
            ]
        }
    },
    {
        "id": "3731210f-40e7-4d36-a5af-f14bd68dd496",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For any vertex w ∈V (Gu), let Ru→v(w) = {x ∈V (Gv) | (w, x) ∈A}, and define Rv→u(x) for x ∈V (Gv) analogously. ▶Definition 15. Let e = {u, v} be a special bridge edge with Gu and Gv defined as above. We say that e is a special bridge edge with plausible reachability if the following conditions hold: If there exist vertices a ∈V (Gu) and b ∈V (Gv) such that Dav = Dub = 1 and Dab = 0, then every vertex w ∈V (Gu) satisfies Ru→v(w) ∈{∅, Ru→v(a), Ru→v(u)} with ∅⊂ Ru→v(a) ⊂Ru→v(u).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "analogously",
                "define",
                "vertex",
                "special",
                "bridge",
                "edge",
                "Definition",
                "Dub",
                "Dav",
                "Dab"
            ]
        }
    },
    {
        "id": "0a28f80c-82e2-48fa-83a2-3d65141b130f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, every vertex satisfies Ru→v(w) ∈{∅, Ru→v(u)}. The same condition holds with the roles of Gu and Gv exchanged. ▶Lemma 16 (Splitting at a special bridge). Consider Any Strict URGR. Let e = {u, v} be a special bridge edge with plausible reachability, and let Gu and Gv be the connected components of G resulting from the deletion of e.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "satisfies",
                "Lemma",
                "special",
                "bridge",
                "Splitting",
                "URGR",
                "Strict",
                "exchanged",
                "condition"
            ]
        }
    },
    {
        "id": "c60829eb-cc62-4b1a-9178-9188f4073a06",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then the instance D is realizable if and only if the two subinstances constructed as follows are realizable: To construct subinstance Du, take the subgraph D′ of D induced by V (Gu) ∪{v} and attach one or two leaves to v as follows: 14 Recognizing and Realizing Temporal Reachability Graphs If there exist vertices a ∈V (Gu) and b ∈V (Gv) such that Dav = Dub = 1 and Dab = 0, then attach a leaf (called out-leaf) z to v with D′ zv = 1 and D′ az = 1 for all a ∈{v} ∪{w ∈V (Gu) | Ru→v(w) = Ru→v(u)}, and all other entries of D′ involving z equal to 0.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dub",
                "realizable",
                "attach",
                "Recognizing",
                "Dav",
                "Dab",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs"
            ]
        }
    },
    {
        "id": "644a7ced-9985-410d-bf67-bda7dfd9e4d1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If there exist vertices c ∈V (Gv) and d ∈V (Gu) such that Dcu = Dvd = 1 and Dcd = 0, then attach a leaf (called in-leaf) z′ to v with D′ vz′ = 1 and D′ z′a = 1 for all a ∈{v} ∪Rv→u(c) and D′ z′z = 1 if an out-leaf z has been added, and all other entries of D′ involving z′ equal to 0. Note that at least one of the two conditions above must be satisfied because e is a special bridge edge. The resulting instance D′ is the desired subinstance Du.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dvd",
                "Dcu",
                "Dcd",
                "leaf",
                "called",
                "in-leaf",
                "vz′",
                "z′a",
                "z′z",
                "added"
            ]
        }
    },
    {
        "id": "b50dcd93-a733-454e-ab80-c079078d9c63",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Subinstance Dv is constructed analogously, with the roles of u and v exchanged. Proof. Observe that e is a special bridge edge also in both subinstances Du and Dv. Further- more Du has an out-leaf if and only if Dv has an in-leaf, and vice versa. If D is realizable, then a realization of Du can be obtained as follows: Let λ be a frugal realization of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "analogously",
                "exchanged",
                "constructed",
                "roles",
                "Proof",
                "realization",
                "Subinstance",
                "Observe",
                "in-leaf",
                "versa"
            ]
        }
    },
    {
        "id": "5f659ec4-e980-4fc8-bcb9-94a2e86c4868",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let λu be the restriction of λ to edges in the subgraph of G induced by V (Gu) ∪{v}, and let α, β with α < β be the two labels assigned to e by λu. If Du has an in-leaf z, set λu(vz) = α. If Du has an out-leaf z′, set λ(vz′) = β. We claim that λu is a realization of Du: It definitely realizes the reachability between all vertices in V (Gu) ∪{v}, so we only need to consider the in- and/or out-leaf attached to v.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "restriction",
                "edges",
                "subgraph",
                "induced",
                "labels",
                "assigned",
                "out-leaf",
                "vz′",
                "in-leaf"
            ]
        }
    },
    {
        "id": "1ceb0ba2-b2a5-4595-af2e-1f53457b2317",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If v has an out-leaf z, then the vertices in V (Gu) that can reach z are exactly those that can reach v at time α, as desired. If v has an in-leaf z′, then the vertices in V (Gu) that z′ can reach are exactly the vertices that can be reached from v if traversing the edge vu at time β, as desired. Hence, λu is a realization of Du. A realization λv of Dv can be obtained analogously. Now assume that Du and Dv have realizations λu and λv, respectively.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "reach",
                "desired",
                "time",
                "out-leaf",
                "realization",
                "in-leaf",
                "reached",
                "traversing",
                "edge"
            ]
        }
    },
    {
        "id": "c3ff9147-5955-4c0b-ba30-427d92c5437d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By shifting labels and inserting empty time steps if necessary, we can assume that both labelings assign the same two labels α, β with α < β to uv (by possibly introducing empty time steps in both realizations). Consider Du and λu. If Du has an in-leaf z, the label of the non-special bridge edge vz must equal α, because z must reach some vertices in V (Gu) but not all vertices that v can reach.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "empty",
                "steps",
                "realizations",
                "shifting",
                "inserting",
                "assume",
                "labelings",
                "assign",
                "possibly"
            ]
        }
    },
    {
        "id": "04dffe51-203e-41d9-8b80-02c9ba0bc977",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Du has an out-leaf z′, the label of the non-special bridge edge vz′ must equal β as not all vertices from V (Gu) that can reach v can reach z′. We make the following modification to λu: If Du has no out-leaf and at least one edge f ̸= e incident with u receives label α, we reduce all labels ≤α on edges of Gu by one. This ensures that all vertices in V (Gu) that can reach v can reach v at time α, without changing any reachabilities.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "out-leaf",
                "vertices",
                "label",
                "edge",
                "non-special",
                "bridge",
                "vz′",
                "equal",
                "labels"
            ]
        }
    },
    {
        "id": "54a57921-cf6e-4dfb-b025-58a6f311ea21",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Du has no in-leaf and at least one edge f ̸= e incident with u that has label β, we increase all labels ≥β on edges of Gu by one. This ensures that all vertices in V (Gu) that can be reached from v can still be reached from v if traversing edge vu at time β.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reached",
                "in-leaf",
                "incident",
                "increase",
                "edge",
                "label",
                "labels",
                "edges",
                "ensures",
                "vertices"
            ]
        }
    },
    {
        "id": "7dabe3fd-dd27-4621-8815-4d0c03dd00ea",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Intuitively, these modifications ensure that temporal paths leaving Gu can reach v at time α (if there is no out-leaf) and temporal paths entering Gu can reach all vertices in Gu that v can reach even if these paths reach u only at time β (if there is no in-leaf). We apply the same modification to λv. Now let λ be the union of λu and λv. We claim that λ is a realization of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "paths",
                "temporal",
                "time",
                "Intuitively",
                "out-leaf",
                "in-leaf",
                "ensure",
                "leaving",
                "entering"
            ]
        }
    },
    {
        "id": "52d58dfb-7c39-4260-9196-b2028ee221d5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Reachability requirements within V (Gu) ∪{v} and V (Gv) ∪{u} are clearly satisfied because λu and λv realize Du and Dv, respectively. Consider an arbitrary a ∈V (Gu). Case 1: Du has no out-leaf. If Ru→v(a) = ∅, then a cannot reach v in λ as it cannot reach v in λu. If Ru→v(a) = Ru→v(u), then a can reach v at time α in λu and can hence reach all vertices in Ru→v(u) in λ. Case 2: Du has an out-leaf z. If Ru→v(a) = ∅, then a cannot reach v in λ as it cannot reach v in λu.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "Reachability",
                "Case",
                "requirements",
                "satisfied",
                "realize",
                "out-leaf",
                "arbitrary",
                "time",
                "vertices"
            ]
        }
    },
    {
        "id": "73813a2d-a13b-4760-b97c-b437af88c055",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Ru→v(a) = Ru→v(u), then a can reach v at time α in λu as otherwise it wouldn’t be able to reach z. Hence, it can reach all vertices in Ru→v(u) Thomas Erlebach, Othon Michail, Nils Morawietz 15 in λ. If ∅̸= Ru→v(a) ⊂Ru→v(u), then a can reach v only at time β in λu as otherwise it would be able to reach z, a contradiction to the definition of Du. Hence, in λ it can reach all vertices in V (Gv) that can be reached after traversing the edge uv from u to v at time β.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "time",
                "vertices",
                "n’t",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz"
            ]
        }
    },
    {
        "id": "c6cb5492-2ce0-415c-8248-c941c9e80978",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By definition of Dv, these are the vertices in V (Gv) that are reachable from the in-leaf z′′ of Dv, and by definition of Dv that set of vertices is Ru→v(c), where c is an arbitrary vertex in V (Gu) with ∅̸= Ru→v(c) ⊂Ru→v(u). As the special edge has plausible reachability, Ru→v(c) = Ru→v(a). Therefore, reachability from Gu to Gv is realized correctly by λ. The arguments for reachability from Gv to Gu are analogous.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "definition",
                "vertices",
                "reachability",
                "reachable",
                "in-leaf",
                "set",
                "arbitrary",
                "vertex",
                "special",
                "edge"
            ]
        }
    },
    {
        "id": "7076aeb9-7d4c-46c2-a08c-bbe436d336fb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ Finally, we consider the case of two pendant edges that must receive the same single label in any realization and argue that we can remove one of them from the instance provided their reachability requirements from/to the rest of the graph are the same. ▶Lemma 17 (Removal of redundant pendant vertices). Let v and w be two vertices of degree 1 that are both adjacent to the same vertex u in G and satisfy (v, w) /∈A and (w, v) /∈A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Finally",
                "pendant",
                "case",
                "edges",
                "receive",
                "single",
                "label",
                "realization",
                "argue",
                "remove"
            ]
        }
    },
    {
        "id": "fa401754-4981-4f05-b97f-b5ddad3b015c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For all variants of Non-strict URGR (including Proper URGR and Happy URGR), the instance is a no-instance. For Any Strict URGR and Any Simple URGR, we have that if Dvx = Dwx and Dxv = Dxw hold for all x ∈V \\ {v, w}, then D is realizable if and only if the subinstance D′ resulting from D by deleting v is realizable; otherwise, D is a no-instance. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Non-strict",
                "Proper",
                "Happy",
                "no-instance",
                "including",
                "variants",
                "instance",
                "Dvx",
                "Dwx"
            ]
        }
    },
    {
        "id": "da5c2c35-9ce1-4109-ab2d-35b281590f2e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For all variants of Non-strict URGR, it is impossible to have adjacent bridge edges without a temporal path between their endpoints different from the common endpoint. Therefore, consider Any Strict URGR and Any Simple URGR for the remainder of the proof. We know that uv and uw must receive the same single label in any realization and thus must reach the same set of vertices in V \\ {v, w} and be reached from the same set of vertices in V \\ {v, w}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Non-strict",
                "endpoints",
                "endpoint",
                "variants",
                "impossible",
                "adjacent",
                "bridge",
                "edges",
                "temporal"
            ]
        }
    },
    {
        "id": "e1dc3f25-e8c7-4350-86ff-53372f42e349",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If they have different reachability, it is clear that D is a no-instance. If their reachability is the same, the claim can be shown as follows: A solution to D clearly induces a solution to D′. A solution to D′ can be extended into a solution to D by assigning uv the label that uw has received in the solution to D′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "solution",
                "no-instance",
                "reachability",
                "clear",
                "claim",
                "shown",
                "induces",
                "extended",
                "assigning",
                "label"
            ]
        }
    },
    {
        "id": "556ad15a-d5cd-4961-a57d-a7fcdd69d670",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ 5 Algorithms for Instances with a Tree as Solid Graph Since all edges of trees are bridges, we now describe, based on our insights about labels in frugal realizations, an algorithm for instances of URGR where the solid graph is a tree. ▶Lemma 18. If an instance of URGR that has a tree as solid graph is realizable, then there is a frugal realization such that each special bridge receives two consecutive labels. Proof. By Lemma 2, we can assume that no edge has more than two labels.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Solid",
                "Graph",
                "Tree",
                "URGR",
                "Algorithms",
                "algorithm",
                "Lemma",
                "Instances",
                "describe",
                "based"
            ]
        }
    },
    {
        "id": "67368af6-e53c-4c84-8301-2efd1c8825f5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume that an edge e has two labels a and b with b > a + 1. Every edge adjacent to e either only has labels ≤a or only has labels ≥b, as an adjacent edge with a label strictly between a and b or with a label ≤a and a label ≥b would create a triangle. Hence, the gap between a and b can be eliminated: In the stars centered at the endpoints of e, shift all labels ≤a by adding b −a −1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "edge",
                "label",
                "Assume",
                "adjacent",
                "triangle",
                "strictly",
                "create",
                "eliminated",
                "shift"
            ]
        }
    },
    {
        "id": "2c99f147-997a-4386-b404-801dbcd8cb70",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, propagate the shifts to the remainder of the tree as follows: If the labels on an edge f ̸= e in one of the stars centered at endpoints of e were shifted by b −a + 1, apply that same shift to all labels on all edges in the subtree reachable over f. This modification maintains a valid solution and reduces the number of edges with two labels that have a gap between them by at least 1. Repeating this modification yields the claim of the lemma.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "shifts",
                "shift",
                "edges",
                "propagate",
                "apply",
                "remainder",
                "tree",
                "stars",
                "centered"
            ]
        }
    },
    {
        "id": "163333c0-bd3e-4a35-afb4-aa5b58fd8ac9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ Let an instance D be given such that the graph of solid edges is a tree. For any internal node of the tree, we refer to the subgraph induced by the node and its neighbors as an 16 Recognizing and Realizing Temporal Reachability Graphs induced star. Because we can apply the splitting rule of Lemma 14 to any internal tree edge that is not special, it suffices to consider instances in which all internal tree edges are special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "tree",
                "internal",
                "Recognizing",
                "solid",
                "edges",
                "graph",
                "Graphs",
                "special",
                "Realizing",
                "Temporal"
            ]
        }
    },
    {
        "id": "dae56c3f-5e02-40b8-8694-3969aa8941be",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, we can apply Lemma 17 to reduce the problem to a tree in which there are no two nodes u and w adjacent to the same vertex v such that both (u, w) /∈A and (w, u) /∈A. To see this, note that if neither (u, w) nor (w, u) are in A, then Observation 1 together with Lemma 7 implies that vu and vw are non-special bridges and hence leaves of the tree, so Lemma 17 can indeed be used to eliminate one of u and w.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "tree",
                "apply",
                "reduce",
                "problem",
                "nodes",
                "adjacent",
                "vertex",
                "Observation",
                "note"
            ]
        }
    },
    {
        "id": "393a597e-2c9d-4a6b-8c5b-cb94865d732f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For every induced star in the resulting instance, the auxiliary graph of dashed arcs between its leaves is an orientation of a complete graph. Furthermore, this orientation is acyclic, as a directed cycle on the neighbors u1, u2, . . . , uk of v, with ℓi = min λ(vui) and hi = max λ(vui) for 1 ≤i ≤k, would imply that ℓ1 < h2 ≤ℓ3 ≤h3 ≤· · · ≤ℓk ≤hk ≤ℓ1, a contradiction.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "orientation",
                "instance",
                "vui",
                "induced",
                "star",
                "resulting",
                "auxiliary",
                "dashed",
                "arcs"
            ]
        }
    },
    {
        "id": "42bd3a1b-0074-46a7-9cec-d608454f43c2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Therefore, the auxiliary graph of dashed arcs between the leaves of the induced star is a complete DAG (also called an acyclic tournament) if the instance is realizable. The following definition captures the properties of the resulting simplified instances. ▶Definition 19.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "tournament",
                "realizable",
                "definition",
                "auxiliary",
                "graph",
                "dashed",
                "arcs",
                "leaves",
                "induced"
            ]
        }
    },
    {
        "id": "138d23e3-fa39-4ace-afc5-18dd4cf67416",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "An instance of RGR is a simplified tree instance if the solid edges form a tree where every internal edge is special, every pendant edge is non-special, and the auxiliary graph of dashed arcs between the leaves of each induced star is a complete DAG.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "RGR",
                "edge",
                "instance",
                "tree",
                "special",
                "non-special",
                "simplified",
                "solid",
                "form"
            ]
        }
    },
    {
        "id": "fd61dd80-7698-4ad8-abe5-4dc9e04c30d5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In order to solve the problem on an instance D such that the solid graph of solid edges is a tree, we can split the instance into simplified tree instances in such a way that the original instance is realizable if and only if all the resulting simplified instances are realizable. The total size of the resulting simplified instances is polynomial in the size of the original instance as every edge of the solid graph of the original instance occurs in at most two of the simplified instances.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "instance",
                "simplified",
                "original",
                "instances",
                "solid",
                "tree",
                "realizable",
                "graph",
                "resulting",
                "order"
            ]
        }
    },
    {
        "id": "4fcd3a76-de0b-447f-940a-dbfb2936bf8b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, the splitting operations can be applied in polynomial time. The discussion can be summarized in the following lemma. ▶Lemma 20. There is a polynomial-time algorithm for the realization problem for instances where the solid edges form a tree if and only if there is a polynomial-time algorithm for the realization problem for simplified tree instances. ▶Observation 21. Let λ be an undirected realization of a directed graph D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "lemma",
                "time",
                "realization",
                "splitting",
                "operations",
                "applied",
                "polynomial",
                "polynomial-time",
                "algorithm",
                "problem"
            ]
        }
    },
    {
        "id": "d05102bb-288e-47c0-bbf1-3ef93b12b116",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "No three special bridges sharing one common endpoint share a label. Proof. Let λ be an undirected realization for D. Assume three solid bridges that share a common endpoint have the common label p. There must exist two edges whose labels are p and a label greater than p, or two edges whose labels are p and a label smaller than p. In both cases, there must be a solid edge between the non-shared endpoints of these edges, a contradiction to the assumption that all edges are bridges. ◀ ▶Lemma 22.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "edges",
                "common",
                "bridges",
                "share",
                "special",
                "sharing",
                "labels",
                "endpoint",
                "solid"
            ]
        }
    },
    {
        "id": "9fd83fe9-c680-4c0c-922c-b52b2fb37f4d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consider an induced star in a simplified tree instance with center node u and leaves v1, . . . , vk indexed in topological order. If the instance is realizable, the following must hold: If uvi and uvi+2 are bundled for some i ∈[k −2], then uvi and uvi+1 as well as uvi+1 and uvi+2 are also bundled. Proof. If uvi and uvi+2 are bundled, then uvi and uvi+2 must be special, uvi+1 must be non-special, and all three edges share a label γ in any realization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "uvi",
                "bundled",
                "leaves",
                "induced",
                "star",
                "simplified",
                "tree",
                "center",
                "node",
                "instance"
            ]
        }
    },
    {
        "id": "122c0115-98d8-4f9a-bfa1-f4b0e96f715d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By Definition 9 one of the two edges uvi and uvi+2 must be special in G[Vvi ∪Vvi+2 ∪{u}]. Assume that uvi is special. Thus, there must be a vertex x in Vvi and a vertex y in Vvi+2 such that Dxu = Dviy = 1 and Dxy = 0. But then we also have Dxu = Dvivi+1 = 1 and Dxvi+1 = 0, and hence uvi is also special in G[Vvi ∪Vvi+1 ∪{u}], and thus uvi and uvi+1 are bundled.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Vvi",
                "uvi",
                "Definition",
                "special",
                "Dxu",
                "edges",
                "Dviy",
                "Dxy",
                "Dvivi",
                "vertex"
            ]
        }
    },
    {
        "id": "d8f5768a-1416-456c-8539-1d4bd4dbb66e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, we have Dvi+1vi+2 = Duy = 1 but Dvi+1y = 0, and hence uvi+2 is also special in G[Vvi+1 ∪Vvi+2 ∪{u}], Thomas Erlebach, Othon Michail, Nils Morawietz 17 and thus uvi+1 and uvi+2 are bundled. The case that uvi+2 is special in G[Vvi ∪Vvi+2 ∪{u}] can be handled analogously. ◀ We now give an algorithm for solving instances whose solid edges form a tree. ▶Theorem 23. There is a polynomial-time algorithm for solving instances of Any Strict URGR for which the solid edges form a tree. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Vvi",
                "Dvi",
                "Duy",
                "uvi",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz"
            ]
        }
    },
    {
        "id": "17117104-70df-4768-b254-b9425d24b888",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By Lemma 20, it suffices to consider simplified tree instances. In particular, the auxiliary graphs of dashed arcs for all induced stars are complete DAGs. We compute a labeling for every star and merge the labelings in DFS order starting with an arbitrary star. Consider the computation of the labeling for the star centered at a node u. We know that every special edge incident with u receives two consecutive labels and every non-special edge receives a single label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "instances",
                "star",
                "suffices",
                "simplified",
                "tree",
                "labeling",
                "DFS",
                "edge",
                "receives"
            ]
        }
    },
    {
        "id": "be0a2f76-ddb5-4a72-88ab-88afb1581b0e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, we know that the dashed arcs between the leaves of the star form a complete DAG. Denote the leaves by v1, v2, . . . , vk in topological order. For 1 ≤i ≤k, call the edge uvi a double edge if it is special and a single edge otherwise. We label the edges in order from uv1 to uvk. Initially, we assign uv1 the label 1 if it is a single edge and the labels 1, 2 if it is a double edge. For i = 2, 3, . . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "edge",
                "leaves",
                "dashed",
                "arcs",
                "star",
                "form",
                "complete",
                "double",
                "single"
            ]
        }
    },
    {
        "id": "914e835b-19d5-4c1b-9309-f8e25781a5df",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": ", k, distinguish the following cases: Case 1: uvi−1 is a double edge labeled a −1, a, uvi is a single edge, and uvi+1 is a single edge or i = k. If there is a vertex w that can reach u via uvi−1 but cannot reach vi (which implies that uvi−1 and uvi are bundled), assign label a to uvi. Otherwise, assign label a + 1 to uvi. Case 2: uvi−1 is a double edge labeled a −1, a, uvi is a single edge, and uvi+1 is a double edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "uvi",
                "edge",
                "double",
                "single",
                "Case",
                "assign",
                "labeled",
                "label",
                "distinguish",
                "reach"
            ]
        }
    },
    {
        "id": "d8b32cea-e413-4426-879e-7e4274103103",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If there is a vertex w that can reach u via uvi−1 but cannot reach vi or cannot reach all vertices that u can reach via vi+1 (implying that uvi−1 and uvi are bundled, cf. Lemma 22), assign label a to uvi. Otherwise, assign label a + 1 to uvi. Case 3: uvi−1 is a single edge labeled a, and uvi is a single edge. Label uvi with label a + 1. Case 4: uvi−1 is a single edge labeled a, and uvi is a double edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "uvi",
                "reach",
                "Lemma",
                "label",
                "edge",
                "assign",
                "single",
                "Case",
                "implying",
                "bundled"
            ]
        }
    },
    {
        "id": "0b0574c0-74e3-4660-9c7d-94db79e11cb9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If there is a vertex w that can be reached from u via the edge uvi but cannot be reached from vi−1 (implying that uvi−1 and uvi are bundled), assign labels a, a + 1 to uvi. Otherwise, assign labels a + 1, a + 2 to uvi. Case 5: uvi−1 is a double edge labeled a −1, a, and uvi is a double edge. If there is a vertex that can reach u via uvi−1 but cannot reach all vertices that u can reach via uvi (implying that uvi−1 and uvi are bundled), assign labels a, a + 1 to uvi.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "uvi",
                "assign",
                "labels",
                "reached",
                "edge",
                "implying",
                "bundled",
                "reach",
                "vertex",
                "double"
            ]
        }
    },
    {
        "id": "b2804864-f7f3-43c9-8108-c109aeae26e4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, assign labels a + 1, a + 2 to uvi. The resulting solutions for the stars can be merged by starting with an arbitrary star and always adding an adjacent star, shifting the labels of that star so that the labels on the edge common to the solution so far and the new star are identical. If the resulting labeling realizes D, we output it. Otherwise, we report that the given instance is a non-instance.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "star",
                "assign",
                "uvi",
                "resulting",
                "shifting",
                "identical",
                "stars",
                "solutions",
                "solution"
            ]
        }
    },
    {
        "id": "d144abca-459c-4bb7-bfa4-c6eec1927dbb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To prove that the algorithm is correct, we show that an arbitrary realization can be transformed into the one produced by the algorithm. Let λ∗be a frugal labeling that realizes D and assigns two consecutive labels to each special bridge edge. Such a labeling exists by Lemma 18. Consider a star S with center u and leaves v1, . . . , vk indexed in topological order. For i < j, it is clear that in λ∗no label of uvj can be smaller than any label of uvi, as vi must not be reachable from vj.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "algorithm",
                "correct",
                "prove",
                "show",
                "arbitrary",
                "realization",
                "transformed",
                "produced",
                "labeling",
                "Lemma"
            ]
        }
    },
    {
        "id": "6e1f5c8d-4d48-4275-a83a-719c229c0a9e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Besides, no two single edges can have the same label. Furthermore, we can assume that there are no gaps in the labels assigned to edges in S, as such gaps could be removed (and the labels of the other stars shifted accordingly). If edges to consecutive leaves do not share a label, we therefore have that the lower label of the second edge equals the 18 Recognizing and Realizing Temporal Reachability Graphs higher label of the first edge plus one.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "edges",
                "labels",
                "single",
                "edge",
                "gaps",
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability"
            ]
        }
    },
    {
        "id": "3179ecb1-77bf-4ddf-b48f-574a69aaa2df",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The only possibilities for pairs of edges to consecutive leaves to share a label a are: A single edge uvi with label a and a double edge uvi+1 with labels a, a + 1, for some a. A double edge uvi with labels a −1, a and a single edge uvi+1 with label a, for some i. A double edge uvi with labels a −1, a and a double edge uvi+1 with labels a, a + 1. Furthermore, a label a can be shared by edges to at most three consecutive leaves, and by Observation 21 at least one of them must be a single edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "uvi",
                "label",
                "labels",
                "double",
                "single",
                "edges",
                "consecutive",
                "leaves",
                "possibilities"
            ]
        }
    },
    {
        "id": "6064bcba-9dd5-4cb5-b975-03679122b804",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It is also impossible that two of them are single edges (as the auxiliary graph is a complete DAG). Furthermore, the single edge must be the middle edge (otherwise it wouldn’t be possible to share the label with both of the double edges), and so the only possibility for three edges to share a label is: A double edge uvi−1 with labels a −1, a. A single edge uvi with label a. A double edge uvi+1 with labels a, a + 1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "DAG",
                "single",
                "edges",
                "label",
                "uvi",
                "double",
                "labels",
                "share",
                "impossible"
            ]
        }
    },
    {
        "id": "c7329ffa-f1eb-4cb1-a762-798218812bc1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Two edges uvi and uvj with i < j must share a label if the edges are bundled, which is the case if there exists a vertex that can reach u via uvi but cannot reach all vertices that u can reach via uvj. If there is no such vertex, assigning disjoint sets of labels to uvi and uvj is valid with respect to the vertices involved as all vertices that can reach u via uvi can then definitely reach all vertices that u can reach via uvj, as desired.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "vertices",
                "uvj",
                "uvi",
                "edges",
                "bundled",
                "vertex",
                "share",
                "case",
                "exists"
            ]
        }
    },
    {
        "id": "c6060cfa-8cde-4bc1-a754-4b00a249ecb3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The algorithm ensures that all edges that are bundled (must share labels) do share a label, and assigns disjoint sets of labels to consecutive edges otherwise.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "bundled",
                "edges",
                "share",
                "labels",
                "algorithm",
                "ensures",
                "assigns",
                "disjoint",
                "sets",
                "consecutive"
            ]
        }
    },
    {
        "id": "1293bc1b-2823-4661-83eb-1ca002813ec9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If λ∗differs from the labeling produced by the algorithm this can only happen if λ∗lets consecutive edges uvi and uvi+1 share a label even though every vertex that can reach u via uvi can reach every vertex that u can reach via uvi+1 and there is also no indirect requirement (stemming from a requirement that uvi and uvi+2 must share a label, or that uvi−1 and uvi+1 must share a label) for uvi and uvi+1 to share a label. In such a case, we can shift all the labels on uvi+1, uvi+2, . . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "uvi",
                "share",
                "reach",
                "label",
                "vertex",
                "requirement",
                "differs",
                "stemming",
                "labeling",
                "produced"
            ]
        }
    },
    {
        "id": "e917a28a-fed4-456c-8252-da3a70296f95",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": ", uvk by +1 (and propagating the shifted labels to the rest of the tree) without affecting feasibility of λ∗. Repeating this operation makes λ∗identical to the labeling produced by the algorithm. ◀ The following lemma implies an alternative method for solving the problem of realizing D in polynomial time in the case where the solid edges form a tree. This method can be generalized to the case where some edges of the tree are pre-labeled, which will be useful later. ▶Lemma 24.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "tree",
                "uvk",
                "propagating",
                "shifted",
                "labels",
                "rest",
                "affecting",
                "feasibility",
                "lemma",
                "case"
            ]
        }
    },
    {
        "id": "dcf2e31b-8d73-4c84-8e50-f76897e13c67",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let D be an instance of Any Strict URGR on n vertices in which the solid edges form a tree T. Then one can determine in polynomial time a linear program that is feasible if and only if D is realizable. If D is realizable, one can compute a labeling that realizes D from the solution of the LP in polynomial time. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Strict",
                "URGR",
                "realizable",
                "polynomial",
                "instance",
                "vertices",
                "solid",
                "edges",
                "form",
                "tree"
            ]
        }
    },
    {
        "id": "e496eadc-5228-47fd-b6fd-b6e5399e783c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "First, we check conditions that must obviously hold if D is realizable: If (u, v) is an arc, then (u, w) and (w, v) must also be arcs for all internal vertices of the path from u to v in T. If uc and cv are adjacent edges and neither (u, v) nor (v, u) is in A, then uc and cv must be non-special edges (as they must both be assigned the same single label in any realization). Call a non-arc (u, v) /∈A minimal if it is the only arc missing in the direction from u to v on the path from u to v.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "realizable",
                "check",
                "conditions",
                "hold",
                "internal",
                "vertices",
                "arc",
                "edges",
                "arcs"
            ]
        }
    },
    {
        "id": "0998918c-cd7f-4d74-a966-bcaa4ca3267e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consider any minimal non-arc (u, v) such that the path from u to v in T contains at least three edges. Let e1, e2, . . . , ep for some p ≥3 be the edges on the path from u to v. For i ∈[p], let ei = {ui−1, ui}, with ui−1 the endpoint closer to u. Then e1 and ep must be non-special edges and ei for i ∈[2, p −1] must be special edges. The latter part of the claim follows because Du,ui = Dui−1v = 1 but Duv = 0.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "non-arc",
                "path",
                "minimal",
                "Dui",
                "Du,ui",
                "Duv",
                "endpoint",
                "closer",
                "non-special"
            ]
        }
    },
    {
        "id": "9abb7830-604a-4be2-a1a8-8cb276ed862b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If e1 was special, there would necessarily be a temporal path from u to v using the lower labels on ei for i ∈[p −1] and any label on ep. Similarly, if e1 was non-special and ep was special, there Thomas Erlebach, Othon Michail, Nils Morawietz 19 would necessarily be a temporal path from u to v using the unique label on e1 and the higher labels on ei for i ∈[2, p]. Therefore, e1 and ep are non-special.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "special",
                "necessarily",
                "temporal",
                "path",
                "labels",
                "label",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils"
            ]
        }
    },
    {
        "id": "5b0b242c-b00c-44bf-8a66-25136692bed1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If any of these conditions does not hold, the given instance cannot be realized, and the algorithm can terminate and output an arbitrary infeasible LP. Assume now that the conditions above are met. We show how to formulate the problem of finding the required labels as a linear program (LP) of polynomial size. The LP solution may yield rational numbers as labels, but we can transform the labels to integers in the end. Let δ = 1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "conditions",
                "hold",
                "realized",
                "labels",
                "instance",
                "algorithm",
                "terminate",
                "output",
                "arbitrary",
                "infeasible"
            ]
        }
    },
    {
        "id": "7f06e5b9-4bc6-446c-acc3-2481c560eb62",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To express strict inequality between two variables, we will use an inequality constraint that requires one variable to be at least as large as the other variable plus δ. (The choice of δ = 1 is arbitrary, any positive δ would work.) The LP has two non-negative variables ℓe and he for each edge e of T. The values of these variables represent the labels assigned to e, using the convention that ℓe = he represents the case that e has a single label and ℓe < he the case that e has two labels.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "inequality",
                "variables",
                "express",
                "strict",
                "constraint",
                "requires",
                "large",
                "case",
                "variable",
                "labels"
            ]
        }
    },
    {
        "id": "172ecdbc-7956-401e-b786-41a595f2e0bf",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For every edge e, we therefore add the constraint ℓe = he (1) if e is non-special and the constraint ℓe + δ ≤he (2) if e is special. For every pair of adjacent edges e = {u, c} and e′ = {c, v}, we add constraints as follows: If neither (u, v) nor (v, u) is in A, both edges must be non-special and we add the constraint ℓe = ℓe′ (3) to ensure that their single labels are equal.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "constraint",
                "add",
                "non-special",
                "special",
                "edges",
                "ℓe′",
                "edge",
                "equal",
                "pair",
                "adjacent"
            ]
        }
    },
    {
        "id": "77fb7d20-39d1-4a9f-9424-42e5764c40d3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If (u, v) ∈A (and necessarily (v, u) /∈A), we add the constraints ℓe + δ ≤he′ (4) he ≤ℓe′ (5) to ensure there is a temporal path from u to v but none from v to u. Call a non-arc (u, v) /∈A minimal if it is the only arc missing in the direction from u to v on the path from u to v. Consider any minimal non-arc (u, v). Let e1, e2, . . . , ep for some p ≥2 be the edges on the path from u to v. If p = 2, the constraints above already ensure that u cannot reach v, so assume p ≥3.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "he′",
                "ℓe′",
                "necessarily",
                "non-arc",
                "add",
                "temporal",
                "minimal",
                "constraints",
                "ensure"
            ]
        }
    },
    {
        "id": "f604ab16-667d-447c-82d2-7d617af82646",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As discussed above, e1 and ep must be non-special edges and ei for i ∈[2, p −1] must be special edges in this case. We add the following constraints to ensure that u cannot reach v: hei = ℓei+1, for i ∈[p −1] (6) These constraints ensure that a temporal path from u towards v uses the single label on e1, then the higher label on ei for i ∈[2, p −1], and then cannot traverse ep because the higher label on ep−1 is equal to the single label of ep.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "edges",
                "case",
                "single",
                "higher",
                "discussed",
                "non-special",
                "special",
                "ensure",
                "constraints"
            ]
        }
    },
    {
        "id": "de9f6d99-fa4d-44ab-9ffd-204a8fdf78b7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Call an arc (u, v) ∈A maximal if there is no arc (x, y) ∈A such that the path from x to y in T contains the path from u to v as a proper subpath. If the path from u to v contains at most one non-special edge e, then u can necessarily reach v as there is a temporal path from u to v that uses the lower label on the special edges before e (or all the way to v if there is no non-special edge e on the path) and the higher label on the edges after e.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "arc",
                "Call",
                "subpath",
                "maximal",
                "proper",
                "edge",
                "edges",
                "non-special",
                "label"
            ]
        }
    },
    {
        "id": "fc1c8834-80a1-489c-9b9b-33dcafc48855",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If the path contains at least two special edges, it suffices to add constraints to ensure, for any 20 Recognizing and Realizing Temporal Reachability Graphs two non-special edges e and e′ such that the edges between e and e′ are all special, that the path with first edge e and final edge e′ contains labels that make it a temporal path. Let e1, e2, . . . , ep with p ≥2 be the edges on the path with first edge e = e1 and final edge e′ = ep, ordered from e to e′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Temporal",
                "Recognizing",
                "Realizing",
                "Reachability",
                "Graphs",
                "path",
                "special",
                "edges",
                "edge",
                "ensure"
            ]
        }
    },
    {
        "id": "f69c0ce4-8026-4029-879f-16062e11d672",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We must exclude the label assignment that satisfies hei = ℓei+1 for all i ∈[p −1], because with that label assignment u can reach the vertex before v only in step hep−1 and thus cannot take the non-special edge ep with label ℓep = hep−1. Therefore, we add the following constraint: p−1 X i=1 (ℓei+1 −hei) ≥δ (7) As we have ℓei+1 −hei ≥0 by (5), this constraint ensures that for at least one i we have ℓei+1 −hei > 0. Let i∗denote such a value of i.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ℓei",
                "hei",
                "label",
                "hep",
                "assignment",
                "ℓep",
                "exclude",
                "satisfies",
                "reach",
                "vertex"
            ]
        }
    },
    {
        "id": "7ef5deaf-25b6-4ced-b208-5e5903642afb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then the path with first edge e and final edge e′ gives a temporal path because we can use the unique label on e, the larger label on edges e2, . . . , ei, the smaller label on edges ei+1, . . . , ep−1, and the unique label on e′. To show that the LP is feasible if and only if D is realizable, we can argue as follows: If λ∗is a labeling that realizes D, it is clear that setting the variables of the LP based on λ∗ is a feasible solution of the LP.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "path",
                "edge",
                "edges",
                "unique",
                "final",
                "temporal",
                "larger",
                "feasible",
                "smaller"
            ]
        }
    },
    {
        "id": "a97c0abe-ff0b-4ea5-8783-75a53f2b95dd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For the other direction, assume that the LP has a feasible solution, and let λ be the labeling with rational numbers determined by that feasible solution. The LP constraints were chosen so that u cannot reach v for every minimal non-arc (u, v) and u can reach v for every maximal arc (u, v), where the labels are allowed to be rational numbers. Thus, λ realizes D. Furthermore, the labeling λ can be made integral by sorting all labels and replacing them by integers that maintain their order.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "solution",
                "feasible",
                "rational",
                "numbers",
                "direction",
                "assume",
                "determined",
                "reach",
                "labeling",
                "labels"
            ]
        }
    },
    {
        "id": "93c0544a-a418-4949-889d-2953d010b747",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It is clear that the LP has polynomial size and can be constructed in polynomial time. ◀ We now show that the LP-based approach of Lemma 24 can be extended to a setting where some edges have been pre-labeled. The same approach works for an arbitrary number of edges with pre-labeled labels, but we state it for the special case of two pre-labeled edges as this is what we will require to solve a subproblem that arises in the FPT algorithm in Section 7. ▶Corollary 25.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "polynomial",
                "time",
                "edges",
                "pre-labeled",
                "clear",
                "size",
                "constructed",
                "Lemma",
                "approach",
                "Corollary"
            ]
        }
    },
    {
        "id": "6020b1a4-379f-416e-8fa0-925bd12a6f27",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let D be an instance of Any Strict URGR on n vertices in which the solid edges form a tree T. Assume that the labels of two solid edges f1 and f2 have been pre-determined (such that f1 receives two labels if it is special and one label otherwise, and the same holds for f2). Assume further that the labels assigned to f1 and f2 are multiples of an integer ≥2n.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Strict",
                "URGR",
                "solid",
                "edges",
                "Assume",
                "labels",
                "instance",
                "vertices",
                "form",
                "tree"
            ]
        }
    },
    {
        "id": "2719e2c6-fd8a-46a1-86d0-480cecc9e612",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then one can determine in polynomial time whether there exists a frugal realization for D that agrees with the pre-labeling (and output such a labeling if the answer is yes). Proof. Construct the LP that expresses realizability of D as in the proof of Lemma 24. For the pre-labeled edges f1 and f2 we add equality constraints ensuring that the values of the variables representing their labels are consistent with the pre-labeling.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "pre-labeling",
                "determine",
                "polynomial",
                "time",
                "exists",
                "frugal",
                "realization",
                "agrees",
                "output",
                "labeling"
            ]
        }
    },
    {
        "id": "888ab311-5f11-424c-9b38-fac0371d356e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If there exists a labeling λ∗that agrees with the pre-labeling and realizes D, then setting the variables of the LP in accordance with those labels constitutes a feasible solution to the LP. Moreover, if the LP has a feasible solution, the values of the variables represent a fractional labeling λ that realizes D, as shown in the proof of Lemma 24.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "feasible",
                "labeling",
                "realizes",
                "variables",
                "solution",
                "exists",
                "agrees",
                "pre-labeling",
                "setting",
                "accordance"
            ]
        }
    },
    {
        "id": "a4061e3e-105e-451a-8eb3-5f3032d93fc8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To make the labeling integral, we can sort all labels and replace them by integers that maintain their order and keep the labelings of f1 and f2 unchanged. As the labels on f1 and f2 are multiples of a number ≥2n and we have fewer than 2n distinct labels in λ (the tree T has n −1 edges, and each edge has at most two labels), the gaps between the labels assigned to f1 and f2 contain at least 2n −1 available integers, and this is sufficient even if all labels fall into such a gap.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "unchanged",
                "integers",
                "integral",
                "labeling",
                "labelings",
                "make",
                "sort",
                "replace",
                "maintain"
            ]
        }
    },
    {
        "id": "6f0421d6-3b6c-4c13-98c3-585233fe9241",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ Thomas Erlebach, Othon Michail, Nils Morawietz 21 We remark that the variants of URGR different from Any Strict URGR can also be solved in polynomial time as follows if the graph of solid edges is a tree. By Corollary 8, the given instance is a no-instance for these variants of URGR if it contains at least one special bridge, so assume that all solid edges are non-special. Thus, we only need to consider labelings with a single label per edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Strict",
                "tree",
                "variants"
            ]
        }
    },
    {
        "id": "61c2af5b-0367-4d79-9f0e-001a0f865948",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For Simple Strict URGR, we construct and solve the LP of Lemma 24. If it is infeasible, the given instance is a no-instance; otherwise, the labeling obtained from the LP solution is a realization using a single label per edge. It remains to consider all non-strict variants of URGR, including Proper URGR and Happy URGR. If there exist two adjacent edges uc and cv such that neither (u, v) nor (v, u) is in A, the given instances is a no-instance for all these variants.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Lemma",
                "Simple",
                "Strict",
                "construct",
                "solve",
                "no-instance",
                "variants",
                "Proper",
                "Happy"
            ]
        }
    },
    {
        "id": "f80263f8-5dc3-4571-b57b-b979c889f62c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, we solve the LP from Lemma 24. If it is infeasible, the given instance has no solution. Otherwise, the labeling obtained from the LP solution is a realization with a single label per edge in which no two adjacent edges receive the same label, and hence that realization constitutes a solution for all variants of Non-strict URGR including Proper URGR and Happy URGR.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "URGR",
                "solution",
                "solve",
                "realization",
                "label",
                "Non-strict",
                "Proper",
                "Happy",
                "infeasible"
            ]
        }
    },
    {
        "id": "6a272569-1c24-40a4-9de8-6572c9e8c38f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As an alternative to using the LP-based approach from Lemma 24 to check the existence of the desired realizations in the discussion above, one can also use the combinatorial algorithm from Theorem 23.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "Theorem",
                "alternative",
                "LP-based",
                "approach",
                "check",
                "existence",
                "desired",
                "realizations",
                "discussion"
            ]
        }
    },
    {
        "id": "d31fb4f8-db8e-4599-9647-19ead57e6c99",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "6 Hardness for Undirected Reachability Graph Realizability In this section, we show that all considered versions of Undirected Reachability Graph Realizability are NP-hard, even on a family of instances where each instance has a constant maximum degree and, if it is a yes-instance, can be realized with a constant number of different time labels. ▶Observation 26. Let D be an instance of some version of URGR and let G denote the solid graph of D. Moreover, let v be a vertex of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Reachability",
                "Undirected",
                "Realizability",
                "Hardness",
                "Graph",
                "constant",
                "section",
                "NP-hard",
                "yes-instance",
                "labels"
            ]
        }
    },
    {
        "id": "fea25cc6-afca-42d1-b264-88c03912dc36",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each vertex w ∈NG(v) that has (i) no incoming arc from any other vertex of NG(v) or (ii) no outgoing arc to any other vertex of NG(v), the edge {v, w} receives at least one label in every realization of D. To see this, consider a solid neighbor w of v which has no ingoing arcs form any vertex of NG(v). Then the path (v, w) is the only dense path from v to w, which implies that the edge {v, w} receives at least one label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "edge",
                "receives",
                "arc",
                "label",
                "incoming",
                "outgoing",
                "realization",
                "path",
                "arcs"
            ]
        }
    },
    {
        "id": "7d91b27d-f4fe-4fc1-b46a-ec8bcd246554",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For a solid neighbor w with no outgoing arcs in NG(v), the path (w, v) is the only dense path from w to v. This then also implies that the edge {v, w} receives at least one label. ▶Theorem 27. Any Strict URGR and Simple Strict URGR are NP-hard on directed graphs of constant maximum degree that have a triangle-free solid graph. Proof. We reduce from 2P2N-3SAT which is known to be NP-hard [23].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "Strict",
                "URGR",
                "Theorem",
                "neighbor",
                "outgoing",
                "arcs",
                "dense",
                "solid",
                "NP-hard"
            ]
        }
    },
    {
        "id": "544fd158-79e0-4288-b0bf-be64fd85425b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "2P2N-3SAT Input: A CNF formula ϕ, where each clause has size at most 3 and each variable occurs exactly twice positively and twice negatively. Question: Is ϕ satisfiable? Let ϕ be an instance of 2P2N-3SAT with variables X and clauses Y := {y1, . . . , y|Y |}. Moreover, let χ: Y →[1, 10] be a coloring of the clauses, such that for each two distinct clauses yi and yj of Y that share a variable, χ(yi) ̸= χ(yj).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Input",
                "CNF",
                "negatively",
                "clauses",
                "formula",
                "size",
                "occurs",
                "positively",
                "variable",
                "Question"
            ]
        }
    },
    {
        "id": "e2600e2a-e7c0-496e-b322-8e5a85337d39",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Such a coloring χ exists and can be 22 Recognizing and Realizing Temporal Reachability Graphs greedily computed in polynomial time.1 We define a directed graph D = (V, A) in polynomial time, such that there is a simple undirected temporal graph with strict reachability graph equal to D if and only if ϕ is satisfiable. We initialize V and A as empty sets. For each variable x ∈X, we add the following vertices to V : Vx := {x, x, ax, ax, ax,x, bx, bx, bx,x, cx, fx, fx, fx,x, qx, qax, qx, qax}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "Reachability",
                "Temporal",
                "Recognizing",
                "polynomial",
                "Realizing",
                "qax",
                "Graphs",
                "time",
                "satisfiable"
            ]
        }
    },
    {
        "id": "ad2a33b1-8891-4792-8f74-a41de81f6fb1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "See Figure 2 for the vertices and arcs of D[Vx]. For each clause yi ∈Y , we add two vertices si and ti to V , that is, a source si and a terminal ti for each clause. Finally, for each two distinct clauses yi and yj from Y that share a variable, we add vertices q(i,j) and q(j,i) to V . Note that these vertices and their incident edges are not shown in Figure 2. Next, we describe the arcs A of D. To this end, we first describe the solid edges E of G. We initialize E as the empty set.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Figure",
                "vertices",
                "clause",
                "add",
                "arcs",
                "Note",
                "describe",
                "edges",
                "clauses",
                "Finally"
            ]
        }
    },
    {
        "id": "b1d8db82-7ac3-4c08-9ec7-d07e18e96392",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each variable x ∈X, we add to E the solid edges between the vertices of Vx that appear in the graph of Figure 2. For each clause yi, we add a solid edge to E between the vertex si and each vertex ℓfor which ℓis a literal of yi. Moreover, for each variable x occurring in clause yi, we add the solid edges {ti, qx}, {ti, qax}, {ti, qx}, {ti, qax}, and {ti, cx} to E.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Figure",
                "solid",
                "add",
                "qax",
                "variable",
                "edges",
                "vertices",
                "graph",
                "clause",
                "vertex"
            ]
        }
    },
    {
        "id": "657f4e82-cbd9-4316-a32a-1a49fa1fa283",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Finally, for each two distinct clauses yi and yj that share a variable, we add the solid edges {si, q(i,j)}, {q(i,j), tj}, {sj, q(j,i)}, and {q(j,i), ti} to E. Next, we describe the dashed arcs of D. For each variable x ∈X, we add to A the dashed arcs between the vertices of Vx as described in the matrix of Figure 2. Let yi be a clause of Y and let x be a variable occurring in yi. We add the dashed arcs (si, cx), (si, ax,x), (si, ax), (x, ti), (x, ti), (ax, ti), (ax, ti), and (bx,x, ti) to A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "dashed",
                "add",
                "Finally",
                "arcs",
                "variable",
                "edges",
                "distinct",
                "share",
                "solid",
                "Figure"
            ]
        }
    },
    {
        "id": "769140c0-070b-4e8d-8b0d-ba78ec24e17a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If x occurs positively in clause yi, we add the dashed arcs (si, ax), (si, bx), (si, fx), and (qx, si) to A. Otherwise, we add the dashed arcs (si, bx), (si, fx) and (qx, si) to A. Let yi and yj be distinct clauses from Y that share a variable and assume without loss of generality that χ(yi) < χ(yj). We add the dashed arcs (si, tj), (sj, ti), and (ti, tj) to A. If yi and yj share a literal, we also add the arc (si, sj) to A. Finally, for each clause yi ∈Y , we add the arc (si, ti) to A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "add",
                "dashed",
                "arcs",
                "arc",
                "clause",
                "occurs",
                "positively",
                "share",
                "clauses",
                "distinct"
            ]
        }
    },
    {
        "id": "2784bc7d-a113-47f1-b84c-a55261526401",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This completes the construction of D. ▷Claim 28. D has a maximum degree of O(1). Moreover, G = (V, E) is triangle-free. Proof. The solid graph induced by the vertices of each variable gadget has constant degree by inspection. Every vertex si has at most 3 + 9 = 12 edges of type {si, ℓ}, {si, q(i,j)}, respectively, at most 13 arcs due to variables occurring in yi, at most 9 arcs due to yi sharing variables with other clauses, and at most 6 arcs due to yi sharing literals with other clauses.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arcs",
                "Claim",
                "due",
                "completes",
                "construction",
                "clauses",
                "degree",
                "sharing",
                "variables",
                "Proof"
            ]
        }
    },
    {
        "id": "d06ecc4b-929a-4553-8ffa-6a2636f4d94d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Every ti has at most 15 edges and 15 arcs due to variables occurring in yi, and at most 9 edges and 18 arcs due to yi sharing variables with other clauses. For the same (constant number of) types of edges and arcs, each of the other vertices of D is related to a variable or literal, which can occur in at most 4 clauses; by inspection, it follows that the degree contributed to each such vertex by each edge or arc type is constant. Thus, D has a maximum degree of O(1).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "due",
                "edges",
                "clauses",
                "arcs",
                "variables",
                "occurring",
                "sharing",
                "degree",
                "constant",
                "edge"
            ]
        }
    },
    {
        "id": "9f7fa8bc-1eef-4428-b9d8-7f84260c7df6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The solid graph induced by the vertices of each variable gadget is triangle-free by inspection. The edge set of G[S i({si} ∪{ti})] is empty, so any triangle must be using at most one source or terminal vertex. Each q(i,j) vertex is adjacent to no other vertex than si and tj, thus cannot be part of a triangle. As no two vertices belonging to different gadgets are adjacent, it remains to show that a source or terminal cannot form a triangle with two vertices belonging to the same gadget.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "inspection",
                "triangle",
                "vertex",
                "solid",
                "graph",
                "induced",
                "variable",
                "triangle-free",
                "source"
            ]
        }
    },
    {
        "id": "4b4d60bf-e842-4e26-b6f0-1f09adea25e3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "A source is only adjacent to the 1 To see this, consider the auxiliary graph HY with vertex set Y and edges between to clauses yi and yj of Y if and only if yi and yj share a variable. The graph HY has a maximum degree of 9, since each clause contains three literals, and each variable occurs in exactly four clauses. Hence, χ is a greedy proper (∆(HY ) + 1)-vertex coloring of HY which exists and can be computed in polynomial time.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "variable",
                "clauses",
                "source",
                "adjacent",
                "auxiliary",
                "set",
                "edges",
                "share",
                "vertex"
            ]
        }
    },
    {
        "id": "80ddf88e-1d00-46d5-a574-cc103b90c70e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thomas Erlebach, Othon Michail, Nils Morawietz 23 si sj bx bx,x bx ax ax,x ax fx fx,x fx qx qx qax qax cx x x tk tℓ 1 1 1 1 1 2 3 12 13 13 14 25 13 14 13 14 α β 13 14 14 15 χ(yi) + 1 ∈[2, 11] χ(yj) + 1 ∈[2, 11] α β α β α β α β si sj tk tℓ x x ax ax ax,x bx bx bx,x cx fx fx fx,x qx qx qax qax si 0 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 sj 0 1 1 0 1 0 1 1 0 1 0 1 0 1 0 0 0 0 0 tk 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 tℓ 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 1 1 1 x 1 0 1 1 0 1 1 1 1 0 0 1 1 0 0 1 0 0 0 x 0 1 1 1 0 0 1 1 0 1 0 1 0 1 0 0 1 0 0 ax 0 0 1 1 1 0 1 1 1 0 0 1 1 0 0 0 0 1 0 ax 0 0 1 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 1 ax,x 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 bx 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 0 0 bx 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 bx,x 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 cx 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 fx 0 0 0 0 1 0 0 0 0 1 0 0 0 1 1 0 0 0 0 fx 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 0 0 fx,x 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 qx 1 0 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 qx 0 1 1 1 0 1 0 1 1 0 1 0 1 0 1 0 0 0 0 qax 0 0 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 qax 0 0 1 1 0 1 0 1 1 0 1 0 1 0 1 0 0 0 0 Figure 2 The solid graph and adjacency matrix for the variable gadget in the hardness reduction for Any Strict URGR and Simple Strict URGR version on triangle-free graph (Theorem 27).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "qax",
                "bx,x",
                "ax,x",
                "fx,x",
                "Strict",
                "URGR",
                "graph",
                "Figure",
                "Theorem",
                "Erlebach"
            ]
        }
    },
    {
        "id": "47460336-958e-45df-82a4-e0d90070de72",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The highlighted cells indicate the dashed arcs. As we show, no realization assigns labels to both the red and the blue edge. If the red (blue) edge receives a label, the two red (blue) cells are realized via paths through the variable gadget Vx. Here, α = χ(yk) + 14 and β = χ(yℓ) + 14, which are both values in [15, 24].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "red",
                "blue",
                "arcs",
                "highlighted",
                "dashed",
                "cells",
                "edge",
                "show",
                "labels",
                "label"
            ]
        }
    },
    {
        "id": "7117e08d-0d3b-4f47-98b8-e1c8a53eddd0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "24 Recognizing and Realizing Temporal Reachability Graphs vertices corresponding to literals and the terminals are only adjacent to vertices qx, qax, qx, qax, and cx, none of which are adjacent to each other. Thus, G = (V, E) is triangle-free. ◁ Next, we show that ϕ is satisfiable if and only if there is an undirected temporal graph with strict reachability graph D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "qax",
                "Recognizing",
                "Realizing",
                "adjacent",
                "vertices",
                "Reachability",
                "Temporal",
                "graph",
                "literals",
                "terminals"
            ]
        }
    },
    {
        "id": "016df218-df41-4eb4-9817-3a87273ae96c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "More precisely, we show that if ϕ is satisfiable, then there is a simple undirected temporal graph with strict reachability graph D. (⇐) Let G = (G = (V, E), λ: E →2N) be an undirected temporal graph with strict reachability graph equal to D. We show that ϕ is satisfiable. To this end, we first show that for each variable x ∈X, at most one of the edges of {x, cx} and {x, cx} receives a non-empty set of labels under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "temporal",
                "strict",
                "reachability",
                "satisfiable",
                "show",
                "undirected",
                "precisely",
                "simple",
                "equal"
            ]
        }
    },
    {
        "id": "7dfef0fd-322c-48da-8199-3b371f56fc9f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume towards a contradiction that there is a variable x ∈X, such that both {x, cx} and {x, cx} receives a non-empty set of labels under λ. We will show that the arc (fx, fx) is not realized. Since (x, x) /∈A and (x, x) /∈A, Observation 1 implies that there is a label α, such that λ({x, cx}) = λ({x, cx}) = {α}. Now, consider the neighborhood of fx (fx). This vertex has only two solid neighbors: x and fx,x (x and fx,x). Moreover, both these neighbors are not joined by a solid edge.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Assume",
                "receives",
                "contradiction",
                "variable",
                "non-empty",
                "set",
                "fx,x",
                "Observation",
                "solid",
                "neighbors"
            ]
        }
    },
    {
        "id": "6987a69a-c07e-45c1-9228-938ce9586952",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Due to Observation 26, this implies that the edges {x, fx}, {fx, fx,x}, {fx,x, fx}, and {fx, x} all receive at least one label under λ. Since A contains none of the arcs (cx, fx), (fx, cx), (x, fx,x), and (fx,x, x), Observation 1 implies that λ({fx,x, fx}) = λ({fx, x}) = λ({x, cx}) = {α}. Similarly, λ({fx,x, fx}) = λ({fx, x}) = λ({x, cx}) = {α}. Thus, each edge incident with both fx and fx receives the label set {α} under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fx,x",
                "Observation",
                "implies",
                "Due",
                "label",
                "edges",
                "receive",
                "edge",
                "receives",
                "arcs"
            ]
        }
    },
    {
        "id": "b2a8303f-be04-4f79-80b5-85e20b75e5bc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This contradicts the assumption that the arc (fx, fx) ∈A is realized by the temporal graph G. Consequently, for each variable x ∈X, at most one of the edges of {x, cx} and {x, cx} receives a non-empty set of labels under λ. Based on this observation, we define a truth assignment π of the variables of X that satisfies ϕ. For each variable x ∈X, we set π(x) := true if and only if the edge {x, cx} receives at least one label under λ. Next, we show that π satisfies ϕ. Let yi be a clause of ϕ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "variable",
                "contradicts",
                "assumption",
                "realized",
                "temporal",
                "graph",
                "receives",
                "set",
                "satisfies"
            ]
        }
    },
    {
        "id": "9f6c83f0-2924-41a4-84a4-1e0e4f26e8eb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that yi is satisfies by π. Since (i) the strict reachability graph of G is equal to D = (V, A) and (ii) A contains the arc (si, ti), there is a strict temporal path P from si to ti in G. Hence, P is a dense path in D. Consider the first internal vertex v of P. Recall that v is a solid neighbor of si. This implies that v is either the vertex corresponding to a literal of the clause yi, or a vertex q(i,j) for some clause yj distinct from yi that shares a variable with yi.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "show",
                "satisfies",
                "strict",
                "path",
                "clause",
                "arc",
                "reachability",
                "graph",
                "equal"
            ]
        }
    },
    {
        "id": "1a591317-706a-4991-b745-13ebee36c243",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Recall that q(i,j) has only the two out-neighbors si and tj ̸= ti in D. Hence, the dense path P cannot contain q(i,j), since (q(i,j), ti) /∈A. Thus, the first internal vertex of P is a literal ℓof clause yi. Let x denote the variable for which ℓis the literal. We show that the edge {ℓ, cx} receives at least one label under λ. This then implies that π satisfies yi, since by the initial observation, at most one of the edges {x, cx} or {x, cx} received a label under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Recall",
                "out-neighbors",
                "literal",
                "label",
                "edge",
                "edges",
                "dense",
                "path",
                "internal",
                "vertex"
            ]
        }
    },
    {
        "id": "3be2b92c-20e8-428e-9c3a-47965b12a3bd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "First, note that P cannot contain another source vertex sj ̸= si, since ℓhas no arc towards any out-neighbor of sj in D. Thus, P continues by traversing to some solid neighbor of ℓin Vx. By construction, A contains none of the arcs (ax,x, ti), (bℓ, ti), (si, qℓ), (si, qaℓ). This implies that P contains none of the vertices of {ax,x, bℓ, qℓ, qaℓ}. Consequently, P contains no solid neighbor of aℓbesides ℓ, which also implies that P does not contain aℓ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ax,x",
                "qaℓ",
                "note",
                "source",
                "vertex",
                "ℓhas",
                "out-neighbor",
                "neighbor",
                "solid",
                "implies"
            ]
        }
    },
    {
        "id": "ca11bc69-16d6-45c6-97bb-338b9644009e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, by definition of D[Vx], the only solid neighbor of ℓin Vx that can possibly be contained in P is cx. Consequently, P traverses the edge {ℓ, cx}, which implies that {ℓ, cx} receives at least one label under λ. This then implies that π satisfies clause yi. (⇒) Let π be a satisfying assignment of ϕ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "definition",
                "solid",
                "neighbor",
                "ℓin",
                "possibly",
                "contained",
                "implies",
                "edge",
                "receives",
                "traverses"
            ]
        }
    },
    {
        "id": "5c978fe7-b97a-45d8-ba28-cd4eef6644f5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We define an undirected temporal graph (G = (V, E′), λ: E′ →N) for some E′ ⊆E as follows: For each clause yi of Y , we set the labels of all edges incident with vertex si to χ(yi)+1 and the labels of all edges incident with vertex ti to χ(yi) + 14. It remains to define the labels of the edges between vertices of Vx for each Thomas Erlebach, Othon Michail, Nils Morawietz 25 variable x ∈X. These labels are depicted in Figure 2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "incident",
                "labels",
                "vertex",
                "edges",
                "graph",
                "define",
                "undirected",
                "temporal",
                "clause",
                "set"
            ]
        }
    },
    {
        "id": "073ced5a-4022-43a9-b22d-469540b2ba31",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Formally, for each variable x ∈X, we set λ({cx, bx,x}) = 1, λ({v, qv}) = 1 for each v ∈{x, x, ax, ax}, λ({bx, bx,x}) = 2, λ({bx, bx,x}) = 3, λ({x, ax}) = 12, λ({ax, ax,x}) = λ({x, ax}) = λ({x, fx}) = λ({fx, fx,x}) = 13, λ({ax, ax,x}) = λ({x, bx}) = λ({x, fx}) = λ({fx, fx,x}) = 14, λ({x, bx}) = 15, and λ({cx, ax,x}) = 25. If x is assigned to true by π, we set λ({x, cx}) = 13 and λ({x, cx}) = ∅. If x is assigned to false by π, we set λ({x, cx}) = ∅and λ({x, cx}) = 14.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "bx,x",
                "ax,x",
                "fx,x",
                "set",
                "Formally",
                "assigned",
                "variable",
                "true",
                "false"
            ]
        }
    },
    {
        "id": "b2d157e1-fcfe-4104-bad4-71749a55f029",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This completes the definition of λ. Next, we show that the strict reachability graph of (G, λ) is exactly D. All solid edges that receive a label are realized through the label they receive. Any {x, cx} or {cx, x} edge that does not receive a label is realized by the temporal paths on the smallest squares including the edge (one drawn above and one below it in Figure 2), and these are the only solid edges that might not receive a label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "receive",
                "label",
                "edges",
                "edge",
                "completes",
                "definition",
                "solid",
                "realized",
                "Figure",
                "show"
            ]
        }
    },
    {
        "id": "b255e3d8-8253-44f1-ab1e-4f1bdd404d05",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As all edges incident to an si receive the same label χ(yi) + 1 and the same holds for all edges incident to a ti, receiving χ(yi) + 14 in this case, the temporal paths of (G, λ) only use si or tj vertices as endpoints. It follows that none of the arcs that can only be realized by a path using si or ti as an internal vertex, all of which are missing from A, is incorrectly realized. This includes all missing arcs incident to a q(i,j) vertex.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "incident",
                "receiving",
                "case",
                "endpoints",
                "vertex",
                "receive",
                "label",
                "holds",
                "temporal"
            ]
        }
    },
    {
        "id": "d43eabab-d8b2-4133-bcd7-e2e73f347116",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It also follows that the realization of any (present or missing) arc incident to at least one Vx vertex can be verified by inspection of the solid graph and matrix of Figure 2. It remains to argue about the arcs whose endpoints are both si or tj vertices. Every (si, tj) arc for i ̸= j is realized by the temporal path si, q(i,j), tj using labels χ(yi) + 1, χ(yj) + 14, where χ(yi) + 1 ≤11 < χ(yj) + 14.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Figure",
                "present",
                "missing",
                "realization",
                "incident",
                "vertex",
                "verified",
                "inspection",
                "solid",
                "graph"
            ]
        }
    },
    {
        "id": "257ba79a-741e-4a50-b60e-dfdb0705f4ef",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Every (si, sj) arc for χ(yi) < χ(yj), present when yi and yj share a literal ℓ, is realized by the temporal path si, ℓ, tj using labels χ(yi) + 1, χ(yj) + 1. Every (ti, tj) arc for χ(yi) < χ(yj), present when yi and yj share a variable x, is realized by the temporal path ti, cx, tj using labels χ(yi) + 14, χ(yj) + 14. Every (si, ti) arc is realized as follows. Let ℓbe a literal of yi which evaluates to true under π, corresponding to a variable x.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "realized",
                "present",
                "share",
                "temporal",
                "labels",
                "path",
                "variable",
                "literal",
                "ℓbe"
            ]
        }
    },
    {
        "id": "d5771743-45de-4ddd-9990-29f58fe0c051",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As x is a variable of yi, si and ti are both connected to Vx. If x appears positive in ℓ, then si, x, cx, ti using labels χ(yi)+1, 13, χ(yi)+14 is a realizing temporal path. If x appears negated in ℓ, then si, x, cx, ti using labels χ(yi)+1, 14, χ(yi)+14 is a realizing temporal path.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "labels",
                "realizing",
                "temporal",
                "variable",
                "connected",
                "positive",
                "negated"
            ]
        }
    },
    {
        "id": "2f1e67d3-d1a2-43b3-b9f6-e5fcfa1b18b5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For clauses yi and yj that share no variable, (si, sj), (ti, tj), and (ti, sj) is not in A and is not realized by (G, λ), because each path between these vertices in G goes trough at least one other source or terminal vertex, which by the initial argument cannot be a temporal path. The same holds for all clauses yi and yj that share a variable but not a literal with respect to the non-arcs (si, sj) and (sj, si).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "clauses",
                "share",
                "vertex",
                "variable",
                "realized",
                "vertices",
                "trough",
                "source",
                "terminal"
            ]
        }
    },
    {
        "id": "04b39cb6-dd54-481e-9e3e-291396682842",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ By slightly modifying the previous reduction, we can show that also all other version of URGR under consideration are NP-hard. ▶Theorem 29. Each version of URGR under consideration is NP-hard on directed graphs of constant maximum degree. 26 Recognizing and Realizing Temporal Reachability Graphs Proof. Due to Theorem 27, it remains to show the NP-hardness only for (i) Proper Strict URGR, (ii) Happy Strict URGR, and (iii) each version of Non-strict DRGR.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Theorem",
                "version",
                "reduction",
                "Strict",
                "consideration",
                "graphs",
                "slightly",
                "modifying",
                "previous"
            ]
        }
    },
    {
        "id": "85cedfcd-7f2c-4719-80b1-f5f62dd7326a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We capture all of these versions in one reduction. We again reduce from 2P2N-3SAT by slightly adapting the reduction from the proof of Theorem 27. Let ϕ be an instance of 2P2N-3SAT with variables X and clauses Y := {y1, . . . , y|Y |}. Moreover, let D′ be the instance of our problem that was constructed in the reduction of Theorem 27 for instance ϕ, and let G′ be the solid graph of D′. We obtain a directed graph D as follows: We initialize D as D′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Theorem",
                "reduction",
                "instance",
                "capture",
                "versions",
                "graph",
                "reduce",
                "slightly",
                "adapting",
                "proof"
            ]
        }
    },
    {
        "id": "a84d1ff8-0eae-4324-b029-5af74250ad3d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "First, we remove the vertices fx, fx, and fx,x for each variable x ∈X. Next, for each clause yi ∈Y , we replace the vertex si (ti) by a solid clique Si (Ti). We initialize Si := {si} (Ti := {ti}). Afterwards, we add a twin of si (ti) to Si (Ti), that is, a vertex with the same in- and out-neighborhood as si (ti). Note that each vertex of Si (Ti) has the same solid neighbors as each other vertex of Si (Ti).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "remove",
                "vertices",
                "fx,x",
                "variable",
                "solid",
                "clause",
                "replace",
                "clique",
                "initialize"
            ]
        }
    },
    {
        "id": "03bb3064-adfb-4ab0-bfde-69a7bffac3b7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We continue this process, until Si (Ti) has an odd size of at least max(9, ri), where ri is the degree of si (ti) in G′. Finally, we make Si (Ti) a clique in G. This completes the construction of D. Since the maximum degree of D′ was a constant and we only added a constant number of twins for each source and terminal vertex, the maximum degree of D is only increased by a constant factor. We now show the correctness of the reduction.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "degree",
                "process",
                "max",
                "constant",
                "continue",
                "odd",
                "size",
                "maximum",
                "Finally",
                "make"
            ]
        }
    },
    {
        "id": "f56889b0-b1fc-4b58-8e3d-f567390fe1b8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To this end, we show that if ϕ is satisfiable, then there is a happy undirected temporal graph with reachability graph D, and if ϕ is not satisfiable, then there is neither a proper undirected temporal graph with reachability graph D nor an undirected temporal graph with non-strict reachability graph D. This then implies that the reduction is correct for all stated versions of our problem.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "temporal",
                "reachability",
                "undirected",
                "satisfiable",
                "end",
                "show",
                "happy",
                "proper",
                "non-strict"
            ]
        }
    },
    {
        "id": "87cb0d10-76b4-4621-83ee-58b4fd4e5e14",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "(⇐) Suppose that ϕ is satisfiable and let λ′ be the realization for D′ described in the proof of Theorem 27. Note the only adjacent edge that shared a label under λ′ (i) contained an edge incident with a vertex fℓfor some ℓ∈{x, x | x ∈X} or (ii) are both incident with the same source or incident the same terminal vertex. Since D does not contain any of the fℓ-vertices, the only adjacent edge of G under λ′ are both incident with the same source or incident the same terminal vertex.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "incident",
                "Suppose",
                "Theorem",
                "edge",
                "vertex",
                "adjacent",
                "source",
                "terminal",
                "satisfiable",
                "realization"
            ]
        }
    },
    {
        "id": "eacce86f-cf6f-40b2-bb89-e9e5414a4824",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, note that no arc of both D and D′ was realized via temporal paths that go over any fℓ-vertex. To obtain a happy realization for D, we essentially spread all the labeled edges incident with a source si (a terminal ti) to an individual vertex of Si (Ti) each. By definition of Si (Ti), this vertex set contain at least as many vertices each as the number of solid edges incident with si (ti) in G′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "note",
                "fℓ-vertex",
                "incident",
                "arc",
                "realized",
                "temporal",
                "paths",
                "edges",
                "vertex",
                "obtain"
            ]
        }
    },
    {
        "id": "249cca7d-9483-4e31-93a9-6ff7ecd893de",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Formally, we initialize a labeling λ of some edges of G as the restriction of λ′ to the common edges of G and G′. Afterwards we iterate over all sources and terminals. For each source si, we take an arbitrary maximal matching M between the solid neighbors of si in G′ and Si. We remove the labels of all edges incident with si from λ (which all had the same label, say αsi) and add the label αsi to all edges of M. We do the same analogously for all terminal vertices. This ensures that λ is proper.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "Formally",
                "initialize",
                "labeling",
                "restriction",
                "common",
                "label",
                "αsi",
                "sources",
                "source"
            ]
        }
    },
    {
        "id": "730e6d70-5440-4b59-940f-ebf734fdd8aa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Finally, for each si, we take four arbitrary and pairwise edge-disjoint Hamiltonian cycles Cj with j ∈[1, 4]. Such Hamiltonian cycles exist [17], since Si has an odd size of at least 9.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Finally",
                "Hamiltonian",
                "cycles",
                "arbitrary",
                "pairwise",
                "edge-disjoint",
                "exist",
                "odd",
                "size"
            ]
        }
    },
    {
        "id": "36890209-5556-4871-9b48-8eaa31ef367e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We label the edges of these Hamiltonian cycles as follows: Fix an arbitrary vertex s∗ i ∈Si of Si and label the edges of the Hamiltonian cycles with consecutive labels starting from s∗ i , such that (i) each label of C1 is smaller than each label of C2, (ii) each label of C2 is smaller than αsi, (iii) each label of C3 is larger than αsi, and (iv) each label of C4 is larger than each label of C3.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "Hamiltonian",
                "αsi",
                "edges",
                "smaller",
                "larger",
                "Fix",
                "cycles",
                "iii",
                "labels"
            ]
        }
    },
    {
        "id": "9a399845-4204-46b3-922a-c68885dd766e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that this can be done in a straightforward way but might result in Thomas Erlebach, Othon Michail, Nils Morawietz 27 si sj bx bx,x bx ax ax,x ax qx qx qax qax cx x x . . . . . . Tk Tℓ . . . . . . Si . . . . . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Thomas",
                "qax",
                "Note",
                "straightforward",
                "result"
            ]
        }
    },
    {
        "id": "39c4a840-a9b5-49e9-830e-b70661dc5b90",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Sj 1 1 1 1 1 2 3 12 13 13 14 25 13 14 α β 14 15 ∈[2, 11] ∈[2, 11] α α α α β β β β ∈Si ∈Sj ∈Tk ∈Tℓ x x ax ax ax,x bx bx bx,x cx qx qx qax qax ∈Si 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 0 ∈Sj 0 1 1 0 1 0 1 1 0 1 0 1 0 0 0 0 ∈Tk 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 1 ∈Tℓ 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 x 1 0 1 1 0 1 1 1 1 0 0 1 1 0 0 0 x 0 1 1 1 0 0 1 1 0 1 0 1 0 1 0 0 ax 0 0 1 1 1 0 1 1 1 0 0 1 0 0 1 0 ax 0 0 1 1 0 1 0 1 0 1 0 1 0 0 0 1 ax,x 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 bx 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 bx 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 bx,x 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 cx 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 0 qx 1 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 qx 0 1 1 1 0 1 0 1 1 0 1 0 1 0 0 0 qax 0 0 1 1 1 0 1 1 1 1 0 0 1 0 0 0 qax 0 0 1 1 0 1 0 1 1 0 1 0 1 0 0 0 Figure 3 Figure and matrix for the variable gadget in the hardness reduction for the happy version.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "qax",
                "Figure",
                "ax,x",
                "bx,x",
                "version",
                "matrix",
                "variable",
                "gadget",
                "hardness",
                "reduction"
            ]
        }
    },
    {
        "id": "cd27c130-bfdb-4dfa-a943-3112bbc89249",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Only solid edges that receive a label are depicted. 28 Recognizing and Realizing Temporal Reachability Graphs possibly negative labels. The latter is no issue, since we can arbitrarily shift all labels at the same time until they are positive integers, while preserving the same reachabilities.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "depicted",
                "Recognizing",
                "solid",
                "edges",
                "receive",
                "labels",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs"
            ]
        }
    },
    {
        "id": "8f2f341f-4956-4d82-9a92-f3a709afd995",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that the labeling of the four Hamiltonian ensure that (a) prior to time αsi, each vertex of Si can reach each other vertex of Si and (b) after time αsi, each vertex of Si can reach each other vertex of Si. This in particular implies that all arcs of the clique G[Si] are realized. Moreover, it implies that all vertices of Si have the same in- and out-reachabilities, since only edges with label αsi are incident with both a vertex of Si and any other vertex outside of Si.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "reach",
                "Hamiltonian",
                "time",
                "αsi",
                "Note",
                "prior",
                "labeling",
                "ensure",
                "implies"
            ]
        }
    },
    {
        "id": "013cde06-2f39-4456-bb6e-70e079708eee",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We do the same for the terminal vertices and their respective cliques. The resulting labeling is then proper and assigns at most one label to each edge of G. Moreover, λ realizes D, since, intuitively we can merge each source clique Si into a single vertex si and merge each terminal clique Ti into a single vertex ti.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "respective",
                "single",
                "terminal",
                "clique",
                "merge",
                "vertex",
                "intuitively",
                "resulting",
                "labeling"
            ]
        }
    },
    {
        "id": "e60e816e-aa58-4a11-8723-fc7357ec9d32",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The resulting graph D′′ is then the graph obtained for D′ by removing the vertices of {fx, fx, fx,x | x ∈X}, for which λ′ is a realization, when restricted to the solid edges of D′′. Hence, there is a happy realization for D. (⇒) We show this statement via contraposition. Let G = (G = (V, E), λ: E →2N) be an undirected temporal graph such that (i) λ is a proper labeling and D is the reachability graph of G, or (ii) D is the non-strict reachability graph of G. We show that ϕ is satisfiable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "graph",
                "fx,x",
                "realization",
                "resulting",
                "obtained",
                "removing",
                "vertices",
                "restricted",
                "solid",
                "edges"
            ]
        }
    },
    {
        "id": "0c4f4da5-08ef-4c7e-a9b5-034546e2b4b3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similar to the proof of Theorem 27, we show that for each variable x ∈X, at most one of the edges {x, cx} and {x, cx} receives a label under λ. Let x be a variable of X. Recall that D contains neither of the arcs (x, x) nor (x, x). Assume towards a contradiction that λ({x, cx}) ̸= ∅and λ({x, cx}) ̸= ∅.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Theorem",
                "variable",
                "Similar",
                "edges",
                "receives",
                "proof",
                "show",
                "label",
                "Recall",
                "arcs"
            ]
        }
    },
    {
        "id": "3b7fd83f-6e95-4924-897c-a980e1afd610",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If min λ({x, cx}) < max λ({x, cx}) or max λ({x, cx}) > min λ({x, cx}), the strict and the non-strict reachability graph of G contain at least one arc between x and x; a contradiction to the fact that λ realizes D. Hence, assume that this is not the case. That is λ({x, cx}) = λ({x, cx}) ̸= ∅. Note that this is not possible in the case where λ is a proper labeling. Hence, we only have to consider the case where the non-strict reachability graph of G is D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "min",
                "max",
                "case",
                "non-strict",
                "reachability",
                "graph",
                "strict",
                "arc",
                "contradiction",
                "fact"
            ]
        }
    },
    {
        "id": "aac02ce9-e9f5-4ef2-9ca5-63e10caa11b5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since λ({x, cx}) = λ({x, cx}) ̸= ∅, the non-strict reachability graph of D contains both arcs (x, x) and (x, x); a contradiction. Thus, not both edges {x, cx} and {x, cx} receives a label under λ. The remainder of the proof that ϕ is satisfiable is identical to the one in Theorem 27 and thus omitted. ◀ In all the above reductions, the number of vertices and arcs in the constructed graph D were O(|ϕ|), where ϕ is the size of the respective instance of 2P2N-3SAT.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "contradiction",
                "non-strict",
                "reachability",
                "graph",
                "arcs",
                "Theorem",
                "edges",
                "receives",
                "label",
                "omitted"
            ]
        }
    },
    {
        "id": "adf131d8-84e0-492d-bb4d-69a22cd59357",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since 2P2N-3SAT cannot be solved in 2o(|ϕ|) · |ϕ|O(1) time, unless the ETH fails [23], this implies the following. ▶Corollary 30. No version of URGR under consideration can be solved in 2o(|V |+|A|) · nO(1) time, unless the ETH fails. Hence, the running time of Theorem 5 can presumably not be improved significantly.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ETH",
                "fails",
                "Corollary",
                "solved",
                "time",
                "implies",
                "Theorem",
                "URGR",
                "significantly",
                "version"
            ]
        }
    },
    {
        "id": "e7c318e7-357a-4fec-b832-68c68d5438ce",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "6.1 Parameterized hardness We now strengthen our hardness result for Any Strict URGR and Simple Strict URGR, which will highly motivate the analysis of parameterized algorithms for the parameter ‘feedback edge set number’ of the solid graph, which we consider in Section 7. ▶Theorem 31. Any Strict URGR and Simple Strict URGR are W[2]-hard when parameterized by the feedback vertex set number and the treedepth of the solid graph. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Strict",
                "URGR",
                "Section",
                "Simple",
                "hardness",
                "Parameterized",
                "graph",
                "solid",
                "parameter",
                "Theorem"
            ]
        }
    },
    {
        "id": "866c97bb-0719-4abf-a7e0-e7e70bea3177",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We reduce from Set Cover which is W[2]-hard when parameterized by k [9]. Thomas Erlebach, Othon Michail, Nils Morawietz 29 Table 2 A part of the adjacency matrix of the W[2]-hardness reduction.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Set",
                "Cover",
                "hard",
                "Table",
                "reduce",
                "parameterized",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils"
            ]
        }
    },
    {
        "id": "8e74dea9-4204-4aa5-bbf8-f5e34f4fd449",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "u ⊤ vF,u i wF,u i qF,u i ai a′ i bi b′ i ci ⊥i u 1 1 1 0 1 0 1 1 1 0 ⊤ 0 0 0 1 0 0 0 1 1 0 vF,u i 0 0 1 0 1 0 0 0 0 1 wF,u i 1 1 1 1 1 0 1 1 1 0 qF,u i 0 1 1 1 1 0 1 1 1 0 ai 0 0 0 1 0 1 0 0 0 0 a′ i 0 1 0 1 0 1 0 1 1 0 bi 0 1 1 1 0 1 0 1 1 0 b′ i 0 0 0 0 0 0 0 1 1 0 ci 0 1 0 1 0 1 1 0 1 0 ⊥i 0 0 1 0 0 0 0 0 0 0 Set Cover Input: A universe U, a collection F of subsets of U (called hyperedges), and an integer k.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vF,u",
                "wF,u",
                "qF,u",
                "Set",
                "Input",
                "Cover",
                "called",
                "hyperedges",
                "universe",
                "collection"
            ]
        }
    },
    {
        "id": "28e84b15-5565-47d8-83e1-b661f14f825b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Question: Is there a subset S ⊆F of size at most k, such that each element u ∈U is contained in at least one hyperedge of S? Let I := (U, F, k) be an instance of Set Cover with F = {F1, . . . , Fr}. Assume without loss of generality that each element of U is contained in at least one hyperedge and that F has size at least k, as otherwise I could be solved trivially.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Question",
                "contained",
                "subset",
                "size",
                "element",
                "hyperedge",
                "Set",
                "Cover",
                "instance",
                "Assume"
            ]
        }
    },
    {
        "id": "3cffa9ea-a7d7-47f0-99c1-677db10ac696",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We obtain a directed graph D = (V, A) with solid graph G = (V, E) as follows: The graphs contain the vertex ⊤, each element u ∈U as a vertex, and for each i ∈[1, k] the vertices of {ai, a′ i, bi, b′ i, ci, ⊥i}. Additionally, for each i ∈[1, k], each F ∈F, and each u ∈F, the graphs contain the vertices wF,u i , vF,u i , and qF,u i . Next, we describe the solid edges of G, that is, the bidirectional arcs of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "vertices",
                "graph",
                "graphs",
                "solid",
                "obtain",
                "directed",
                "element",
                "Additionally",
                "vF,u"
            ]
        }
    },
    {
        "id": "b8757414-e7f5-4be7-81a1-70f23fd408cb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "See Table 2 for the solid edges and dashed arcs of the main connection gadget of the instance. Let i ∈[1, k]. The graph G contains the edges {ai, a′ i}, {a′ i, ci}, {ci, b′ i}, {b′ i, bi}, and {ci, ⊤}. Moreover, for each F ∈F and each u ∈F, G contains the edges {u, wF,u i }, {wF,u i , ai}, {wF,u i , bi}, {wF,u i , ci}, {wF,u i , vF,u i }, {wF,u i , qF,u i }, {vF,u i , ⊥i}, and {qF,u i , ⊤}. Finally, we describe the dashed arcs of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "Table",
                "edges",
                "instance",
                "arcs",
                "solid",
                "main",
                "connection",
                "gadget",
                "dashed"
            ]
        }
    },
    {
        "id": "857710d2-3848-42b7-ac87-bcc4cf907965",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each i ∈[1, k], D contains the arcs (a′ i, bi), (bi, ai), (bi, ci), (ci, ai), (a′ i, ⊤), (bi, ⊤), and (⊤, b′ i). Let u ∈U. Then, D contains the arc (u, ⊤). Moreover, for each i ∈[1, k], D contains the arcs (u, ai), (u, bi), (u, b′ i), and (u, ci). Additionally, for each hyperedge F ∈F with u ∈F, D contains the arcs (u, vF,u i ), (vF,u i , ai), (bi, vF,u i ), (wF,u i , ⊤), (wF,u i , b′ i), (a′ i, wF,u i ), (qF,u i , vF,u i ), (qF,u i , ai), (qF,u i , bi), (qF,u i , b′ i), and (qF,u i , ci).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "qF,u",
                "arcs",
                "vF,u",
                "wF,u",
                "arc",
                "Additionally",
                "hyperedge"
            ]
        }
    },
    {
        "id": "65b7b99a-2b4b-40dd-a987-86c770655430",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The only other dashed arcs in D are between vF,u i -vertices. Let Fx, Fy ∈F with x < y and let ux ∈Fx and uy ∈Fy. For each i ∈[1, k], D contains the arc (vFx,ux i , vFy,uy i ). This completes the construction of D. First, we show the parameter bounds. ▷Claim 32. G has a feedback vertex set of size O(k) and G has treedepth O(k). Proof. Let X := {⊤} ∪{ai, a′ i, bi, b′ i, ci, ⊥i | i ∈[1, k]}. We show that X is a feedback vertex set of G and more further, that each tree in G −X has depth at most 2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "dashed",
                "vF,u",
                "feedback",
                "vertex",
                "set",
                "show",
                "Claim",
                "arcs",
                "arc"
            ]
        }
    },
    {
        "id": "7eeec3d7-b186-42b0-95ca-263dbc8204ac",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since |X| = 6k + 1, this then proves the statement. Let u ∈U. The solid neighborhood of u in G is R = {wF,u i | i ∈[1, k], F ∈F, u ∈F}, which is an independent set in G. Now consider the other solid neighbors of the vertices of R in V \\ X. Let wF,u i ∈R. Then, the only two solid neighbors of wF,u i in V \\ X besides u are vF,u i and qF,u i , since ai, bi, and ci are in X. Furthermore, wF,u i is the only solid neighbor of both vF,u i and qF,u i in V \\ X.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "solid",
                "statement",
                "neighbors",
                "proves",
                "qF,u",
                "vF,u",
                "neighbor",
                "neighborhood",
                "independent"
            ]
        }
    },
    {
        "id": "a2f4faab-c0dd-43c3-86b5-a76300ed3f22",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This implies that G[Vu] is a tree 30 Recognizing and Realizing Temporal Reachability Graphs of depth two (rooted in u), where Vu := {wF,u i , vF,u i , qF,u i | i ∈[1, k], F ∈F, u ∈F} ∪{u}. Moreover, each vertex of V \\ X is contained in exactly one set Vu, since we assumed that each hyperedge is non-empty. This implies that each connected component in G −X is a tree of depth at most 2, which implies the statement.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "implies",
                "rooted",
                "wF,u",
                "vF,u",
                "qF,u"
            ]
        }
    },
    {
        "id": "b147fd7d-d8b9-486a-8b51-0ea7ce43b8c1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◁ We show that I is a yes-instance of Set Cover if and only if D is realizable via strict temporal paths. More precisely, we show that if I is a yes-instance of Set Cover, then there is a simple undirected temporal graph with strict reachability graph D. This then implies the correctness of the reduction for both Any Strict URGR and Simple Strict URGR. (⇐) Let G = (G = (V, E), λ: E →2N) be a undirected temporal graph with strict reachability graph equals to D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Set",
                "strict",
                "Cover",
                "temporal",
                "graph",
                "show",
                "yes-instance",
                "URGR",
                "simple",
                "paths"
            ]
        }
    },
    {
        "id": "f91b2cd8-8b16-4d89-a686-1bb6367dbf70",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that there is a hitting set of size at most k for U. To this end, we first analyze for each i ∈[1, k] the structure of the labeling λ with respect to the vertices {ai, a′ i, bi, b′ i, ci, ⊥i} ∪{vF,u i , wF,u i , qF,u i | F ∈F, u ∈F}. Let i ∈[1, k]. For a hyperedge F ∈F, we denote with F(i) the set of vertices {wF,u i | u ∈F}. We show that there is at most one hyperedge F ∈F for which edges between ci and F(i) receive a non-empty set of labels under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "wF,u",
                "hitting",
                "size",
                "show",
                "vertices",
                "hyperedge",
                "end",
                "vF,u",
                "qF,u"
            ]
        }
    },
    {
        "id": "36c1c409-3428-48d4-ad92-92d39bca4287",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume towards a contradiction that there are two hyperedges Fx ∈F and Fy ∈F with x < y, such that there is at least one edge ex between Fx(i) and ci receives a non-empty set of labels under λ, and there is at least one edge ey between Fy(i) and ci receives a non-empty set of labels under λ. Let wFx,ux i (wFy,uy i ) be the other endpoint of ex (ey) besides ci. Moreover, let z ∈{x, y}. By construction vFz,uz i has only two solid neighbors in G, namely wFx,ux i and ⊥i.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "receives",
                "non-empty",
                "set",
                "labels",
                "edge",
                "Assume",
                "contradiction",
                "hyperedges",
                "wFx,ux",
                "wFy,uy"
            ]
        }
    },
    {
        "id": "fcd4b4e0-8e30-466c-9f25-1f0e6bf625c3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This implies that both solid edges incident with vFz,uz i each receive at least one label under λ (see Observation 26). Between these two neighbors, there is no dashed arc in D and no solid edge in G. Due to Observation 1, this implies that there is some αz ∈N, such that λ({⊥i, vFz,uz i }) = λ({vFz,uz i , wFz,uz i }) = {αz}. Similarly, since ez receives at least one label under λ and there is no arc between ci and vFz,uz i , λ(ez) = λ({vFz,uz i , wFz,uz i }) = {αz}. We now show that αx < αy.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vFz,uz",
                "Observation",
                "solid",
                "implies",
                "label",
                "wFz,uz",
                "incident",
                "arc",
                "edges",
                "edge"
            ]
        }
    },
    {
        "id": "af1eea98-9bba-43ce-89a0-803b0177e029",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is due to the fact that (vFx,ux i , ⊥i, vFy,uy i ) is the only dense (vFx,ux i , vFy,uy i )-path in D and (vFx,ux i , vFy,uy i ) is an arc of D. Concluding, λ(ex) = {αx} and λ(ey) = {αy}, which implies that there is a temporal (wFx,ux i , wFy,uy i )-path under λ. This contradicts the fact that λ realizes D, since (wFx,ux i , wFy,uy i ) is not an arc of D. Consequently, there is at most one hyperedge F ∈F for which edges between ci and F(i) receive a non-empty set of labels under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vFx,ux",
                "vFy,uy",
                "path",
                "fact",
                "arc",
                "wFx,ux",
                "wFy,uy",
                "dense",
                "due",
                "Concluding"
            ]
        }
    },
    {
        "id": "5c09553d-a997-4692-8ab6-6c851a863eb2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each i ∈[1, k], let F ′ i denote the unique hyperedge F ∈F for which edges between ci and F(i) receive a non-empty set of labels under λ, if such a hyperedge F exists. We set S := {F ′ i | i ∈[1, k], F ′ i exists} and show that S is a set cover for U. Let u ∈U. We show that there is a hyperedge in S that contains u. Since λ realizes D and (u, ⊤) is an arc of D, there is a temporal (u, ⊤)-path P under λ. Recall that P is thus a dense path in D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "exists",
                "hyperedge",
                "receive",
                "denote",
                "unique",
                "edges",
                "non-empty",
                "labels",
                "show"
            ]
        }
    },
    {
        "id": "79f12e6e-f0ac-4980-8453-87627b93a053",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since {u, ⊤} is not a solid edge of G, P has length at least 3. Let x be the first internal vertex of P, which is a solid neighbor of u in G. By definition, this implies that x = wF,u i for some i ∈[1, k] and some F ∈F with u ∈F. Consider the solid neighbors of x in G besides u. These are the vertices ai, bi, ci, vF,u i , and qF,u i . Since P is a dense (u, ⊤)-path and D contains none of the arcs (ai, ⊤), (vF,u i , ⊤), or (u, vF,u i ), P visits none of the vertices ai, vF,u i , or qF,u i .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vF,u",
                "solid",
                "edge",
                "length",
                "vertices",
                "qF,u",
                "neighbor",
                "neighbors",
                "internal",
                "vertex"
            ]
        }
    },
    {
        "id": "923cc616-be28-4357-9ec1-eb473aae18a4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, P continues from wF,u i to either bi or ci. Consider the solid neighbors of bi besides wF,u i . These are the vertices of R := {b′ i} ∪({wF ′,u′ i | F ′ ∈F, u′ ∈F ′} \\ {wF,u i }). Since D does not contain the arc (b′ i, ⊤) and contains none of the arcs (wF,u i , r) with r ∈R \\ {b′ i}, the dense path P visits no solid neighbor of bi besides wF,u i . This also implies that P does not visit bi. Thus, the only solid neighbor of wF,u i besides u in P is ci.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "solid",
                "neighbor",
                "continues",
                "neighbors",
                "arc",
                "arcs",
                "vertices",
                "visits",
                "visit"
            ]
        }
    },
    {
        "id": "c3d83c1b-ca9c-4773-aea9-c0b2d59f8350",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consequently, P Thomas Erlebach, Othon Michail, Nils Morawietz 31 traverses the edge e = {wF,u i , ci}. Thus, e receives at least one label under λ, which implies that F = F ′ i ∈S, that is, at least one hyperedge of S contains u. This implies that S is a set cover of U. (⇒) Let S be a set cover of size at most k for U. Without loss of generality assume that S has size exactly k and let the hyperedges in S be denoted as F ′ i for i ∈[1, k].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Thomas",
                "traverses",
                "wF,u",
                "edge",
                "implies"
            ]
        }
    },
    {
        "id": "07e27fa4-95fc-4f80-95bc-9960048b737b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that there is a labeling λ: E →N ∪∅that realizes D. This then implies that there is a simple temporal graph with strict reachability graph equals to D. For each hyperedge Fx ∈F, let αFx := x + 2. Moreover, recall that r := |F|. Hence, αx ∈[3, r + 2]. We define λ as follows: For each u ∈U, we assign label 1 to all edges incident with u. We assign label r + 3 to all edges incident with ⊤.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "show",
                "labeling",
                "realizes",
                "graph",
                "assign",
                "edges",
                "incident",
                "label",
                "implies",
                "simple"
            ]
        }
    },
    {
        "id": "873690c6-f10c-4a5a-b0a5-f01ed33028ed",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each i ∈[1, k], we set λ({ai, a′ i}) := λ({bi, b′ i}) := r+4, λ({a′ i, ci}) := 2, and λ({ci, b′ i}) := r + 5. For each F ∈F, each u ∈U, and each i ∈[1, k], we set λ({wF,u i , vF,u i }) := λ({vF,u i , ⊥i}) := αF , λ({wF,u i , qF,u i }) := 1, λ({wF,u i , ai}) := r + 5, and λ({wF,u i , bi}) := 2. Finally, for each i ∈[1, k] and each u ∈F ′ i (that is, the ith hyperedge of S), we set λ({wF,u i , ci}) := αF ′ i . All other edges of E receive the empty set under λ. We now show that λ realizes D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "set",
                "vF,u",
                "qF,u",
                "Finally",
                "ith",
                "hyperedge",
                "edges",
                "receive",
                "empty"
            ]
        }
    },
    {
        "id": "4d9d6940-45cb-41e0-991a-4a6c3c76c81f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To this end, we first show that all solid edges are realized. Note that only some solid edges between ci and vertices of {wF,u i | i ∈[1, k], F ∈F, u ∈F} did not receive a label under λ. Let x = wF,u i . Then, there is the temporal paths (x, bi, b′ i, ci) with label sequence (2, r + 4, r + 5) under λ that realizes the arc (x, ci). Similarly, there is the temporal paths (ci, a′ i, ai, x) with label sequence (2, r + 4, r + 5) under λ that realizes the arc (ci, x).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "solid",
                "edges",
                "wF,u",
                "end",
                "realized",
                "paths",
                "sequence",
                "arc",
                "show"
            ]
        }
    },
    {
        "id": "398f416e-60e4-4d7f-8cc2-6edd17b6cb9f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consequently, each solid edge is realized. Next, we show that exactly the specified dashed arcs are realized. To this end, we first show that all arcs of D are realized. For each i ∈[1, k], the arcs (a′ i, bi), (bi, ci), (ci, ai), (a′ i, ⊤), and (⊤, b′ i) are realized via the unique path between their endpoints in G[{⊤, ai, a′ i, bi, b′ i, ci}].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realized",
                "arcs",
                "solid",
                "edge",
                "show",
                "dashed",
                "end",
                "unique",
                "path",
                "endpoints"
            ]
        }
    },
    {
        "id": "c5daeaf9-42e3-41b4-bd15-1aab0a35f831",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The arc (bi, ai) is realized via the path (bi, wF,u i , ai) for an arbitrary vertex wF,u i ∈V , and the arc (bi, ⊤) is realized via the path (bi, wF ′ i ,u i , ci, ⊤) for some arbitrary u ∈F ′ i. Note that such a vertex exists, since each hyperedge is non-empty. Let u ∈U. Since S is a set cover, there is some j ∈[1, k], such that u ∈F ′ j. Hence, the arc (u, ⊤) is realized via the path (u, w F ′ j,u j , cj, ⊤). Let F ∈F be a hyperedge that contains u.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "arbitrary",
                "arc",
                "path",
                "realized",
                "vertex",
                "hyperedge",
                "Note",
                "exists",
                "non-empty"
            ]
        }
    },
    {
        "id": "de94b1ff-f1a4-44df-807c-85a3ac075796",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each i ∈[1, k], the arc (u, ai) is realized via the path (u, wF,u i , ai), and the arcs (u, bi), (u, b′ i), and (u, ci) are realized via subpaths of the path (u, wF,u i , bi, b′ i, ci).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "wF,u",
                "realized",
                "arc",
                "arcs",
                "subpaths"
            ]
        }
    },
    {
        "id": "d03f5bcf-3981-48ad-94f7-9ff71c696e7b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Addition- ally, the arcs (u, vF,u i ), (vF,u i , ai), (bi, vF,u i ), (wF,u i , ⊤), (wF,u i , b′ i), (a′ i, wF,u i ), (qF,u i , vF,u i ), (qF,u i , ai), (qF,u i , bi), and (qF,u i , b′ i) are realized via the unique path between their end- points in G[{u, vF,u i , wF,u i , qF,u i , ⊤, ai, a′ i, bi, b′ i}], and the arc (qF,u i , ci) is realized via the path (qF,u i , wF,u i , bi, b′ i, ci). Now consider the arcs in D between vi-vertices. Let Fx, Fy ∈F with x < y and let ux ∈Fx and uy ∈Fy.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "qF,u",
                "vF,u",
                "wF,u",
                "realized",
                "path",
                "arcs",
                "Addition",
                "ally",
                "end",
                "points"
            ]
        }
    },
    {
        "id": "ce5fd6b7-062c-4d25-89ef-5346af9361af",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each i ∈[1, k], the arc (vFx,ux i , vFy,uy i ) is realized via the path (vFx,ux i , ⊥i, vFy,uy i ) with label sequence (αx, αy) = (x + 2, y + 2). Finally, we show that no non-arc of D is realized. To this end, we analyze the structure of temporal paths under λ. Observe that for each vertex x in R := {⊤}∪U∪{vF,u i | i ∈[1, k], F ∈ F, u ∈F}, λ assigns the same label to all edges incident with x. This implies that no strict temporal path under λ has a vertex of R as an internal vertex.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vFx,ux",
                "vFy,uy",
                "realized",
                "arc",
                "sequence",
                "path",
                "vertex",
                "label",
                "temporal",
                "Finally"
            ]
        }
    },
    {
        "id": "a7612158-18f4-4e11-9c12-a4dc4e77aa79",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, (wF,u i , qF,u i , ⊤) is the only temporal path of length at least two has qF,u i as an internal vertex, since {wF,u i , qF,u i } receives label 1 and ⊤∈R. Since (wF,u i , ⊤) ∈A, these paths do not realize non-arcs of D. In particular, no vertex besides wF,u i and ⊤can reach qF,u i .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "qF,u",
                "receives",
                "label",
                "vertex",
                "temporal",
                "length",
                "internal",
                "path",
                "paths"
            ]
        }
    },
    {
        "id": "18eef7ab-6fbc-4be8-b334-8bf224ae2f79",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, the only temporal paths that contain ⊥i as an internal vertex are the paths of the form (vFx,ux i , ⊥i, vFy,uy i ) 32 Recognizing and Realizing Temporal Reachability Graphs with x < y, since each solid neighbor of ⊥i is from R. Since (vFx,ux i , vFy,uy i ) ∈A, these paths do not realize non-arcs of D. Let R′ := R ∪{qF,u i | i ∈[1, k], F ∈F, u ∈F} ∪{⊥i | i ∈[1, k]}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "Recognizing",
                "Realizing",
                "Reachability",
                "Graphs",
                "paths",
                "vFx,ux",
                "vFy,uy",
                "Similarly",
                "form"
            ]
        }
    },
    {
        "id": "5277c79b-9d7f-4905-8439-9714ef0dcaae",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Next, we show that for each s = wF,u i ∈V , there is no temporal path from s to any vertex t ∈V \\ {wF,u i , vF,u i , qF,u i , ai, bi, a′ i, b′ i, ci, ⊤, u}. Assume towards a contradiction that there is such a temporal path P. Note that P has length at least 2, since there is no solid edge (and thus no labeled edge) between s and t. By the above argumentation, P cannot contain any of the vertices of R′ as internal vertices.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "wF,u",
                "temporal",
                "path",
                "vF,u",
                "qF,u",
                "show",
                "vertex",
                "edge",
                "vertices",
                "Assume"
            ]
        }
    },
    {
        "id": "67041373-b318-4956-bafb-4f91c1bcb3bd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This implies that the P has as first internal vertex s′ one of the solid neighbors of s that is not in R′. That is, s′ ∈{ai, bi, ci}. For s′ = ai, the edge {s, ai} has label r + 5, which is the largest globally assigned label. Hence, P cannot go over ai. For s′ = bi, the edge {s, bi} has label 2, which is the largest label incident with bi besides the one of edge {bi, b′ i}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "label",
                "implies",
                "internal",
                "vertex",
                "solid",
                "neighbors",
                "largest",
                "globally",
                "assigned"
            ]
        }
    },
    {
        "id": "5c967a86-e8ae-4e7f-a9ae-c5328ea006bc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since b′ i has only one other solid neighbor (namely ci), P would also have to traverse the edge {b′ i, ci} at time r + 5, which is the largest globally assigned label. Hence, P cannot go over bi. For s′ = ci, the edge {s, ci} has either no label or label αF if F ′ i = F. The only two edges incident with ci with a larger label are the edges towards ⊤(which is in R′) and towards b′ i (for which the edge has label r + 5). In all cases, P cannot reach t; a contradiction.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "edge",
                "neighbor",
                "solid",
                "traverse",
                "time",
                "largest",
                "globally",
                "assigned",
                "edges"
            ]
        }
    },
    {
        "id": "0640b5ac-7196-4013-895b-21da81316e33",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, only vertices of Z := {wF,u i , vF,u i , qF,u i , ai, bi, a′ i, b′ i, ci, ⊤, u} can reach wF,u i under λ. This in particular implies that each temporal path that contains vertex wFu i contains only vertices of Z. Since G[Z] is a graph on ten vertices, it can easily be verified that no non-arc between the vertices of Z is realized in G[Z]. Hence, if there would be a temporal path under λ that realizes a non-arc, it has to be in G′ := G−{wF,u i | i ∈[1, k], F ∈F, u ∈U}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "wF,u",
                "Similarly",
                "vF,u",
                "qF,u",
                "reach",
                "temporal",
                "path",
                "non-arc",
                "implies"
            ]
        }
    },
    {
        "id": "ad4ed29e-aba3-4c79-8096-dda86072c6e5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that the only connected components of G′ are (i) components of size 1 containing a single vertex of U, (ii) stars with center ⊥i for some i ∈ [1, k] with all its solid neighbors (that is, the vertices of {vF,u i | i ∈[1, k], F ∈F, u ∈U}) and (iii) the component G′′ := [{⊤}∪{ai, a′ i, bi, b′ i, ci | i ∈[1, k]}∪{qF,u i | i ∈[1, k], F ∈F, u ∈U}]. In the first type of components, there are trivially no temporal paths realizing non-arcs of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "components",
                "iii",
                "Note",
                "size",
                "stars",
                "center",
                "neighbors",
                "vF,u",
                "qF,u",
                "connected"
            ]
        }
    },
    {
        "id": "4425d577-6387-462a-91f5-d3f31b5dad3e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In the second type of components, there are also no temporal paths realizing non-arcs of D, as we already discussed the temporal paths that go over ⊥i. Thus, consider the last component G′′. Recall that ⊤is in R which implies that no temporal path can pass through ⊤. Hence, if there would be a temporal path under λ that realizes a non-arc, it has to be in G[C ∪{⊤}] for some connected component C of G′′ −{⊤}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "type",
                "realizing",
                "discussed",
                "paths",
                "path",
                "component",
                "components",
                "Recall",
                "non-arcs"
            ]
        }
    },
    {
        "id": "c622af2d-21d0-4f57-8269-8154fd41a134",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Each such resulting graph has size at most 6 and it can be verified easily that no included temporal path under λ realizes a non-arc. Concluding, λ realizes D. ◀ 7 Parameterizing by the Feedback Edge Set Number In this section we generalize our algorithm on tree instances of URGR to tree-like graphs. A feedback edge set of a graph G is a set F of edges of G, such that G −F is acyclic.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Set",
                "realizes",
                "non-arc",
                "Feedback",
                "Edge",
                "resulting",
                "size",
                "verified",
                "easily",
                "included"
            ]
        }
    },
    {
        "id": "dcd5baf0-8261-4fac-8bbd-127705b09a2a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We denote by fes the feedback edge set number of the solid graph G of D, that is, the size of the smallest feedback edge set of G. ▶Theorem 33. Each version of URGR can be solved in fesO(fes2) · nO(1) time. Recall that the parameter can presumably not be replaced by a smaller parameter like feedback vertex set number or the treedepth (see Theorem 31). In the remainder, we present the proof of Theorem 33.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "Theorem",
                "set",
                "feedback",
                "denote",
                "fes",
                "solid",
                "graph",
                "size",
                "smallest"
            ]
        }
    },
    {
        "id": "7731a4f3-db7e-44f6-9ecb-070480af0b4c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We will only describe the algorithm for the most general version Any Strict URGR, but for all more restrictive versions, all arguments work analogously. Thomas Erlebach, Othon Michail, Nils Morawietz 33 Definitions and Notations. An abstract overview of the basic definitions is given in the following table.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Strict",
                "analogously",
                "Definitions",
                "describe",
                "algorithm",
                "general",
                "restrictive",
                "arguments",
                "work"
            ]
        }
    },
    {
        "id": "8b6e9e57-1c00-45b5-8049-0f144b2c3aff",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Object meaning D = (V, A) input graph G = (V, E) solid graph of D F a fixed feedback edge set of G of minimum size X endpoints of the edges of F V ∗ the 2-core of G V ′ := V \\ V ∗ non-core vertices (no vertex of V ′ is in a cycle in G) Tv for some v ∈V ∗ pendant tree with root v Y3 vertices of degree at least 3 in G[V ∗] −F Y2 vertices of V ∗that are adjacent to some vertex of X ∪Y3 X∗:= X ∪Y2 ∪Y3 At least all vertices of degree at least 3 in G[V ∗] and their neighbors Let G = (V, E) be the solid graph and let F be a minimum size feedback edge set of G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "graph",
                "set",
                "degree",
                "edge",
                "solid",
                "feedback",
                "minimum",
                "size",
                "vertex"
            ]
        }
    },
    {
        "id": "f440d611-4aff-40cd-b025-0d1954ebbb03",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We assume without loss of generality that G is connected, as otherwise, we can solve each connected component independently, or detect in polynomial time that D is not realizable if there are dashed arcs between different connected components of the solid graph. Moreover, let X denote the endpoints of the edges of F. Note that |X| ≤2 · |F|. We define the set V ∗ as the (unique) largest subset S of vertices of V that each have at least two neighbors in G[S], that is, V ∗is the 2-core [22] of G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "connected",
                "component",
                "components",
                "independently",
                "graph",
                "assume",
                "loss",
                "generality",
                "solve",
                "detect"
            ]
        }
    },
    {
        "id": "eafa419a-5148-4793-b8b1-90ec49983c44",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This set can be obtained from V by repeatedly removing degree-1 vertices. Note that V ∗contains all vertices of V that are part of at least one cycle in G (but may also contain vertices that are not part of any cycle). Moreover, we define V ′ := V \\ V ∗. Note that X ⊆V ∗, since F is a minimum-size feedback edge set. Since G is connected, for each vertex v′ ∈V ′, there is a unique vertex v ∈V ∗which has closest distance to v′ among all vertices of V ∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "removing",
                "Note",
                "part",
                "obtained",
                "repeatedly",
                "cycle",
                "set",
                "vertex",
                "define"
            ]
        }
    },
    {
        "id": "2e3e34f9-3edc-442c-a4f0-ad98d7743430",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For a vertex v ∈V ∗, denote by Vv the set of all vertices of V ′ for which v is the closest neighbor in V ∗. Note that Vv might be empty. Since v′ is in no cycle, removing v from G would result in v′ ending up in a component that has no vertex of V ∗. Hence, Tv := G[{v} ∪Vv] is a tree for which we call v the root. Moreover, we call Tv the pendant tree of v. Recall that each vertex of V ∗has degree at least 2 in G[V ∗].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "denote",
                "set",
                "vertices",
                "closest",
                "neighbor",
                "call",
                "tree",
                "Note",
                "empty"
            ]
        }
    },
    {
        "id": "3961102e-f930-4c21-8def-511966fcf831",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Furthermore, G −F is acyclic and thus G[V ∗] −F is a tree, where each leaf is a vertex of X. Let Y3 denote the set of all vertices of degree at least 3 in G[V ∗] −F, and let Y2 be the neighbors of X ∪Y3 in V ∗\\ (X ∪Y3). Recall that each leaf of G[V ∗] −F is a vertex of X. Moreover, in each tree with ℓleaves, there are O(ℓ) vertices having (i) degree at least 3 or (ii) a neighbor of degree at least 3. This implies that |Y2 ∪Y3| ∈O(|X|). Let X∗:= X ∪Y2 ∪Y3.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "degree",
                "vertex",
                "leaf",
                "acyclic",
                "tree",
                "vertices",
                "denote",
                "neighbors",
                "neighbor",
                "set"
            ]
        }
    },
    {
        "id": "4f6c4cd2-2d90-4c03-80ea-3bcd4f5fc181",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "See Figure 4 for an illustration of these sets of vertices and some of the main definitions used in this section. By the above, |X∗| ∈O(|X|) ⊆O(fes). Recall that each vertex of Y2 has degree exactly 2 in G[V ∗]. Moreover, note that each vertex of V ∗\\ X∗is part of a unique path P where each internal vertex of P is from V ∗\\ X∗and the endpoints of P are from Y2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Figure",
                "vertex",
                "section",
                "illustration",
                "sets",
                "vertices",
                "main",
                "definitions",
                "fes",
                "Recall"
            ]
        }
    },
    {
        "id": "36ef5293-2397-4551-ba07-b74592ba4d51",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each such path, each internal vertex has degree exactly 2 in G[V ∗] and there are at most |X∗| −1 such paths, since G[V ∗] −F is acyclic. Note that X∗contains all vertices that are part of triangles in G[V ∗] and thus in G. This implies that in each minimal realization of D, each edge incident with at least one vertex of V \\ X∗receives at most two labels (see Lemma 2). We now formally define the above mentioned paths between the vertices of Y2 is a more general way. ▶Definition 34.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "acyclic",
                "internal",
                "degree",
                "vertex",
                "paths",
                "Lemma",
                "Definition",
                "vertices",
                "Note",
                "part"
            ]
        }
    },
    {
        "id": "4f1a6f79-4277-406a-8e19-b5f9a16f1a03",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let W with X∗⊆W ⊆V ∗and let P be a path of length at least 2 in G[V ∗] with endpoints a and b in W and all internal vertices from V ∗\\ W. We call P 34 Recognizing and Realizing Temporal Reachability Graphs X vertex Y3 vertex Y2 vertex fes edge V ∗ X∗-connector X∗-connector tree u Tu v Tv X∗:= X ∪Y2 ∪Y3 Figure 4 An illustration of the main definitions used by the FPT algorithm for parameter fes. The grey area contains the vertices of V ∗, that is, the 2-core of G. a W-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "connector",
                "Figure",
                "path",
                "length",
                "endpoints",
                "internal",
                "vertices",
                "Recognizing",
                "fes"
            ]
        }
    },
    {
        "id": "d5f889c6-9c5e-42df-9723-4bc5b57223d8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, let C := G[V (P) ∪S q∈V (P )\\{a,b} Vq]. We call C a W-connector tree and the extension of P. Note that the endpoints of each X∗-connector are from Y2 and thus have degree 2 in G[V ∗]. Moreover, each internal vertex v of a W-connector P has degree exactly 2 in G[V ∗], that is, the only two neighbors of v in G[V ∗] are the predecessor and the successor of v in P. This also implies that each endpoint of a W-connector has degree exactly 2 in G[V ∗].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "W-connector",
                "degree",
                "call",
                "tree",
                "extension",
                "endpoints",
                "endpoint",
                "Note",
                "connector",
                "internal"
            ]
        }
    },
    {
        "id": "73eb92c7-bc6b-45c9-b149-da56a217020c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since each edge of P is incident with at least one vertex of V \\ W ⊆V \\ X∗, in each minimal realization of D, each edge of each W-connector receives at most two labels (see Lemma 2). The latter also holds for each W-connector tree. ▶Observation 35. Let W with X∗⊆W ⊆V ∗and let q ∈V \\ (W ∪S w∈W Vw). There is exactly one W-connector tree that contains q. ▶Observation 36. Let W with X∗⊆W ⊆V ∗. Then, there are O(|W| + fes) edges between vertices of W in G and there are O(|W| + fes) W-connectors.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "W-connector",
                "Observation",
                "labels",
                "incident",
                "vertex",
                "minimal",
                "realization",
                "receives",
                "edge"
            ]
        }
    },
    {
        "id": "ef24ea90-27a2-4184-8252-50a313fe9dc8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Abstract Description of the Algorithm Our algorithm uses two preprocessing steps. In the first step, we will present a polynomial-time reduction rule based on the splitting operations presented in Section 4. With this reduction rule, we will be able to remove vertices from pendant trees that have many vertices. After this reduction rule is applied exhaustively, for each vertex x ∈V ∗, the pendant tree Tx will have O(dx) vertices, where dx denotes the degree of x in G[V ∗].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Algorithm",
                "Description",
                "reduction",
                "rule",
                "Abstract",
                "vertices",
                "Section",
                "preprocessing",
                "steps",
                "step"
            ]
        }
    },
    {
        "id": "3292b781-56f1-4f88-8b93-788b0075d0a2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In the second step, we extend the set X∗to a set W ∗⊆V ∗such that each W ∗-connector has some useful properties (we will define connectors with these properties as nice connectors).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "step",
                "set",
                "properties",
                "connectors",
                "extend",
                "define",
                "nice",
                "connector"
            ]
        }
    },
    {
        "id": "ab950666-05fb-4bd2-9094-fc05d683a269",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Intuitively, a connector P with extension C is nice if (i) in a realization for D, the arcs Thomas Erlebach, Othon Michail, Nils Morawietz 35 in D[V (C)] can only be realized by temporal paths that are contained in the connector tree C, and (ii) for each arc between a vertex outside of C and a vertex inside of C, we can in polynomial time detect over which (unique) edge of the connector incident with one of its endpoints this arc is realized.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "connector",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "vertex",
                "Intuitively",
                "unique",
                "Thomas"
            ]
        }
    },
    {
        "id": "a3f1ba09-65a3-4f50-aa4e-8facf1d74dfc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we will show, we can compute such a set W ∗of size O(fes) in polynomial time, or correctly detect that the input graph is not realizable. By the first part, we additionally get that the total number of vertices in pendant trees that have their root in W ∗is O(|W ∗| + fes) = O(fes). The algorithm then works as follows: We iterate over all possible partial labelings λ on the O(fes) edges incident with vertices of W ∗or vertices of pendant trees that have their root in W ∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "show",
                "time",
                "realizable",
                "vertices",
                "trees",
                "root",
                "compute",
                "set",
                "size"
            ]
        }
    },
    {
        "id": "b601a2a8-cee2-42b7-9280-5c4a20925bce",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we will show, we can assume that each of these edges will only receive O(fes) labels in each minimal realization. For each such labeling λ, we need to check whether we can extend the labeling to the so far unlabeled edges, that is, the edges that are part of any W ∗-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "edges",
                "show",
                "labels",
                "realization",
                "assume",
                "receive",
                "minimal",
                "labeling",
                "connector"
            ]
        }
    },
    {
        "id": "056062f3-91eb-4ff9-8e6e-dbaaf7d6d4c2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we will show, we can compute for each such connector P with extension C in polynomial time a set LP of O(1) labelings for the edges of C, such that if λ can be extended to a realization for D, then we can extend λ (independently from the other connectors) by one of the labelings in LP . Since W ∗has size O(fes), there are only O(fes) many W ∗-connectors (see Observation 36) and for each such connector P, the set LP of labelings has constant size.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "Observation",
                "set",
                "labelings",
                "connector",
                "connectors",
                "size",
                "show",
                "independently",
                "compute"
            ]
        }
    },
    {
        "id": "e0ca07ff-fefb-4a78-86ea-cc8c02f93fb4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Our algorithm thus iterates over all possible O(1)O(fes) = 2O(fes) possible labeling combinations for the connectors and checks whether one of these combinations extends λ to a realization for D. Summarizing, we will show the following. ▶Proposition 37.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "combinations",
                "Proposition",
                "Summarizing",
                "algorithm",
                "iterates",
                "labeling",
                "connectors",
                "checks",
                "extends"
            ]
        }
    },
    {
        "id": "37243da9-ce3a-44be-b112-db62d8cf391a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In polynomial time, we can detect that D is not realizable, or compute a set W ∗with X∗⊆W ∗⊆V ∗, such that the set of edges E∗that are (i) incident with at least one vertex of W ∗or (ii) part of some pendant tree with root in W ∗, has size O(fes) and where for each labeling λ of the edges of E∗, we can in 2O(fes) · nO(1) time detect that there is no frugal realization for D that agrees with λ on the labels of all edges of E∗, or compute a labeling that realizes D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "edges",
                "compute",
                "detect",
                "time",
                "set",
                "labeling",
                "realizable",
                "incident",
                "part"
            ]
        }
    },
    {
        "id": "ee836bf3-3159-4f77-885c-1545dcc95537",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The running time of this algorithm is then fesO(fes2) · nO(1), since (i) all preprocessing steps run in polynomial time, (ii) we only have to consider fesO(fes2) labelings λ (since we prelabel O(fes) edges with O(fes) labels each), and (iii) for each labeling λ, we only have to check for 2O(fes) possible ways to extend λ to a realization for D. To see the second part, we show that it is sufficient to assign only labels of {i · 2 · n | i ∈O(fes2)} in λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "fesO",
                "time",
                "iii",
                "edges",
                "labels",
                "labelings",
                "labeling",
                "running",
                "algorithm"
            ]
        }
    },
    {
        "id": "9b10b2d9-f51c-4931-9076-d0de220ebb01",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To describe our algorithm, we will use the notion of “merging” several partial labelings. This is formally defined as follows. ▶Definition 38. Let E1 and E2 be (not necessarily disjoint) subsets of E. For λ1 : E1 →2N and λ2 : E2 →2N, we define the labeling λ1 ⋉λ2 : E1 ∪E2 →2N by (λ1 ⋉λ2)(e) := λ2(e) if e ∈E2 and (λ1 ⋉λ2)(e) := λ1(e) otherwise. 7.1 Independent structural implication In our algorithm, we will enumerate all reasonable prelabelings of a set of O(fes) edges.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "merging",
                "algorithm",
                "describe",
                "notion",
                "partial",
                "Definition",
                "labelings",
                "labeling",
                "Independent",
                "formally"
            ]
        }
    },
    {
        "id": "1a0148aa-f95c-4357-b36e-4c953fd29c20",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To ensure that this enumeration can be done in FPT-time for fes, we need to ensure that ’few’ labels per edges are sufficient. The following result ensures this property, but is also of independent interest for the understanding of our problem. ▶Theorem 39. Let D be an instance of URGR with solid graph G. In each minimal realization of D, each edge of G receives O(fes) labels. 36 Recognizing and Realizing Temporal Reachability Graphs Proof. Let λ be a realization of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ensure",
                "sufficient",
                "fes",
                "enumeration",
                "FPT-time",
                "’few’",
                "Theorem",
                "ensures",
                "labels",
                "realization"
            ]
        }
    },
    {
        "id": "d29fb021-e84c-42c6-a17f-36dd0ba807dc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let F be a feedback edge set of G of size fes. Moreover, let V ∗and X∗be defined as above based on F and recall that |X∗| ∈O(|F|) = O(fes). If each edge receives O(fes) labels, we are done. So assume that there is an edge e that receives ω(fes) labels. We will show that λ is not a minimal realization for D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "labels",
                "edge",
                "feedback",
                "set",
                "size",
                "receives",
                "defined",
                "based",
                "recall"
            ]
        }
    },
    {
        "id": "fbda17bd-bce6-477d-9bee-406b9136ad04",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that if not both endpoints of e are in X∗, then e is not part of a triangle in G, which implies that λ is not a minimal realization, since in each such realization, e would receive at most two labels (see Lemma 2). Thus, assume in the following that both endpoints of e are from X∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realization",
                "Lemma",
                "endpoints",
                "Note",
                "labels",
                "part",
                "triangle",
                "implies",
                "minimal",
                "receive"
            ]
        }
    },
    {
        "id": "43e74a21-001a-40d4-80a7-1331e2792035",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similar to the proof of Lemma 3, we denote for each vertex v ∈V with αv the smallest label assigned to e for which there is a temporal path under λ that starts in v and traverses e at time αv, if such a label exists. Let Le := {αv | v ∈V, αv exists}. Note that if there is at least one label ℓassigned to e that is not contained in Le, then removing label ℓfrom e still preserves at least one temporal path between any two vertices for which a temporal path exists under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "temporal",
                "path",
                "label",
                "exists",
                "Similar",
                "proof",
                "denote",
                "vertex",
                "smallest"
            ]
        }
    },
    {
        "id": "0e9ce80d-09c0-4315-b884-62cc64e909fd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consequently, if such a label ℓexists, we can immediately conclude that λ is not a minimal realization for D. Recall that e receives ω(fes) labels. Hence, to show that λ is not a minimal realization, it suffices to show that Le has size O(fes). To this end, note that each vertex of V is (a) a vertex of X∗, (b) contained in some X∗- connector tree C (excluding the two vertices of C in X∗), or (c) a vertex of some pendant tree rooted in X∗(excluding the root).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "minimal",
                "vertex",
                "ℓexists",
                "realization",
                "immediately",
                "conclude",
                "excluding",
                "show",
                "tree"
            ]
        }
    },
    {
        "id": "1302fcb4-d9f7-45ab-93b7-776523d6e5a7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since X∗has size O(fes), the vertices of X∗contribute O(fes) different labels to Le. Let C be a X∗-connector tree where a and b are the two unique vertices of X∗in C. By definition of connector trees, a and b are both leaves in C.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "vertices",
                "contribute",
                "size",
                "labels",
                "connector",
                "tree",
                "trees",
                "unique",
                "definition"
            ]
        }
    },
    {
        "id": "3d88914e-66eb-45ac-9c37-255ccc50526d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, since these vertices are the only vertices of X∗in C and both endpoints of e are from X∗, each temporal path starting in C and traversing edge e has to leave the connector tree via the unique edge {a, a′} incident with a in C or via the unique edge {b, b′} incident with b in C. Since both edges are not part of a triangle, they both receive at most two labels each under λ, or λ is not a minimal realization for D (see Lemma 2).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "incident",
                "unique",
                "vertices",
                "edge",
                "endpoints",
                "temporal",
                "path",
                "starting",
                "traversing",
                "leave"
            ]
        }
    },
    {
        "id": "0d28b206-077d-4e2c-9d1c-6c6cd3441bf3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thus, assume that both edges receive at most two labels each. Hence, all vertices of V (C) \\ {a, b} contribute in total at most four labels to Le. Since there are O(fes) X∗-connectors (see Observation 36), all vertices that are contained in X∗-connectors thus contribute O(fes) labels in total to Le. To show that Le has size O(fes), it suffices to show that all vertices that are contained in pendant trees with roots in X∗contribute O(fes) labels in total to Le. Let x ∈X∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "labels",
                "vertices",
                "total",
                "contribute",
                "assume",
                "contained",
                "edges",
                "receive",
                "connectors"
            ]
        }
    },
    {
        "id": "1e946733-61ad-46a1-b734-38fac9b918f8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that all vertices of Tx contribute O(dx) labels in total to Le, where dx denotes the degree of x in G[V ∗]. Let v ∈Vx and let P be a temporal path from v that traverses the edge e at time αv. Note that P traverses one edge e1 incident with x in Tx and then traverses an edge e2 between x and some other vertex of V ∗. Since e1 is an edge of Tx, e1 is a bridge in G, which implies that max λ(e1) ≤min λ(e2).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "labels",
                "traverses",
                "show",
                "vertices",
                "contribute",
                "total",
                "denotes",
                "degree",
                "temporal"
            ]
        }
    },
    {
        "id": "da6ae0ce-6971-465a-8499-47d88767aaff",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, we can assume that P either traverses the edge e2 at time min λ(e2) or at time min(λ(e2) \\ min λ(e2)) (if e2 receives at least two labels). Thus, for each edge between x and some other vertex of V ∗, at most two labels are used that define the αv values for the vertices v ∈Vx. This implies that the vertices of Tx contribute O(dx) labels in total to Le. Note that Observation 36 implies that the sum of degrees of all vertices of X∗in G[V ∗] is O(fes).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "min",
                "time",
                "labels",
                "vertices",
                "receives",
                "edge",
                "assume",
                "traverses",
                "implies",
                "Observation"
            ]
        }
    },
    {
        "id": "02486abb-88b9-45c9-a9dd-5d47ec6dc8d5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, all vertices that are contained in pendant trees with roots in X∗contribute O(fes) labels in total to Le. Consequently, Le has size O(fes). This implies that λ is not a minimal realization, since e receives ω(fes) labels under λ. ◀ 7.2 Dealing with the pendant trees Our goal in this subsection is to prove the following. Thomas Erlebach, Othon Michail, Nils Morawietz 37 ▶Proposition 40.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "contribute",
                "labels",
                "vertices",
                "contained",
                "roots",
                "total",
                "pendant",
                "trees",
                "Proposition"
            ]
        }
    },
    {
        "id": "d371a4b4-8d11-4b77-a59c-4ab9dded0de2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In polynomial time, we can (i) detect that D is not realizable or (ii) ob- tain an equivalent instance by (a) adding polynomially many degree-1 vertices to D and (b) removing vertices from D, such that in the resulting instance, in each pendant tree Tv for v ∈V ∗, O(dv) vertices remain, where dv denotes the degree of v in G[V ∗]. For each vertex v ∈V ∗, let Bv denote the vertices of Tv that are adjacent to v in G. By definition of Tv, for each vertex b ∈Bv, the edge {v, b} is a bridge in G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "instance",
                "time",
                "detect",
                "tain",
                "adding",
                "removing",
                "remain",
                "polynomial",
                "realizable"
            ]
        }
    },
    {
        "id": "cbb24fb0-424c-4b7d-ac35-8740c4147cd7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We call Bv the bridge vertices of Tv. For each vertex v ∈V ∗, apply the operations behind Lemma 14, Lemma 16, and Lemma 17 to each bridge between v and Bv. These operations might possibly detect that D is not realizable. In this case, report that D is not realizable. Otherwise, each such operation individually splits our instance into at most two instances. Moreover, at most one of these instances contains cycles, since each bridge in Tv has a tree on one side.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "bridge",
                "realizable",
                "call",
                "vertices",
                "operations",
                "instances",
                "apply",
                "vertex",
                "case"
            ]
        }
    },
    {
        "id": "ad26ae8e-d5b8-4faa-99aa-884193d922f3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For all resulting tree instances, we check in polynomial time whether they are realizable. If at least one is not realizable, we correctly output that D is not realizable. Otherwise, we only (again) remain with one instance, and this instance contains cycles. In particular, this instance is (besides some possible degree-1 vertices) a subgraph of D[V ∗∪N(V ∗)]. For convenience, assume that D already is the unique resulting instance.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realizable",
                "instance",
                "tree",
                "check",
                "polynomial",
                "time",
                "resulting",
                "vertices",
                "correctly",
                "output"
            ]
        }
    },
    {
        "id": "53039905-8826-4ca6-8081-869a1148dc44",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that G[{v} ∪Bv] is an induced star with center v, where each edge between v and a vertex of Bv is a bridge in G. Hence, with the same arguments behind Lemma 20, D is not realizable if D[Bv] is not a complete DAG, since the operations behind Lemma 14 and Lemma 17 were applied on all bridges between v and Bv. Hence, if D[Bv] is not a complete DAG, we correctly output that D is not realizable. Otherwise, we continue with the knowledge that D[Bv] is a complete DAG.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "DAG",
                "complete",
                "Note",
                "induced",
                "star",
                "center",
                "edge",
                "vertex",
                "realizable"
            ]
        }
    },
    {
        "id": "0389d6a8-0c84-4463-91eb-434ca70cc276",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This complete DAG D[Bv] thus implies a unique total order on the vertices of Bv starting from the unique source in D[Bv]. In the following, we denote the ith vertex of this total order of Bv by bi v. Consequently, for each 1 ≤i < j ≤|Bv|, (bi v, bj v) ∈A. Additionally, we check for any two adjacent bridges e and e′ whether they are both bundled and separated. If this is the case for any pair of adjacent bridges, we can correctly detect that D is not realizable due to Corollary 13.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "unique",
                "total",
                "order",
                "complete",
                "implies",
                "vertices",
                "starting",
                "source",
                "adjacent"
            ]
        }
    },
    {
        "id": "334fc0bf-619f-43bd-90a7-56536f5b5025",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since this property can be checked in polynomial time, we assume in the following that no pair of adjacent bridges is both bundled and separated. We now observe a necessary property for realizable instances. ▶Lemma 41. Let v ∈V ∗and let u ∈V \\ ({v} ∪Vv).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "separated",
                "property",
                "checked",
                "polynomial",
                "assume",
                "pair",
                "adjacent",
                "bridges",
                "bundled"
            ]
        }
    },
    {
        "id": "734e756d-1b80-447a-bff4-3fc82a985182",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If D is realizable, then the set [1, |Bv|] can be partitioned in three consecutive and pairwise disjoint (possibly empty) intervals I1, I2, and I3, such that (bi v, u) ∈A and (u, bi v) /∈A for each i ∈I1, (bi v, u) /∈A and (u, bi v) /∈A for each i ∈I2, and (u, bi v) ∈A and (bi v, u) /∈A for each i ∈I3. Proof. Since u ∈V \\ ({v} ∪Vv), for each bi v ∈Bv, A contains at most one of the arcs (u, bi v) and (bi v, u). Let λ be a realization of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "intervals",
                "realizable",
                "set",
                "disjoint",
                "possibly",
                "empty",
                "partitioned",
                "consecutive",
                "pairwise",
                "Proof"
            ]
        }
    },
    {
        "id": "ff1ff0e5-e554-48c7-84ee-744f0c0d5435",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If (bi v, u) ∈A for some i ∈[2, |Bv|], then there is a temporal (bi v, u)-path under λ. This temporal path starts by traversing the edge {bi v, v} at time at least min λ({bi v, v}). Since for each j ∈[1, i −1], A contains the arc (bj v, bi v), min λ({bj v, v}) ≤min λ({bi v, v}). Hence, there is also a temporal (bj v, u)-path under λ. This implies that (bj v, u) ∈A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "path",
                "min",
                "edge",
                "starts",
                "traversing",
                "time",
                "arc",
                "implies"
            ]
        }
    },
    {
        "id": "cef5068e-ac54-4ce0-ba4c-872e0d1e350d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, this implies that the interval I1 exists as stated and extends from the start of Bv (ending with the largest i for which (bi v, u) ∈A). Similarly, if (u, bi v) ∈A for some i ∈[1, |Bv| −1], then there is a temporal (u, bi v)-path un- der λ. This temporal path ends by traversing the edge {v, bi v} at time at most max λ({v, bi v}). 38 Recognizing and Realizing Temporal Reachability Graphs Since for each j ∈[i + 1, |Bv|], A contains the arc (bi v, bj v), min λ({v, bj v}) ≥max λ({v, bi v}).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "interval",
                "exists",
                "ending",
                "implies",
                "stated",
                "extends",
                "start",
                "largest",
                "path"
            ]
        }
    },
    {
        "id": "daf7c760-7d80-4eea-bebc-5fc46dfefc0a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, there is also a temporal (u, bj v)-path under λ. This implies that (u, bj v) ∈A. Moreover, this implies that the interval I3 exists as stated and extends to the end of Bv (starting from the smallest i for which (bi v, u) ∈A). Consequently, the interval I2 contains the remaining vertices of Bv. None of the vertices of I2 can have an arc from or towards u as otherwise, one of the other two intervals could be extended.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "path",
                "implies",
                "interval",
                "vertices",
                "intervals",
                "exists",
                "starting",
                "stated",
                "extends"
            ]
        }
    },
    {
        "id": "ce8de09d-35df-4570-a287-da2608058910",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ Note that this property can be checked for each pair of vertices v and u in polynomial time. Hence, if the property does not hold for some vertex pair, we correctly output that D is not realizable. In the remainder, assume that these intervals exist for each pair of vertices v and u. Moreover, note that they can be computed in polynomial time. We may call the interval I2 the middle interval of u with respect to Tv.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Note",
                "pair",
                "time",
                "vertices",
                "property",
                "polynomial",
                "checked",
                "interval",
                "realizable",
                "hold"
            ]
        }
    },
    {
        "id": "3a0d19e0-16d6-496f-82b0-dbf5f9de9b88",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Based on these intervals, we now define for each vertex v ∈V ∗and each neighbor u of v in V ∗a set of O(1) edges in Tv that ’surround’ the edge {u, v}. Intuitively, these edges will be the only edges that can possibly share a label with {u, v} in any realization of G. ▶Definition 42. Let e := {u, v} ⊆V ∗with e ∈E, and let Bv denote the bridge vertices of Tv. Moreover, let I2 denote the middle interval of u with respect to Tv according to Lemma 41.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "Based",
                "define",
                "vertex",
                "neighbor",
                "set",
                "’surround’",
                "Definition",
                "denote",
                "edge"
            ]
        }
    },
    {
        "id": "ad1a3f76-9cf1-4830-824f-43db1544ba18",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If Bv ̸= ∅, we define the edges of Tv that surround e as: {{v, bj v} | j ∈[i −2, i + 2] ∩[1, |Bv|]}, if the interval I2 has size at most one, where i ∈ [1, |Bv|] is the smallest index, such that (bj v, u) ∈A for each 1 ≤j < i and (u, bk v) ∈A for each i < k ≤|Bv|, and as ∅, otherwise. In the latter case, we say that the edges {bj v, v} and {bk v, v} block the edge e, where j = min I2 and k = max I2. We now show that this definition matches the previous intuition. ▶Lemma 43.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "interval",
                "index",
                "define",
                "surround",
                "size",
                "smallest",
                "edge",
                "Lemma",
                "min"
            ]
        }
    },
    {
        "id": "29ce18db-4fa7-4f71-a1f6-bd2054d91d5e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let e := {u, v} ⊆V ∗with e ∈E, and let S denote the edges of Tv that surround e. Then, in each realization of D, e shares no label with any edge of Tv that is incident with v and not in S. Moreover, for each i ∈[1, |Bv| −1] where {v, bi v} and {v, bi+1 v } are not in S, in each frugal realization λ of D, λ(e) ∩[min λ({v, bi v}), max λ({v, bi+1 v })] = ∅. Proof. Recall that each bridge e of G receives at least one label in each realization of D. Let Bv be the bridge vertices of Tv.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realization",
                "denote",
                "surround",
                "label",
                "edges",
                "edge",
                "bridge",
                "shares",
                "incident",
                "min"
            ]
        }
    },
    {
        "id": "17485603-e9d3-4c25-8c6e-654b4fa80ec3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Recall that D[Bv] is a complete DAG. This implies that for each realization λ for D and for each two bk v and bℓ v from Bv with k < ℓ, min λ({v, bk v}) < max λ({v, bℓ v}) and max λ({v, bk v}) ≤min λ({v, bℓ v}). We distinguish two case. Case 1: S = ∅. That is, there is some i ∈[1, |Bv|−1], such that there is no arc between u and any vertex of {bi v, bi+1 v }. Let λ be a realization for D. We show that λ(e) = ∅. Assume towards a contradiction that λ(e) ̸= ∅.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "min",
                "Recall",
                "max",
                "complete",
                "case",
                "realization",
                "implies",
                "distinguish",
                "arc"
            ]
        }
    },
    {
        "id": "1dcf6cda-1997-4fc0-9f5b-f4b23532ced0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since there is no arc between u and bi v, Observation 1 implies that there is some α ∈N, such that λ(e) = λ({v, bi v}) = {α}. Since (bi v, bi+1 v ) ∈A, max λ({v, bi+1 v }) > min λ({v, bi v}) = α. Thus, (u, v, bi+1 v ) is a temporal path under λ. This contradicts the fact that λ realizes D, since (u, bi+1 v ) is not an arc of D. Hence, the statement holds if S = ∅. Case 2: S ̸= ∅.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Observation",
                "implies",
                "arc",
                "max",
                "min",
                "temporal",
                "path",
                "Case",
                "contradicts",
                "fact"
            ]
        }
    },
    {
        "id": "9df14da0-9acd-4373-a6f5-f66a11574ffe",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume towards a contradiction that e shares a label with at least one edge {v, bj v} of Tv that is incident with v and does not surround e. Let i ∈[1, |Bv|] be the index over which S was defined. We distinguish two subcases. Case 2.1: j < i. By definition {{v, bℓ v} | ℓ∈{i −2, i −1, i}} ⊆S. Hence, j ≤i −3. By choice of i, (bi−1 v , u) ∈A. Hence, max λ({v, bi−1 v }) ≤min λ(e) ≤max λ(e).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Assume",
                "edge",
                "contradiction",
                "shares",
                "label",
                "incident",
                "surround",
                "max",
                "defined",
                "index"
            ]
        }
    },
    {
        "id": "302b4cd8-7654-43ca-b40e-8fd0b9e5a87c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By the initial Thomas Erlebach, Othon Michail, Nils Morawietz 39 argumentation, this implies that max λ({v, bj v}) ≤min λ({v, bi−2 v }) < max λ({v, bi−1 v }) ≤ min λ(e). This contradicts the assumption that e shares a label with {v, bj v}. Case 2.2: j > i. This case can be shown analogously. Consequently, no edge of Tv incident with v outside of S shares a label with e. We now show the second part of the statement.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "min",
                "max",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Thomas",
                "argumentation",
                "initial"
            ]
        }
    },
    {
        "id": "e8e0f666-3390-4628-8489-1adb1cea6276",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "That is, let i ∈[1, |Bv| −1] where both ei := {v, bi v} and ei+1 := {v, bi+1 v } are not in S, we show that e has no label from [min λ(ei), max λ(ei+1)]. Assume towards a contradiction that this is not the case. By the above, we know that λ(e) ∩ (λ(ei) ∪λ(ei+1)) = ∅. Moreover, e cannot have a label between min λ(ei) and max λ(ei), as otherwise, a solid edge between u and bi v would be realized. Similarly, e cannot have a label between min λ(ei+1) and max λ(ei+1).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "min",
                "max",
                "label",
                "show",
                "Assume",
                "case",
                "contradiction",
                "Similarly",
                "realized",
                "solid"
            ]
        }
    },
    {
        "id": "ac8b3fff-0d53-4e9e-88d3-6a5040c41f7d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, the only remaining option is that e receives a label strictly between max λ(ei) and min λ(ei+1). This then implies that the arcs (bi v, u) and (u, bi+1 v ) are realized. Hence, bi v (bi+1 v ) is from the interval I1 (I3) of u with respect to the pendant tree Tv according to Lemma 41. By definition of S, both ei and ei+1 are in S; a contradiction. ◀ Based on this insight about surrounding edges, we now define another sanity check.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "remaining",
                "option",
                "receives",
                "label",
                "strictly",
                "max",
                "min",
                "Lemma",
                "Based",
                "arcs"
            ]
        }
    },
    {
        "id": "bc0b4df1-00c4-469b-9b1e-6abd9bc83100",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This will then ensure that we can assume some consistent reachabilities between vertices outside of Tv and bridge vertices that are in Tv but that do not surround any external edge. The sanity check reads as follows. ▶Lemma 44. Let v ∈V ∗with |Bv| ≥3 and let i ∈[1, |Bv|−1] such that neither edge {bi v, v} nor edge {bi+1 v , v} is surrounding or blocking any edge incident with v that is outside of Tv.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "edge",
                "ensure",
                "assume",
                "consistent",
                "reachabilities",
                "bridge",
                "surround",
                "external",
                "Lemma"
            ]
        }
    },
    {
        "id": "406b5779-0a62-449e-9391-b5fbc4b20d77",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If D is realizable, then for each vertex x ∈V \\ ({v} ∪Vv) Dxbiv = Dxbi+1 v (and Dxbi+1 v = Dx outi+1 v , where outi+1 v is the out-leaf of bi+1 v , if it exists), and Dbivx = Dbi+1 v x (and Dbivx = Dini vx, where ini v is the in-leaf of bi v, if it exists). Proof. Let λ be a realization for D and let x ∈V \\ ({v} ∪Vv). Moreover, let α be the smallest label such that there is a temporal (x, v)-path P under λ that reaches v at time α.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dbivx",
                "Dxbi",
                "exists",
                "outi",
                "Dxbiv",
                "Dbi",
                "Dini",
                "realizable",
                "vertex",
                "out-leaf"
            ]
        }
    },
    {
        "id": "0818afdf-c7f1-4c09-8fa9-fdf8fbf613de",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since x /∈V \\ ({v} ∪Vv), the path P traverses an edge e between v and some other vertex of V ∗at time α. Since neither edge {bi v, v} nor edge {bi+1 v , v} is surrounding e, Lemma 43 implies that α < min λ({bi v, v}) or α > max λ({bi+1 v , v}). If α < min λ({bi v, v}), P can be extended to reach the vertices bi v, bi+1 v , and outi+1 (if the latter exists). In this case, Dxbiv = Dxbi+1 v = Dx outi+1 v = 1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "min",
                "path",
                "traverses",
                "vertex",
                "time",
                "outi",
                "Lemma",
                "Dxbiv",
                "Dxbi"
            ]
        }
    },
    {
        "id": "1dcd4d7b-42ad-4e32-a8fa-653d42b3ba85",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, that is, if α > max λ({bi+1 v , v}) , x can reach none of bi v, bi+1 v , and outi+1. In this case, Dxbiv = Dxbi+1 v = Dx outi+1 v = 0. The reachability towards x can be shown analogously. ◀ This property can be checked for each vertex v ∈V ∗and each bi v ∈Vv in polynomial time. If the property does not hold for some vertex pair, we correctly output that D is not realizable. In the remainder, thus assume that the property holds for all vertex pairs.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "outi",
                "max",
                "property",
                "vertex",
                "Dxbiv",
                "Dxbi",
                "reach",
                "case",
                "pair",
                "pairs"
            ]
        }
    },
    {
        "id": "ef7970ba-1e5c-49be-86ea-c712cde218c3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Based on this sanity check, we now define our final reduction rule to reduce the size of pendant trees. ▶Lemma 45. Let v ∈V ∗and let bi v ∈Bv with 6 ≤i ≤|Bv| −5, such that none of the edges {{v, bj v} | i −5 ≤j ≤i + 5} is surrounding or blocking any edge e incident with v and some other vertex of V ∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Based",
                "check",
                "trees",
                "sanity",
                "define",
                "final",
                "reduction",
                "rule",
                "reduce",
                "size"
            ]
        }
    },
    {
        "id": "0f2103d2-c799-4c65-b571-00d2b54e509f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, D is realizable if and only if (i) D[V (Tv)] = D[{v} ∪Vv] is realizable and (ii) D′ is realizable, where D′ is the instance obtained from D by removing bi v and its potential in- and out-leaf. Proof. Let D′ be the resulting instance with solid graph G′ after removing bi v and its possible leaf-neighbors form D. Let Dv := D[V (Tv)] = D[{v} ∪Vv]. Moreover, for each j ∈[1, |Bv|], let ei denote the bridge {bi v, v}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realizable",
                "out-leaf",
                "removing",
                "instance",
                "obtained",
                "potential",
                "Proof",
                "resulting",
                "solid",
                "graph"
            ]
        }
    },
    {
        "id": "4d0a68ea-5060-4763-8aaa-c0271121f28f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "40 Recognizing and Realizing Temporal Reachability Graphs The first direction of the statement follows immediately: Let λ be a realization for D. Then, the restriction of λ to the edges of G′ realizes D′, since no path in G between any two vertices of G′ uses vertices that are removed from G. Similarly, the restriction of λ to the edges of Tv realizes Dv, since no path in G between any two vertices of Tv uses vertices outside of Tv. Hence, if D is realizable, then both D′ and Dv are realizable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "vertices",
                "immediately",
                "restriction",
                "edges",
                "path"
            ]
        }
    },
    {
        "id": "79eb99d7-a76d-4c3d-aad5-2d5c6a523437",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "So consider the second direction. Let λ′ be a frugal realization for D′ and let λv be a frugal realization for Dv. We show that there is a realization λ for D. To this end, we will combine both realizations for D′ and Dv. Recall that ei is not an edge that surrounds or blocks any external edge incident with v. Note that for each external edge e incident with v, in both D and D′ the same edges in Tv are surrounding e.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realization",
                "direction",
                "frugal",
                "edge",
                "external",
                "incident",
                "end",
                "show",
                "Recall",
                "Note"
            ]
        }
    },
    {
        "id": "b0b27615-45a9-429d-aef4-e667be731445",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If e is surrounded by at least one edge in Tv under D, then this trivially follows by definition of surrounding edges. Otherwise, if no edge surrounds e under D, then, since ei is not an edge blocking e, D′ still contains both edges that block e in D. Based on these two edges, no edge surrounds e under D′. Due to Lemma 43, this implies that for each external edge e incident with v, e receives no label in [min λ′(ei−5), max λ′(ei+5)].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "edges",
                "surrounds",
                "surrounded",
                "trivially",
                "definition",
                "surrounding",
                "Lemma",
                "blocking",
                "block"
            ]
        }
    },
    {
        "id": "d7f638a5-bf01-4493-ab3a-6c511b5cfe22",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let s = i −3 if ei−3 is a special bridge in D, and let s = i −4, otherwise. Similarly, let t = i + 3 if ei+3 is a special bridge in D, and let t = i + 4, otherwise. The choice of s and t is important to ensure that the edges es−1 (et−1) and es+1 (et+1) are separated under D, D′, and Dv. We will show that this property holds when providing a realization for D. Before we can define a realization for D, we observe several properties about the edges es and et. Let j ∈[1, s] ∪[t, |Bv|].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "special",
                "bridge",
                "edges",
                "realization",
                "Similarly",
                "choice",
                "important",
                "ensure",
                "separated",
                "show"
            ]
        }
    },
    {
        "id": "3065ee11-303d-4997-9ffc-1f681a84d0e9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Observe that ej and ei are separated under D. This implies that ej and ei are not bundled under D, since we would have already detected that D is a no-instance if ej and ei are both bundled and separated under D (see Corollary 13). Hence, the removal of bi v and its possible leaves did not make ej non-special, if ej was special in D. In other words, ej is special in D if and only if ej is special in D′. Let j ∈[s, t].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "special",
                "separated",
                "Observe",
                "Corollary",
                "bundled",
                "implies",
                "detected",
                "no-instance",
                "non-special",
                "words"
            ]
        }
    },
    {
        "id": "e3aec5d0-f06f-426b-af2b-b5aba8ead465",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since ej does not surround any external edge incident with v, ej is special in D if and only if ej is special in Dv. This is due to the fact that ej cannot share a label with any external edge incident with v (see Lemma 43). This in particular implies that es (et) is special in D′ if an only if es (et) is special in Dv. Moreover, max λv(es) < min λv(et), since es and et are separated under Dv. Similarly, max λ′(es) < min λ′(et), since es and et are separated under D′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "special",
                "external",
                "edge",
                "incident",
                "Lemma",
                "surround",
                "max",
                "min",
                "separated",
                "due"
            ]
        }
    },
    {
        "id": "fc600584-3cd1-4897-9bcd-15cc5ca8bf2c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We can thus assume without loss of generality that λ′(es) = λv(es) and λ′(et) = λv(et) (by introducing arbitrarily many empty snapshots in both labelings). Based on this property, we now define a realization λ for D. The labeling λ agrees with λv on all edges incident with at least one vertex of {bj v | j ∈[s + 1, t −1]}, and agrees with λ′ on all other edges. We show that λ realizes D. Let W contain the vertices bj v with j ∈[s+1, t−1] and their possible leaves.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "assume",
                "loss",
                "generality",
                "introducing",
                "arbitrarily",
                "empty",
                "snapshots",
                "agrees",
                "edges",
                "Based"
            ]
        }
    },
    {
        "id": "35de2b4b-f5ff-4765-83a2-b75655361db0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since paths between any two vertices of V \\ W only use vertices outside of W, and λ′ realizes D′, exactly the arcs of D between vertices of V \\ W are realized by λ. Similarly, paths between vertices of W only use vertices of W ∪{v}, since all vertices of W are in Tv. Since λ agrees with λv on all edges incident with at least one vertex of W and λv realized Dv, exactly the arcs of D between vertices of W are realized by λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "realized",
                "paths",
                "arcs",
                "realizes",
                "Similarly",
                "agrees",
                "edges",
                "incident",
                "vertex"
            ]
        }
    },
    {
        "id": "547fb24c-e323-4616-96fc-3e67a4bc77b4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It thus remains to show that exactly the arcs of D between vertices of W and vertices of V \\ W are realized by λ. Let x ∈V \\ ({v} ∪Vv) and let j ∈[s, t]. Then, since we assumed that the property of Lemma 44 holds (as otherwise we already detected that D is not realizable), Dxbj v = Dxbs−1 v (and Dx outj = Dxbs−1 v if the out-leaf outj of bj v exists). Since λ′ realizes D′, if Dxbs−1 v = 1, then there is a temporal (x, bs−1 v )-path P under λ′ (and thus under λ).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "Dxbs",
                "remains",
                "show",
                "arcs",
                "realized",
                "outj",
                "Lemma",
                "Dxbj",
                "holds"
            ]
        }
    },
    {
        "id": "8b9e7e1e-d375-4593-98e7-3641b28a5fa7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The path P traverses the edge es−1 at time at most max λ′(es−1) = max λ(es−1) < min λ(ej). This implies Thomas Erlebach, Othon Michail, Nils Morawietz 41 that there is also a temporal (x, bj v)-path (and a temporal (x, outj)-path, if outj exists) under λ. Similarly, if Dxbs−1 v = 0, then there is no temporal (x, bs−1 v )-path under λ′ (and thus also not under λ). In particular, each temporal (x, v)-path under λ reaches v at time at least min λ(es−1).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "path",
                "max",
                "time",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "traverses"
            ]
        }
    },
    {
        "id": "1c2e2a78-e045-467b-b26f-d9e5eba29336",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As initially discussed, no external edge incident with v has a label in [min λ′(es−1), max λ′(et+1)]. Hence, each temporal (x, v)-path under λ reaches v at time larger than max λ(et+1) > max λ(ej). This implies that there is also no temporal (x, bj v)-path (and no temporal (x, outj)-path, if outj exists) under λ. Hence, the possible arcs from x to bj v and outj are realized by λ if and only if they exist. Similarly, the possible arcs from bj v and inj to x are realized if and only if they exist.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "max",
                "path",
                "discussed",
                "min",
                "exist",
                "outj",
                "initially",
                "external",
                "edge"
            ]
        }
    },
    {
        "id": "9b2bb177-0803-433a-8464-4273ecebd1ca",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It thus remains to consider reachability between vertices of W and vertices of Vv \\ W. To analyze this case, we finally show the reason why we chose the specific values for s and t. We show that in both D′ and Dv, es−1 and es+1 are separated. This is due to the fact that (i) if s = i −3, then ei−3 is special which implies that es−1 and es+1 are separated, and (ii) if s = i −4, then ei−3 is non-special which implies that es−1 and es+1 are separated.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertices",
                "separated",
                "show",
                "case",
                "remains",
                "reachability",
                "analyze",
                "finally",
                "reason",
                "chose"
            ]
        }
    },
    {
        "id": "ebec3fbd-98df-4de0-967d-f7e7d26f19ba",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By the earlier argumentation, es is special under either all or none of the graphs D, D′, and Dv. Thus, each temporal path that traverses first an edge in Tv not incident with a vertex in W and afterwards an edge incident with a vertex of W exists under λv if and only if it exists under λ. This implies that λ realizes exactly the arcs between the vertices of Tv, since λv realizes Dv. In conclusion, λ realizes D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "argumentation",
                "realizes",
                "earlier",
                "special",
                "graphs",
                "edge",
                "incident",
                "vertex",
                "exists",
                "temporal"
            ]
        }
    },
    {
        "id": "0f4533ca-7d16-4f0e-88a7-eb737d13bf45",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◀ Note that this implies that we can in polynomial time (correctly detect that D is not realizable or) reduce the size of each fixed pendant tree Tx with x ∈V ∗to a size of O(dx), where dx denotes the degree of x in G[V ∗].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Note",
                "size",
                "time",
                "correctly",
                "reduce",
                "implies",
                "polynomial",
                "detect",
                "realizable",
                "fixed"
            ]
        }
    },
    {
        "id": "64ca11d6-6978-46cb-aef0-c3fadf2b6694",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is due to the fact that each of the O(dx) edges defines at most 5 surrounding or blocking edges in Tx, and we can remove neighbors of x in Tx if there are more than 11 consecutive (with respect to the topological order on Bx) bridges incident with x that are all not surrounding or blocking any external edge. This thus proves Proposition 40.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "consecutive",
                "surrounding",
                "blocking",
                "bridges",
                "edges",
                "Proposition",
                "due",
                "fact",
                "defines",
                "remove"
            ]
        }
    },
    {
        "id": "984387e2-7963-4bbc-a90d-380f2b90d3ee",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "7.3 Ensuring connectors with nice properties In this section we show how to extend the vertex set X∗to a set W ∗of size O(fes), such that each W ∗-connector has some useful properties that we will use in our algorithm. To define these useful properties, we distinguish between several types of connectors. ▶Definition 46. Let W with X∗⊆W ⊆V ∗and let P be a W-connector with endpoints a and b from V ∗. We say that P is trivial if P has length at most 3.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Ensuring",
                "fes",
                "set",
                "properties",
                "algorithm",
                "connectors",
                "Definition",
                "nice",
                "section",
                "show"
            ]
        }
    },
    {
        "id": "074578b7-96ea-499c-b37f-99c2f448f5b0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, let a′ be the successor of a in P and let a′′ be the successor of a′ in P. Similarly, let b′ be the predecessor of b in P and let b′′ be the predecessor of b′ in P. We say that P is an (in,out)-connector if (a, a′′) ∈A and (b′′, b) ∈A. Moreover, P a dense (in,out)-connector, if the path P is a dense path in D and P is an (in,out)-connector. Robust Connectors The first property we consider are robust connectors, which are defined as follows. ▶Definition 47.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "successor",
                "in,out",
                "connector",
                "predecessor",
                "Connectors",
                "dense",
                "Robust",
                "path",
                "Definition",
                "Similarly"
            ]
        }
    },
    {
        "id": "dd9d4a53-3977-45b8-ba05-f226e7211c88",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let W with X∗⊆W ⊆V ∗and let P be a W-connector with endpoints a and b and extension C. We say that P is robust if there is no dense path between a and b outside of C, that is, if there is no dense path from a to b in D[V \\ (V (C) \\ {a, b})] and there is no dense path from b to a in D[V \\ (V (C) \\ {a, b})].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "W-connector",
                "dense",
                "path",
                "endpoints",
                "extension",
                "robust"
            ]
        }
    },
    {
        "id": "cd1704b8-ec3b-48a2-bfcd-b98be14bc1ec",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "42 Recognizing and Realizing Temporal Reachability Graphs In other words, in a robust connector P, the reachability between the vertices of the extension of P has to be achieved via temporal paths that only use subpaths of the extension C of P. ▶Observation 48. Let W with X∗⊆W ⊆V ∗and let P be a robust W-connector with extension C. Then, for each realization λ∗of D, λ∗ C realizes D[V (C)], where λ∗ C is the restriction of λ∗to the edges of C.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Temporal",
                "Reachability",
                "Recognizing",
                "Realizing",
                "Graphs",
                "extension",
                "words",
                "robust",
                "Observation",
                "connector"
            ]
        }
    },
    {
        "id": "a54a377e-53fd-4d28-9eaf-173945c4f6dd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This then directly implies the following for robust connectors. ▶Observation 49. Let W with X∗⊆W ⊆V ∗and let P be a robust W-connector. Then for each arc (q, q′) ∈A with q, q′ ∈V (P), the subpath of P from q to q′ is dense or D is not realizable. Additionally, we observe the following hereditary property for robust connectors. ▶Observation 50. Let W and W ′ with X∗⊆W ⊆W ′ ⊆V ∗. Moreover, let P be a W- connector and let P ′ be a W ′-connector such that P ′ is a subpath of P.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Observation",
                "robust",
                "directly",
                "implies",
                "connectors",
                "connector",
                "W-connector",
                "subpath",
                "Additionally",
                "arc"
            ]
        }
    },
    {
        "id": "a1fbe391-7fb6-47e3-a8eb-9524fe489e72",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, P ′ is robust if P is robust. Finally, since the definition of robust connectors only depends on the non-existence of paths between the endpoints that are outside of the connector, a connector P remains robust, even if adding vertices outside of P to W. Formally, this reads as follows. ▶Observation 51. Let W and W ′ with X∗⊆W ⊆W ′ ⊆V ∗. Moreover, let P be a path in G[V ∗], such that P is both a W-connector and a W ′-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "robust",
                "connector",
                "Observation",
                "Finally",
                "W-connector",
                "Formally",
                "definition",
                "depends",
                "non-existence",
                "endpoints"
            ]
        }
    },
    {
        "id": "cd20c862-ef59-4e6d-8f96-261c1bf627ba",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, P is a robust W-connector if and only if P is a robust W ′-connector. Based on these properties, we now show that we can find a constant number of vertices of a given connector P to add to W to ensure that each resulting subconnector is robust or trivial. ▶Lemma 52. Let W with X∗⊆W ⊆V ∗and let P be a non-trivial W-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "robust",
                "W-connector",
                "connector",
                "Lemma",
                "Based",
                "properties",
                "trivial",
                "show",
                "find",
                "constant"
            ]
        }
    },
    {
        "id": "40c899df-4579-42bf-8541-85fbff22a5e0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, we can compute in polynomial time a set UP ⊆V (P) of size at most 6, such that (i) there are at most two (W ∪UP )-connectors which are subpaths of P and (ii) each (W ∪UP )-connector which is a subpath of P is trivial or robust. Proof. Let a, a′, a′′ be the first three vertices of P and let b′′, b′, b be the last three vertices of P. We distinguish two cases. Case 1: P is not an (in,out)-connector. We set UP := {a′, a′′, b′, b′′}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpaths",
                "subpath",
                "connector",
                "robust",
                "compute",
                "polynomial",
                "time",
                "size",
                "trivial",
                "vertices"
            ]
        }
    },
    {
        "id": "ab19f530-cffa-4d92-b3eb-93ac97cc9b08",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Clearly, there is at most one (W ∪UP )-connector which is a subpath of P, namely the subpath P ′ of P from a′′ to b′′. Assume towards a contradiction that P ′ is not robust. This implies that there is a dense path R in D between a′′ and b′′ that uses no edge of P ′. Assume without loss of generality that R goes from a′′ to b′′. Note that the dense path R has to visit both a and b. This implies that (a′′, a) ∈A and (b, b′′) ∈A; a contradiction to the fact that P is not an (in,out)-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpath",
                "Assume",
                "connector",
                "path",
                "implies",
                "contradiction",
                "dense",
                "robust",
                "edge",
                "loss"
            ]
        }
    },
    {
        "id": "f2d41226-111f-476c-b1b0-0d9693d52405",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consequently, P ′ is robust. Case 2: P is an (in,out)-connector. Without loss of generality assume that (a, a′′) ∈A and (b′′, b) ∈A. Moreover, let pi denote the ith vertex of P when going from a to b. That is, p1 = a and pℓ= b, where ℓdenotes the number of vertices of P. Recall that ℓ≥5, since P is non-trivial. We distinguish two cases. Case 2.1: For each j ∈[3, ℓ−1], (pj, a) /∈A. Note that this implies that (b′′, a) /∈A. Moreover, (a′′, a) /∈A. We set UP := {a′, a′′, b′, b′′}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "robust",
                "Case",
                "in,out",
                "connector",
                "cases",
                "loss",
                "generality",
                "assume",
                "denote",
                "ith"
            ]
        }
    },
    {
        "id": "7ad044eb-3a7c-4ff2-a610-fc3a14b020a9",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Clearly, there is at most one (W ∪UP )- connector which is a subpath of P, namely the subpath P ′ of P from a′′ to b′′. Note that Thomas Erlebach, Othon Michail, Nils Morawietz 43 there is no dense path R in D between a′′ and b′′ that uses no edge of P ′, since each such path would contain a and thus cannot be dense. This is due to the fact that (a′′, a) /∈A and (b′′, a) /∈A. Hence, P ′ is robust. Case 2.2: There is some k ∈[3, ℓ−1] with (pk, a) ∈A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpath",
                "connector",
                "dense",
                "path",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Thomas"
            ]
        }
    },
    {
        "id": "cfc9c66f-6266-44b6-9165-ae1e2a3bb055",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let j be the smallest integer in [3, ℓ−1] for which (pj, a) ∈A. Hence, (pj−1, a) /∈A. Note that j ̸= 3, since p3 = a′′ and (a, a′′) ∈A (which implies that (a′′, a) /∈A). We set UP := {a′, a′′, b′, b′′, pj−1, pj}. Clearly, there are at most two (W ∪UP )-connectors which are subpaths of P, namely the subpath P1 of P from a′′ to pj−1 and the subpath P2 of P from b′′ to pj. We now show that each such subpath (if it exists) is a trivial or robust connector. First consider P1.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpath",
                "smallest",
                "integer",
                "subpaths",
                "Note",
                "connectors",
                "connector",
                "implies",
                "set",
                "exists"
            ]
        }
    },
    {
        "id": "6b9344ff-afd2-49b0-9cfc-8c2192fac5a7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume that P1 exists and is non-trivial. There is no dense path R1 from a′′ to pj−1 outside of P1, since (i) such a path contains a and pj (in that order) and (ii) (a, pj) /∈A (since (pj, a) ∈A). Similarly, there is no dense path R1 from pj−1 to a′′ outside of P1, since such a path contains a and (pj−1, a) /∈A. Hence, if P1 exists, P1 is trivial or robust. Next, consider P2. Assume that P2 exists and is non-trivial.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "exists",
                "dense",
                "Assume",
                "non-trivial",
                "order",
                "Similarly",
                "robust",
                "trivial"
            ]
        }
    },
    {
        "id": "77692539-f732-48f4-b30c-35cdc259d9bb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "There is no dense path R2 from pj to b′′ outside of P2, since (i) such a path contains pj−1 and a (in that order) and (ii) (pj−1, a) /∈A. Similarly, there is no dense path R2 from b′′ to pj outside of P2, since such a path contains a and (a, pj) /∈A (since (pj, a) ∈A). Hence, if P2 exists, P2 is trivial or robust. ◀ Nice Connectors We now define the more general property we are interested in. ▶Definition 53. Let W with X∗⊆W ⊆V ∗and let P be a non-trivial W-connector with endpoints a and b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "dense",
                "order",
                "Nice",
                "Definition",
                "Connectors",
                "Similarly",
                "W-connector",
                "exists",
                "robust"
            ]
        }
    },
    {
        "id": "bb17814e-a595-4899-90ed-b6c2ca889c3d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, let a′ be the successor of a in P, let b′ be the predecessor of b in P, and let C denote the extension of P.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "successor",
                "predecessor",
                "denote",
                "extension"
            ]
        }
    },
    {
        "id": "f28fb41f-3a5e-4b35-9e29-5d2a5b193df0",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We say that P is nice if P is robust and if for each vertex q ∈V (P), (i) (q, a) /∈A or (q, b) /∈A and (ii) (a, q) /∈A or (b, q) /∈A, or if P is a dense (in,out)-connector and (i) for each vertex v ∈V \\ V (C) with (v, a) ∈A and (v, b) ∈A, there is no dense path from v to b in D[(V \\ V (C)) ∪{a, b}], and (ii) for each vertex v ∈V \\ V (C) with (a, v) ∈A and (b, v) ∈A, there is no dense path from a to v in D[(V \\ V (C)) ∪{a, b}]. The benefit of nice connectors is the following. ▶Lemma 54.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "dense",
                "path",
                "nice",
                "in,out",
                "robust",
                "connector",
                "connectors",
                "Lemma",
                "benefit"
            ]
        }
    },
    {
        "id": "1d8eb9dd-387d-4b58-8a28-d11f722d176d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let W with X∗⊆W ⊆V ∗and let P be a nice W-connector with endpoints a and b from V ∗. Moreover, let a′ be the successor of a in P, let b′ be the predecessor of b in P, and let C denote the extension of P. Finally, let vin ∈V (C) \\ {a, b} and let vout ∈(V \\ V (C)) ∪{a, b} with (vin, vout) ∈A or (vout, vin) ∈A.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "W-connector",
                "vin",
                "vout",
                "nice",
                "endpoints",
                "Finally",
                "successor",
                "predecessor",
                "denote",
                "extension"
            ]
        }
    },
    {
        "id": "98549002-bae2-4e6c-9055-b252a48de745",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In polynomial time we can detect that D is not realizable, or compute an edge e∗∈{{a, a′}, {b, b′}}, such that if (vin, vout) ∈A (if (vout, vin) ∈A), each dense (vin, vout)-path (dense (vout, vin)-path) contains the edge e∗. Proof. We distinguish two cases. Case 1: P is not a dense (in,out)-connector. Since P is nice, there is at most one c ∈{a, b}, such that A contains arc (vin, c) (arc (c, vin)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "vin",
                "path",
                "edge",
                "dense",
                "realizable",
                "polynomial",
                "time",
                "detect",
                "compute"
            ]
        }
    },
    {
        "id": "9c0112bc-1148-489f-ba61-2d7963b1fadb",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If this holds for neither a nor b, then D is not realizable, since each dense (vin, vout)-path (dense (vout, vin)-path) contains at least one vertex of {a, b}. Otherwise, let c be the unique vertex of {a, b} for which A contains arc (vin, c) (arc (c, vin)). Then, each dense (vin, vout)-path (dense (vout, vin)-path) contains the edge e∗:= {c, c′}. Since all these checks can be performed in polynomial time, the statement follows.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vin",
                "vout",
                "path",
                "dense",
                "vertex",
                "realizable",
                "arc",
                "holds",
                "unique",
                "time"
            ]
        }
    },
    {
        "id": "fd8e2c0f-89c9-449d-84be-fdfb14ca7032",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "44 Recognizing and Realizing Temporal Reachability Graphs Case 2: P is a dense (in,out)-connector. If A contains neither of the arcs (a, vout) or (b, vout) (neither of the arcs (vout, a) or (vout, b)), then D is not realizable, since each dense (vin, vout)-path (dense (vout, vin)-path) contains at least one of a and b. Hence, assume in the following that A contains at least of the arcs (a, vout) or (b, vout) (A contains at least one of the arcs (vout, a) or (vout, b)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "arcs",
                "Recognizing",
                "Case",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "dense",
                "in,out"
            ]
        }
    },
    {
        "id": "8ed593f3-6da8-451d-8e3d-fffa77523e2a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If A contains both (a, vout) and (b, vout) (both (vout, a) or (vout, b)), then there is no dense (a, vout)-path (dense (vout, b)-path) in D[(V \\ V (C)) ∪{a, b}], since D is nice. Hence, e∗:= {b, b′} (e∗:= {a, a′}) is contained in each dense (vin, vout)-path (dense (vout, vin)-path) in D. Otherwise, there is a unique vertex c ∈{a, b}, such that (c, vout) ∈A ((vout, c) ∈A). Clearly, the edge e∗:= {c, c′} is contained in each dense (vin, vout)-path (dense (vout, vin)- path) in D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "path",
                "dense",
                "vin",
                "nice",
                "contained",
                "unique",
                "vertex",
                "edge"
            ]
        }
    },
    {
        "id": "10859104-764f-4e60-af77-db11285f8010",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since all these checks can be performed in polynomial time, the statement follows. ◀ Similar to the robust property, the property of being a nice connector is preserved under addition of vertices that are not in the specific connector. ▶Observation 55. Let W and let W ′ with X∗⊆W ⊆W ′ ⊆V ∗. Moreover, let P be a path in G[V ∗] such that P is both a W-connector and a W ′-connector. Then, P is nice W-connector if and only if P is a nice W ′-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "connector",
                "time",
                "nice",
                "W-connector",
                "Similar",
                "checks",
                "performed",
                "polynomial",
                "statement",
                "Observation"
            ]
        }
    },
    {
        "id": "1562dca3-a454-47d2-9fc0-1b8c9f677c03",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Finally, we show that similar to robust connectors, we can compute in polynomial time a set of vertices of a connector P to add to W to ensure that each resulting subconnector is nice or trivial. To this end, recall that due to Observation 48, we can immediately conclude that D is not realizable if D[V (C)] is not realizable for the extension C of a robust connector. Since G[V (C)] is a tree, this property can be checked in polynomial time.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Finally",
                "robust",
                "connector",
                "polynomial",
                "trivial",
                "time",
                "show",
                "similar",
                "compute",
                "set"
            ]
        }
    },
    {
        "id": "025355d0-a648-4178-b23b-7d6b120c8163",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, by performing this check whenever we consider the extension C of a robust connector, we ensure that in polynomial time, we can (i) detect that D is not realizable or (ii) ensure that D[V (C)] is realizable. ▶Lemma 56. Let W with X∗⊆W ⊆V ∗and let P be a non-trivial and robust W-connector with extension C.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ensure",
                "realizable",
                "Lemma",
                "connector",
                "time",
                "detect",
                "extension",
                "performing",
                "check",
                "polynomial"
            ]
        }
    },
    {
        "id": "d869a43d-14e7-426c-b0e3-573ee2d6379e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If D[V (C)] is realizable, then we can compute in polynomial time a set UP ⊆V (P) of size at most 10, such that (i) there are at most two (W ∪UP )-connectors which are subpaths of P and (ii) each (W ∪UP )-connector which is a subpath of P is trivial or nice. Proof. Let a, a′, a′′ be the first three vertices of P and let b′′, b′, b be the last three vertices of P. Moreover, let C be the extension of P. We distinguish three cases. Case 1: P is a dense (in,out)-connector.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpaths",
                "subpath",
                "connector",
                "realizable",
                "nice",
                "compute",
                "polynomial",
                "time",
                "set",
                "size"
            ]
        }
    },
    {
        "id": "b25d37e7-5f9b-4235-aa99-3ea82908c215",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We set UP := {a′, a′′, b′, b′′}. Let P ′ be the subpath of P from a′′ to b′′. If a′′ = b′′ or {a′′, b′′} ∈E, then there is no subpath of P which is a (W ∪UP )-connector, which implies that UP fulfills the desired properties. Hence, assume that P ′ has length at least 2, which implies that P ′ is the only (W ∪UP )-connector that is a subpath of P. Moreover, note that P ′ is also a dense (in,out)-connector. If P ′ is trivial, UP fulfills the desired properties.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "subpath",
                "connector",
                "set",
                "implies",
                "properties",
                "fulfills",
                "desired",
                "assume",
                "in,out",
                "length"
            ]
        }
    },
    {
        "id": "c54da69f-bf9d-48b7-881c-834618b2508d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, in the following assume that P ′ in non-trivial. This implies that (b′′, a′′) /∈A, since P ′ is a dense (in,out)-connector. We now show that P ′ is nice. Let C′ be the extension of P ′ and let w ∈V \\ V (C′). First, we show that if (w, a′′) ∈A and (w, b′′) ∈A, then there is no dense (w, b′′)-path in D that avoids the edges of P ′. Afterwards, we show that if (a′′, w) ∈A and (b′′, w) ∈A, then there is no dense (a′′, w)-path in D that avoids the edges of P ′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "dense",
                "show",
                "non-trivial",
                "assume",
                "path",
                "avoids",
                "edges",
                "in,out",
                "connector",
                "implies"
            ]
        }
    },
    {
        "id": "5ac6270e-502f-4081-83b1-60e4f3aca22b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Suppose that (w, a′′) ∈A and (w, b′′) ∈A. Since P is a dense path in D and P ′ has length at least 4, A does not contain the arc (b′, a′′) (since (a′′, b′) ∈A). Hence, if w ∈{b′} ∪Vb′, Thomas Erlebach, Othon Michail, Nils Morawietz 45 then there is no dense (w, a′′)-path in D, since each such path would contain the vertex b′. For each other vertex of V \\ V (C′), each path in G from w to b′′ either traverses the entire path P ′, or goes over the vertex b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "vertex",
                "Suppose",
                "dense",
                "Vb′",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils"
            ]
        }
    },
    {
        "id": "2c54d0b7-9bc4-4547-8a67-0d662a8dd3fa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is due to the fact that each vertex in each connector has exactly two neighbors in V ∗. Thus, there is no dense (w, b′′)-path in D that avoids the edges of P ′, since such a path would contain the vertex b, but A does not contain the arc (b, b′′) (since (b′′, b) ∈A). Now suppose that (a′′, w) ∈A and (b′′, w) ∈A. First, we show that w /∈{a′} ∪Va′. Since P is a dense path in D and P ′ has length at least 4, A does not contain the arc (b′′, a′) (since (a′, b′′) ∈A).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "path",
                "due",
                "fact",
                "connector",
                "neighbors",
                "arc",
                "dense",
                "Va′",
                "avoids"
            ]
        }
    },
    {
        "id": "d60aefd3-c0b5-4575-9b50-8c2e8bd18e1a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that this implies that (b′′, w) /∈A. This is due to the assumption that D[V (C)] is realizable and the fact that each (b′′, w)-path in the tree G[V (C)] contains the vertex a′. Hence, w /∈{a′} ∪Va′. For each other vertex of V \\ V (C′), each path in G from a′′ to w either traverses the entire path P ′, or goes over the vertex a. This is due to the fact that each vertex in each connector has exactly two neighbors in V ∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vertex",
                "path",
                "Note",
                "implies",
                "due",
                "fact",
                "Va′",
                "assumption",
                "realizable",
                "tree"
            ]
        }
    },
    {
        "id": "5f5d55e8-aae6-4d23-bac8-0f7a54ef851a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thus, there is no dense (a′′, w)-path in D that avoids the edges of P ′, since such a path would contain the vertex a, but A does not contain the arc (a′′, a) (since (a, a′′) ∈A). Thus, P ′ is nice, which implies that UP fulfills the desired properties. Case 2: P is not a dense (in,out)-connector. Note that, in this case, we can check in polynomial time, whether P is nice. If this is the case, the set UP := ∅trivially fulfills the desired property.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "Case",
                "dense",
                "arc",
                "nice",
                "avoids",
                "edges",
                "vertex",
                "fulfills",
                "desired"
            ]
        }
    },
    {
        "id": "21f6e125-a49b-4832-a819-13b7c86ed577",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, assume in the following that P is not nice. This implies that there is some vertex p ∈V (P) with (i) (a, p) ∈A and (b, p) ∈A, or (ii) (p, a) ∈A and (p, b) ∈A. Due to symmetry, assume that (a, p) ∈A and (b, p) ∈A. Moreover, let p′ be the predecessor of p in P. This then implies that the unique (a, p′)-path in P and the unique (b, p)-path in P are dense. Hence, there are at most two subpaths of P that are (W ∪{p, p′})-connectors.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "assume",
                "nice",
                "implies",
                "unique",
                "path",
                "vertex",
                "Due",
                "symmetry",
                "connectors",
                "predecessor"
            ]
        }
    },
    {
        "id": "dc813deb-1353-402b-80ac-8b4836ee9ffe",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Namely, the subpath P1 from a to p′ and the subpath P2 from b to p. By the above, each of these at most two resulting connectors is trivial or a dense (in,out)-connector. If Pi exists and is non-trivial, let UPi := ∅. Otherwise, let UPi be as defined in the case for dense (in,out)-connectors. Thus, by setting UP := {p, p′} ∪UP1 ∪UP2, we obtain at most two (W ∪UP )-connectors which are subpaths of P and both of these subpaths are trivial or nice.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "in,out",
                "connectors",
                "dense",
                "trivial",
                "UPi",
                "subpath",
                "subpaths",
                "resulting",
                "non-trivial",
                "nice"
            ]
        }
    },
    {
        "id": "b5dfd60f-7b67-49f7-90e0-070d45b2cefe",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, UP has size at most 10, since UPi has size at most 4 as shown above. ◀ Based on all these results, we now show the main result of this section. ▶Proposition 57. In polynomial time, we can detect that D is a not realizable, or compute a set W ∗with X∗⊆W ∗⊆V ∗of size O(fes), such that each W ∗-connector is nice. Proof. First, we describe how to obtain a set W1 with X∗⊆W1 ⊆V ∗, such that each W1- connector is trivial or robust.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "size",
                "Proposition",
                "Based",
                "connector",
                "UPi",
                "shown",
                "set",
                "section",
                "fes",
                "Proof"
            ]
        }
    },
    {
        "id": "f106c8a7-aab8-4f4b-86af-450f7d3b97fd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Compute the set of X∗-connectors, initialize W1 := X∗, and iterate over each non-trivial X∗-connector P. Compute the set UP of vertices of P according to Lemma 52. Note that the set of W1-connectors and the set of (W1 ∪UP )-connectors differ only by a constant number of subpaths of P. Then, each subpath of P which is a (W1 ∪UP )- connector is trivial or robust due to Lemma 52.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "Compute",
                "Lemma",
                "initialize",
                "connectors",
                "connector",
                "iterate",
                "non-trivial",
                "subpaths",
                "subpath"
            ]
        }
    },
    {
        "id": "9fcd03d6-2c94-4e3b-bbd8-530514f7cbca",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, for all other (W1 ∪UP )-connectors, the properties of being trivial or being robust are preserved due to Observation 51. Now, add all vertices of UP to W1 and proceed with the next X∗-connector (which is also a W1- connector). Hence, after the iteration over all X∗connectors, the resulting set W1 preserves the stated property that each W1-connector is trivial or robust. Moreover, since UP has constant size for each X∗-connector, and there are O(fes) X∗-connectors, W1 has size O(fes).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "connectors",
                "connector",
                "Observation",
                "fes",
                "trivial",
                "properties",
                "preserved",
                "due",
                "robust",
                "size"
            ]
        }
    },
    {
        "id": "dcf3d0e5-fb0c-4c6e-bfcb-f1797d8ad892",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This also implies that there are O(fes) W1-connectors. Second, we describe how to obtain a set W2 with W1 ⊆W2 ⊆V ∗, such that each W2- connector is trivial or nice. We essentially do the same as in the construction of W1. 46 Recognizing and Realizing Temporal Reachability Graphs Compute the set of W1-connectors, initialize W2 := W1 and iterate over each non-trivial W1- connector P. Note that by definition of W1, P is robust. Let C be the extension of P. Check whether D[V (C)] is realizable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "connector",
                "implies",
                "set",
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "Compute"
            ]
        }
    },
    {
        "id": "94d93b92-7e12-4a21-bc1b-ebc58fc6a30d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that this can be done in polynomial time, since D[V (C)] is a tree. If this is not the case, then output that D is not realizable. This is correct due to Observation 48. If D[V (C)] is realizable, proceed as follows. Compute the set UP of vertices of P according to Lemma 56. Note that the set of W2-connectors and the set of (W2 ∪UP )-connectors differ only by a constant number of subpaths of P. Then, each subpath of P which is a (W2 ∪UP )-connector is trivial or nice due to Lemma 56.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "set",
                "time",
                "tree",
                "Note",
                "realizable",
                "polynomial",
                "due",
                "Observation",
                "case"
            ]
        }
    },
    {
        "id": "78b22530-d4b9-4de9-a2c8-9f25432491c7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, for all other (W2 ∪UP )-connectors, the properties of being trivial or being nice are preserved due to Observation 55. Now, add all vertices of UP to W2 and proceed with the next W1-connector (which is also a W2-connector). Hence, after the iteration over all W1 connectors, the resulting set W2 preserves the stated property that each W2-connector is trivial or nice. Moreover, since UP has constant size for each W1-connector, and there are O(fes) W1-connectors, W2 has size O(fes).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Observation",
                "connectors",
                "fes",
                "trivial",
                "properties",
                "preserved",
                "due",
                "nice",
                "size",
                "add"
            ]
        }
    },
    {
        "id": "6f4c04a8-e9d4-4ce6-bf8c-f1b258f4b145",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Finally, the set W ∗is obtained from W2 by adding all vertices of trivial W2-connectors. Since each trivial connector contains a constant number of vertices, W ∗has size O(fes) and each W ∗-connector is nice due to Observation 55. Note that all operations described run in polynomial time. This thus proves the statement. ◀ 7.4 Computing labelings for prelabeled nice connectors In this subsection, we show the following. ▶Lemma 58. Let W with X∗⊆W ⊆V ∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Finally",
                "vertices",
                "trivial",
                "Observation",
                "set",
                "obtained",
                "adding",
                "nice",
                "connector",
                "Lemma"
            ]
        }
    },
    {
        "id": "971f06a7-2807-4b48-92f2-d135094f9e0e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, let P be a nice W-connector with endpoints a and b, let a′ be the successor of a in P, and let b′ be the predecessor of b in P. Moreover, let α1 a, α2 a, α1 b, α2 b ∈{i · 2n | i ∈N} be (not necessarily distinct) natural numbers, and let C denote the extension of P.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "W-connector",
                "nice",
                "endpoints",
                "successor",
                "predecessor",
                "distinct",
                "natural",
                "numbers",
                "necessarily",
                "denote"
            ]
        }
    },
    {
        "id": "48dca1ae-387c-473f-8d47-0ff5fb916dd6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In polynomial time, we can compute a set LP of O(1) labelings λP of E(C) with λP ({a, a′}) = {α1 a, α2 a} and λP ({b, b′}) = {α1 b, α2 b}, such that if there is a realization λ∗for D with λ∗({a, a′}) = {α1 a, α2 a} and λ∗({b, b′}) = {α1 b, α2 b} and which is minimal on both {a, a′} and {b, b′}, then there is a labeling λP ∈LP for which λ∗⋉λP realizes D. Proof. Without loss of generality assume that α1 a ≤α2 a and α1 b ≤α2 b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labelings",
                "labeling",
                "time",
                "polynomial",
                "compute",
                "set",
                "realization",
                "minimal",
                "realizes",
                "Proof"
            ]
        }
    },
    {
        "id": "7ced1dd8-b13b-4dbc-a244-f5be98cd6912",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, let Ext := V \\ (V (C) \\ {a, b}) denote the external vertices of C and let Int := V (C) \\ {a, b} denote the internal vertices of C. To show the statement, we compute a constant number of instances DP of our problem, where for each Di ∈DP , the solid graph Gi of Di is a tree, and Di is a supergraph of D[V (C)]. For each such instance Di, we then check whether there is a labeling λi that realizes Di with λi({a, a′}) = {α1 a, α2 a} and λi({b, b′}) = {α1 b, α2 b}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "denote",
                "vertices",
                "Ext",
                "Int",
                "external",
                "internal",
                "statement",
                "problem",
                "tree",
                "instances"
            ]
        }
    },
    {
        "id": "f9874c59-ed3f-4176-b126-8531d874280b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we will show, if there is a realization λ∗for D with λ∗({a, a′}) = {α1 a, α2 a} and λ∗({b, b′}) = {α1 b, α2 b} which is minimal on both {a, a′} and {b, b′}, then there is some Di ∈DP , such that λ∗⋉bλi realizes D, where bλi is the restriction to the edges of E(C) of an arbitrary realization λi of Di with λi({a, a′}) = {α1 a, α2 a} and λi({b, b′}) = {α1 b, α2 b}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realization",
                "bλi",
                "show",
                "minimal",
                "realizes",
                "restriction",
                "edges",
                "arbitrary"
            ]
        }
    },
    {
        "id": "1ad1f856-748c-468e-aaa7-61628ea27452",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To properly define the instances of DP , we first compute four sets V < c′ , V ≤ c′ , V ≥ c′ , V > c′ of vertices of Int for each vertex c ∈{a, b}. Let c ∈{a, b}. We define the set V < c′ (V > c′ ) as the set of all vertices vin of Int for which (vin, c) ∈A (for which (c, vin) ∈A).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Int",
                "set",
                "define",
                "vin",
                "properly",
                "instances",
                "compute",
                "vertex",
                "vertices",
                "sets"
            ]
        }
    },
    {
        "id": "e3abeac1-b986-475c-98a3-387c2f70a6e2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, we define the set V ≤ c′ (V ≥ c′ ) as a smallest non-empty set of vertices of Int, such that there is at least one vertex vout ∈(V \\ V (C)) ∪{a, b} for which V ≤ c′ (V ≥ c′ ) is exactly the set of vertices vin of Int fulfilling (i) (vin, vout) ∈A ((vout, vin) ∈A) and (ii) {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "Int",
                "arc",
                "set",
                "vin",
                "Lemma",
                "vertices",
                "fulfilling",
                "outputted",
                "define"
            ]
        }
    },
    {
        "id": "471bdede-82a2-4df4-86eb-e22251b0029c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thomas Erlebach, Othon Michail, Nils Morawietz 47 a a′ b b′ α1 a, α2 a α1 b, α2 b f ≤ a′ v≤ a f ≤ b′ v≤ b f ≥ a′ v≥ a f ≥ b′ v≥ b α1 a α2 a α1 b α2 b α1 a α2 a α1 b α2 b Figure 5 An visualization of the solid graph and the labeling for the additional solid edges for the the auxiliary instance DΓ with the consistent type Γ = (J, AJ) with J = {v⊻ c | c ∈{a, b}, ⊻∈{≤, ≥}}. ▷Claim 59. Assume that D is realizable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "solid",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Figure",
                "Thomas",
                "visualization",
                "graph"
            ]
        }
    },
    {
        "id": "2ab9a2cc-b7ae-4088-a092-48ccec512197",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "It holds that V ≤ c′ ⊆V < c′ , V ≥ c′ ⊆V > c′ , each of these four sets contains c′, and V < c′ ∩V > c′ = {c′}. Moreover, let vout ∈Ext for which there is at least one vin ∈Int with (vin, vout) ∈A (with (vout, vin) ∈A), such that the edge {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "vin",
                "arc",
                "holds",
                "sets",
                "edge",
                "Ext",
                "Int",
                "Lemma",
                "outputted"
            ]
        }
    },
    {
        "id": "1370a29d-c009-4803-990e-35f71e5ee7ac",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Then, one of V < c′ or V ≤ c′ (one of V > c′ or V ≥ c′ ) is exactly the set of vertices vin of Int for which {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)). Proof. First, we show that V ≤ c′ ⊆V < c′ . Assume towards a contradiction that this is not the case and let vin be an arbitrary vertex of V ≤ c′ \\V < c′ .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "arc",
                "Lemma",
                "Int",
                "vin",
                "outputted",
                "set",
                "vertices",
                "edge",
                "algorithm"
            ]
        }
    },
    {
        "id": "2c4d4e24-42e8-4b40-8f7f-5c030ae0b8a5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By definition of V ≤ c′ , there is some vertex vout ∈ Ext such that (vin, vout) ∈A and in each realization for D, each temporal (vin, vout)-path traverses the edge {c, c′}. This then implies that there is a temporal (vin, c)-path, which implies that (vin, c) ∈A. This contradicts the fact that vin /∈V < c′ . Thus, V ≤ c′ ⊆V < c′ . Similarly, we can show that V ≥ c′ ⊆V > c′ . Moreover, note that c′ ∈V < c′ ∩V > c′ , since {c, c′} is a solid edge in G.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "vin",
                "Ext",
                "temporal",
                "path",
                "edge",
                "definition",
                "vertex",
                "realization",
                "traverses"
            ]
        }
    },
    {
        "id": "51ac48c1-6997-435f-b0a4-245a3693bcad",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Additionally, there is no vertex vin ̸= c′ that is contained in V < c′ ∩V > c′ , as otherwise, by definition of V < c′ and V > c′ , A contains both arcs (vin, c) and (c, vin), which is not possible by definition of a connector. Now, let vout ∈Ext for which there is at least one vin ∈Int with (vin, vout) ∈A (with (vout, vin) ∈A), such that the edge {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vin",
                "definition",
                "vout",
                "arc",
                "Additionally",
                "connector",
                "vertex",
                "contained",
                "arcs",
                "Ext"
            ]
        }
    },
    {
        "id": "876f7e11-4c07-4716-b025-4505857077c8",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that one of V < c′ or V ≤ c′ (one of V > c′ or V ≥ c′ ) is exactly the set of vertices vin of Int for which {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)). Let M denote the set of vertices vin of Int for which {c, c′} is the edge of {{a, a′}, {b, b′}} outputted by the algorithm behind Lemma 54 for the arc (vin, vout) (for the arc (vout, vin)).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "arc",
                "vin",
                "Lemma",
                "Int",
                "outputted",
                "set",
                "vertices",
                "edge",
                "algorithm"
            ]
        }
    },
    {
        "id": "856ece71-dc24-4edb-9942-7d6721d7c348",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Assume towards a contradiction that M /∈{V < c′ , V ≤ c′ } (M /∈{V > c′ , V ≥ c′ }). Analogously to the proof that V ≤ c′ ⊆V < c′ (V ≥ c′ ⊆V > c′ ), one can show that M ⊆V < c′ (M ⊆V > c′ ). Thus, M is a proper subset of V < c′ (V > c′ ). This implies that V ≤ c′ is a proper subset of V < c′ (V ≥ c′ is a proper subset of V > c′ ).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "proper",
                "subset",
                "Assume",
                "contradiction",
                "Analogously",
                "proof",
                "show",
                "implies"
            ]
        }
    },
    {
        "id": "ebd83258-7397-4c75-adfa-442b9b6540b2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, the edge {c, c′} needs to be traversed at at least three different time steps to ensure that all three distinct sets V < c′ , V ≤ c′ , and M can reach distinct external vertices (all three distinct sets V > c′ , V ≥ c′ , and M can be reached from distinct external vertices). This contradicts the fact that edge {c, c′} receives at most two labels in 48 Recognizing and Realizing Temporal Reachability Graphs each realization for D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "distinct",
                "vertices",
                "sets",
                "external",
                "edge",
                "traversed",
                "time",
                "steps",
                "ensure",
                "reach"
            ]
        }
    },
    {
        "id": "6f63c51c-cd68-4d31-9b4f-d290c96e41ba",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◁ Note that the properties described in Claim 59 can be checked in polynomial time. Hence, if at least one of the properties does not hold, we can correctly detect in polynomial time that D is not realizable. If this is the case, we define LP as the empty set, which is correct. Hence, assume in the following that all described properties of Claim 59 hold. We now describe how to define the instances of DP . We define four potential vertices J := {v⊻ c | c ∈{a, b}, ⊻∈{≤, ≥}}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Note",
                "Claim",
                "polynomial",
                "properties",
                "time",
                "define",
                "hold",
                "checked",
                "realizable",
                "correctly"
            ]
        }
    },
    {
        "id": "13d35783-b28f-401e-97b8-1c723efab4d2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, we define a set of three potential arcs AJ := {(v≤ a , b), (a, v≥ b ), (v≤ a , v≥ b )}. Let Q ⊆J and let AQ ⊆AJ. We call (Q, AQ) a consistent type if Q ∪{a, b} contains all endpoints of the arcs of AQ. Let AQ ⊆AJ. We define the instance D(J,AQ) as follows (see Figure 5): the vertex set of D(J,AQ) is V (C) ∪J ∪{f ⊻ c′ | c ∈{a, b}, ⊻∈{≤, ≥}} and 1. D(J,AQ) contains all arcs from A(V (C)), 2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "J,AQ",
                "arcs",
                "potential",
                "define",
                "set",
                "Figure",
                "call",
                "consistent",
                "type",
                "endpoints"
            ]
        }
    },
    {
        "id": "74524fd3-860d-4089-af8d-4095d1004c25",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "if (a, b) is an arc of D (that is, if P is a dense (in,out)-connector), D(J,AQ) contains the arcs (f ≤ a′, b), (a, f ≥ b′ ), and (f ≤ a′, f ≥ b′ ), 3. D(J,AQ) contains the arcs (v⊻ c , c), (c, v⊻ c ), (f ⊻ c′, c′) and (c, f ⊻ c′) (that is, the solid edges {c, v⊻ c } and {c′, f ⊻ c′}) for each c ∈{a, b} and each ⊻∈{≤, ≥}, 4. D(J,AQ) contains the arcs (f ≤ c′ , f ≥ c′ ) and (v≤ c , v≥ c ) for each c ∈{a, b}, 5.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "J,AQ",
                "arcs",
                "in,out",
                "connector",
                "dense",
                "arc",
                "edges",
                "solid"
            ]
        }
    },
    {
        "id": "3f3ec35b-e0a6-455f-8b8c-18b557acbcd6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "D(J,AQ) contains the arcs (c′, v≥ c ), (c, f ≥ c′ ), (v≤ c , c′), and (f ≤ c′ , c) for each c ∈{a, b}, 6. if (v≤ a , b) ∈AQ, D(J,AQ) contains all arcs from {v≤ a , f ≥ a′} × {b, f ≥ b′ }, 7. if (a, v≥ b ) ∈AQ, D(J,AQ) contains all arcs from {a, f ≤ a′} × {v≥ b , f ≤ b′ }, 8. if (v≤ a , v≥ b ) ∈AQ, D(J,AQ) contains all arcs from {v≤ a , f ≥ a′} × {v≥ b , f ≤ b′ }, 9. for each c ∈{a, b}, D(J,AQ) contains the arc (vin, f ≥ c′ ) for each vertex vin ∈V < c′ , 10.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "J,AQ",
                "arcs",
                "arc",
                "vin",
                "vertex"
            ]
        }
    },
    {
        "id": "7cca16be-da6e-4b0d-8182-0db15a9a2a66",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "for each c ∈{a, b}, D(J,AQ) contains the arc (f ≤ c′ , vin) for each vertex vin ∈V > c′ , 11. for each c ∈{a, b}, D(J,AQ) contains the arcs (vin, f ≤ c′ ), (vin, f ≥ c′ ), and (vin, v≥ c ) for each vertex vin ∈V ≤ c′ , and 12. for each c ∈{a, b}, D(J,AQ) contains the arcs (f ≤ c′ , vin), (f ≥ c′ , vin), and (v≤ c , vin) for each vertex vin ∈V ≥ c′ .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vin",
                "J,AQ",
                "vertex",
                "arcs",
                "arc"
            ]
        }
    },
    {
        "id": "1bce0daf-a88a-40a7-b651-3ebf37d99dd2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that D(J,AQ) has a tree as solid graph, since (i) we did not add any new arcs between vertices of V (C), (ii) we added at most one arc between any two vertices of V (D(J,AQ))\\V (C), and (iii) due to Claim 59, for each c ∈{a, b}, V < c′ ∩V > c′ = {c′}. The latter implies that the solid edges defined in Item 3 are the only solid edge between any vertex of V (D(J,AQ)) \\ V (C) and any vertex of V (C).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "J,AQ",
                "Claim",
                "vertices",
                "solid",
                "iii",
                "Note",
                "graph",
                "due",
                "arcs",
                "arc"
            ]
        }
    },
    {
        "id": "bdb55d9e-be19-43eb-8ff9-0020414c387f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each consistent type Γ = (Q, AQ), we define the instance DΓ by DΓ := D(J,AQ)[VΓ], where VΓ := V (C) ∪Q ∪{f ≤ c′ | v≥ c ∈Q} ∪{f ≥ c′ | v≤ c ∈Q}. Since D(J,AQ) has a tree as solid graph, this implies that DΓ also has a tree as solid graph. We now define the set LP of labelings for the edges of C. Initially, LP is the empty set. Afterwards, we iterate over each consistent type Γ = (Q, AQ).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "J,AQ",
                "graph",
                "tree",
                "solid",
                "define",
                "consistent",
                "type",
                "instance",
                "set",
                "Initially"
            ]
        }
    },
    {
        "id": "0efe5c30-c2bd-437c-8a57-d5ec594002a1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each such pair Γ, we check whether there is a realization λ′ Γ for DΓ with λ′ Γ({a, a′}) = {α1 a, α2 a} and λ′ Γ({b, b′}) = {α1 b, α2 b} which is minimal on both {a, a′} and {b, b′}. If this is the case, we add the labeling λΓ to LP , where λΓ is the restriction of λ′ Γ to the edges of C. This completes the construction of LP . Note that LP has a constant size, since there are at most 24 options for Q and at most 23 options for AQ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "options",
                "pair",
                "check",
                "realization",
                "minimal",
                "Note",
                "case",
                "add",
                "labeling",
                "restriction"
            ]
        }
    },
    {
        "id": "6a19b831-912e-42d2-8839-dc5f9d61a633",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, each such labeling can be computed in polynomial time, since the initial computation took polynomial time and for each consistent type Γ, we can check in polynomial time whether there is such a desired realization λ′ Γ for DΓ due to Corollary 25.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "polynomial",
                "Corollary",
                "time",
                "labeling",
                "computed",
                "initial",
                "computation",
                "consistent",
                "type",
                "check"
            ]
        }
    },
    {
        "id": "934a0aaa-001a-40a5-8b7d-c991c2a88b83",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thomas Erlebach, Othon Michail, Nils Morawietz 49 It thus remains to show that if there is a realization λ∗for D with λ∗({a, a′}) = {α1 a, α2 a} and λ∗({b, b′}) = {α1 b, α2 b} which is minimal on both {a, a′} and {b, b′}, then there is a labeling λP ∈LP , such that λ∗⋉λP realizes D. Assume that there is a minimum realization λ∗for D with λ∗({a, a′}) = {α1 a, α2 a} and λ∗({b, b′}) = {α1 b, α2 b} which is minimal on both {a, a′} and {b, b′}, as otherwise, the statement trivially holds.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "minimal",
                "realization",
                "Thomas",
                "remains",
                "show"
            ]
        }
    },
    {
        "id": "b0ab8f77-15f3-4a39-afec-dc1cae8be3aa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Our goal is to show that there is a consistent type Γ = (Q, AQ) such that (i) there is a sought realization for DΓ (that is, there is a labeling λΓ ∈LP ) and (ii) λ∗⋉λΓ realizes D. We are now ready to define the consistent type Γ = (Q, AQ) for λ∗. First, we define Q. For each c ∈{a, b} where α1 c < α2 c, we do the following: We add the vertex v≤ c to Q if there is an arc (u, w) ∈A, such that for each temporal (u, w)-path under λ∗, the edge {c, c′} is traversed from c to c′ at time α2 c.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "type",
                "consistent",
                "goal",
                "show",
                "sought",
                "realization",
                "labeling",
                "realizes",
                "define",
                "ready"
            ]
        }
    },
    {
        "id": "6d471c79-0e95-421e-9393-ca73b25e850f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, we add the vertex v≥ c to Q if there is an arc (u, w) ∈A, such that for each temporal (u, w)-path under λ∗, the edge {c, c′} is traversed from c′ to c at time α2 c. Next, we define AQ. We add the arc (v≤ a , b) to AQ if α1 a < α2 a and there is an arc (u, w) ∈A, such that for each temporal (u, w)-path under λ∗, the edge {a, a′} is traversed from a to a′ at time α2 a and the edge {b, b′} is traversed at a later time.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "arc",
                "time",
                "traversed",
                "temporal",
                "path",
                "Similarly",
                "add",
                "vertex",
                "define"
            ]
        }
    },
    {
        "id": "7c2b0450-257f-49c6-88c0-7a44eb91780d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We add the arc (a, v≥ b ) to AQ if α1 b < α2 b and there is an arc (u, w) ∈A, such that for each temporal (u, w)-path under λ∗, the edge {b, b′} is traversed from b′ to b at time α1 b and the edge {a, a′} is traversed at an earlier time. We add the arc (v≤ a , v≥ b ) to AQ if α1 a < α2 a < α1 b < α2 b and there is an arc (u, w) ∈A, such that for each temporal (u, w)-path under λ∗, the edge {a, a′} is traversed from a to a′ at time α2 a and the edge {b, b′} is traversed from b′ to b at time α1 b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "arc",
                "time",
                "traversed",
                "temporal",
                "path",
                "add",
                "earlier"
            ]
        }
    },
    {
        "id": "12b9bf15-5dcc-41ff-8aa4-34dc81e7ddc6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This completes the definition of Γ. ▷Claim 60. Let c ∈{a, b}, and let vout ∈Ext such that (vout, c′) ∈A ((c′, vout) ∈A) and each temporal (vout, c′)-path (each temporal (c′, vout)-path) under λ∗traverses the edge {c, c′} from c to c′ (from c′ to c) at time α2 c. Then, V ≥ c′ (V ≤ c′ ) is exactly the set of vertices vin of Int with (vout, vin) ∈A ((vin, vout) ∈A) that can be reached by vout (that can reach vout) only via the edge {c, c′}. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "Claim",
                "path",
                "vin",
                "edge",
                "temporal",
                "completes",
                "definition",
                "Ext",
                "Int"
            ]
        }
    },
    {
        "id": "f2e30323-6d7d-4a8d-9f4e-d8d3e11adc5e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We show that V ≥ c′ is exactly the set of vertices of Int that vout can reach via any temporal path under λ∗that traverses the edge {c, c′}. (The case for V ≤ c′ can then be shown analogously.) Assume towards a contradiction that this is not the case. Hence, due to Claim 59, V ≥ c′ ̸= V > c′ and V > c′ is exactly the set of vertices of Int that vout can reach via any temporal path under λ∗that traverses the edge {c, c′}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Int",
                "edge",
                "set",
                "vertices",
                "vout",
                "reach",
                "temporal",
                "path",
                "traverses",
                "show"
            ]
        }
    },
    {
        "id": "4f81be17-f19b-4b35-b062-fc5024b45431",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since V ≥ c′ ̸= V > c′ , there is a vertex vout 2 ∈Ext for which V > c′ is exactly the set of vertices of Int that vout 2 can reach via any temporal path under λ∗that traverses the edge {c, c′}. Since V ≥ c′ is non-empty, there is at least one temporal path that starts at vout 2 and traverses the edge {c, c′} at time at most α2 c from c to c′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "Ext",
                "Int",
                "edge",
                "temporal",
                "path",
                "traverses",
                "vertex",
                "set",
                "vertices"
            ]
        }
    },
    {
        "id": "6ca2ad01-90ec-46f6-8044-ee5318023194",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Such a path can then be extended to reach all vertices that vout can reach via temporal paths that go over {c, c′}, which would imply V ≥ c′ = V > c′ , a contradiction. ◁ We now show the statement in two steps. ▷Claim 61. There is a realization λ′ Γ for DΓ with λ′ Γ({a, a′}) = {α1 a, α2 a} and λ′ Γ({b, b′}) = {α1 b, α2 b} which is minimal on both {a, a′} and {b, b′}. Proof. Let GΓ be the solid graph of DΓ. We define the a labeling λ′ Γ for the edges of GΓ as follows.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "path",
                "paths",
                "contradiction",
                "extended",
                "vertices",
                "vout",
                "temporal",
                "imply",
                "Claim"
            ]
        }
    },
    {
        "id": "9a5f4e37-faaa-463e-83e4-5425b74f6ca3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each edge e of E(C), we set λ′ Γ(e) := λ∗(e) and for each c ∈{a, b}, we set λ′ Γ({v≤ c , c}) := α1 c and λ′ Γ({f ≥ c′ , c′}) := α2 c if v≤ c ∈Q and 50 Recognizing and Realizing Temporal Reachability Graphs λ′ Γ({v≥ c , c}) := α2 c and λ′ Γ({f ≤ c′ , c′}) := α1 c if v≥ c ∈Q. This completes the definition of λ′ Γ. Note that λ′ Γ({a, a′}) = {α1 a, α2 a} and λ′ Γ({b, b′}) = {α1 b, α2 b}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "edge",
                "completes",
                "definition",
                "Note"
            ]
        }
    },
    {
        "id": "19192e86-115a-4c54-8ba3-950e746c5801",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, to show the statement, it remains to show that λ′ Γ realizes DΓ and that for each c ∈{a, b} with α1 c < α2 c, the edge {c, c′} is a special edge under DΓ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "show",
                "edge",
                "statement",
                "remains",
                "realizes",
                "special"
            ]
        }
    },
    {
        "id": "97761cac-4081-4953-8368-74fb017f6a92",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The latter follows by construction of Γ: If for c ∈{a, b}, the realization λ∗of D uses two distinct labels α1 c < α2 c and is minimal on both {a, a′} and {b, b′}, then there is some vertex pair (u, w) with (u, w) ∈A, such that each (u, w)-path under λ∗traverses the edge {c, c′} at time α2 c, as otherwise, the label α2 c can be removed from {c, c′} in λ∗. This then implies that v≤ c ∈Q or v≥ c ∈Q. Due to symmetry assume that v≤ c ∈Q.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "labels",
                "label",
                "pair",
                "path",
                "traverses",
                "edge",
                "time",
                "construction",
                "realization",
                "distinct"
            ]
        }
    },
    {
        "id": "56a0baf1-f627-4505-b593-28aa5794bc36",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By construction, DΓ contains the arcs (v≤ c , c′) and (c, f ≥ c′ ) but not the arc (v≤ c , f ≥ c′ ). Consequently, {c, c′} is a special bridge in DΓ, which implies that in each minimum realization for DΓ, edge {c, c′} receives two labels. We now show that λ′ Γ realizes DΓ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arcs",
                "arc",
                "construction",
                "edge",
                "receives",
                "labels",
                "special",
                "bridge",
                "implies",
                "minimum"
            ]
        }
    },
    {
        "id": "8b97bf85-e070-4109-aa7a-704926962b0e",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "a) Note that for each c ∈{a, b}, each temporal path under λ′ Γ that reaches c′ at a time step smaller than α1 c can be extended at the end to reach the vertices f ≤ c′ , f ≥ c′ , v≥ c , and c (if they exist) by the subpaths with label sequence (α1 c), (α2 c), (α1 c, α2 c), and (α1 c), respectively, but cannot be extended to reach the vertex v≤ c .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "reach",
                "extended",
                "Note",
                "exist",
                "sequence",
                "temporal",
                "path",
                "reaches",
                "time",
                "step"
            ]
        }
    },
    {
        "id": "10617efb-1ca9-4b46-a96a-c52de1c809bc",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "b) Similarly, each temporal path under λ′ Γ that reaches c′ at a time step exactly α1 c can be extended at the end to reach the vertices f ≥ c′ and c by the respective edges with label α2 c, but cannot be extended to reach f ≤ c′ , v≤ c , or v≥ c .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Similarly",
                "extended",
                "reach",
                "label",
                "temporal",
                "path",
                "reaches",
                "time",
                "step",
                "end"
            ]
        }
    },
    {
        "id": "ef03ccc3-073b-4630-9af7-bb300953fb56",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "c) All temporal path under λ′ Γ that reaches c′ at a time step larger than α1 c cannot be extended to reach any vertex of f ≤ c′ , f ≥ c′ , v≤ c , v≥ c , and c, since each edge incident with {c, c′} has all labels either smaller-equal α1 c or larger-equal α2 c (as otherwise, {c, c′} would be part of a triangle in G), and each subpath leading to any of the vertices of f ≤ c′ , f ≥ c′ , v≥ c , and c uses an edge first of label at most α2 c.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "smaller-equal",
                "larger-equal",
                "labels",
                "label",
                "temporal",
                "path",
                "reaches",
                "time",
                "step"
            ]
        }
    },
    {
        "id": "22469d22-0629-4eeb-9f85-8d17650bccc2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The similar property also holds for the temporal paths that start from vertex c′ either early or late. d) Each temporal path under λ′ Γ that leaves c′ at a time step larger than α2 c can be extended at the start to begin at any of the vertices f ≤ c′ , f ≥ c′ , v≤ c , and c (if they exist), but cannot be extended to begin at vertex v≥ c .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "late",
                "temporal",
                "start",
                "vertex",
                "begin",
                "similar",
                "property",
                "holds",
                "early",
                "extended"
            ]
        }
    },
    {
        "id": "d5a66abf-7c4f-4358-b896-3faee86587f3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "e) Similarly, each temporal path under λ′ Γ that leaves c′ at a time step exactly α2 c can be extended at the start to begin with any of the vertices f ≤ c′ and c, but cannot be extended to start from any of the vertices f ≥ c′ , v≤ c , or v≥ c .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Similarly",
                "vertices",
                "extended",
                "start",
                "temporal",
                "path",
                "leaves",
                "time",
                "step",
                "begin"
            ]
        }
    },
    {
        "id": "f3caa8fb-3c7e-451d-9513-998a56254ba5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "f) All temporal path under λ′ Γ that leave c′ at a time step smaller than α2 c cannot be extended at the start to begin from any of the vertices f ≤ c′ , f ≥ c′ , v≤ c , v≥ c , and c, since each edge incident with {c, c′} has all labels either smaller-equal α1 c or larger-equal α2 c (as otherwise, {c, c′} would be part of a triangle in G). We now show that each arc of D′ Γ is realized. To this end, we may implicitly assume that all vertices we talk about exist in D′ Γ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "smaller-equal",
                "larger-equal",
                "temporal",
                "path",
                "leave",
                "time",
                "step",
                "smaller",
                "extended",
                "start"
            ]
        }
    },
    {
        "id": "e8070a88-fdeb-4934-82d9-2ccca01cb2c2",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that all arcs described in Item 1 are realized since λ∗realizes D, P is a robust connector, and D[V (C)] = DΓ[V (C)]. Since λ∗realizes D, if (a, b) ∈A, then there is a temporal path under λ∗(and thus λ′ Γ) from a to b that only uses edges in C. The subpath R from a′ to b′ of this path thus leaves a′ with a label of at least α2 a and reaches b′ at the latest with a label smaller than α1 b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "realizes",
                "Note",
                "connector",
                "arcs",
                "realized",
                "robust",
                "path",
                "label",
                "temporal"
            ]
        }
    },
    {
        "id": "e8258003-226c-4541-8724-64d33f4c7e42",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, by the above argumentation, R can (simultaneously) be extended to start with any of a or f ≤ a′, and end with any of b or f ≥ b′ . Thus, for each arc (u, w) described in Item 2, there is a temporal path from u to w in DΓ under λ′ Γ. Thomas Erlebach, Othon Michail, Nils Morawietz 51 All solid edges described in Item 3 receive a label under λ′ Γ, which implies that also the respective arcs are realized.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "simultaneously",
                "argumentation",
                "extended",
                "start",
                "end",
                "temporal",
                "path",
                "Erlebach",
                "Othon"
            ]
        }
    },
    {
        "id": "55d51807-1563-4507-a2f6-8d4601f7f3fa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The arcs of Item 4 are realized by the temporal paths (v≤ c , c, v≥ c ) and (f ≤ c′ , c′, f ≥ c′ ) with label sequence (α1 c, α2 c), since α1 c < α2 c for each c ∈{a, b} with {v≤ c , v≥ c } ⊆Q. Similarly, the arcs of Item 5 are realized by the temporal paths (c′, c, v≥ c ), (c, c′, f ≥ c′ ), (v≤ c , c, c′), and (f ≤ c′ , c′, c), each with label sequence (α1 c, α2 c), since α1 c < α2 c for each c ∈ {a, b} with {v≤ c , v≥ c } ⊆Q.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "paths",
                "sequence",
                "arcs",
                "realized",
                "temporal",
                "label",
                "Similarly"
            ]
        }
    },
    {
        "id": "cb3f120e-42a6-44bb-baad-a7a1ca0865be",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If (v≤ a , b) ∈AQ, then by choice of AQ, there is some vertex pair (u, w) with (u, w) ∈A, such that each temporal (u, v)-path under λ∗traverses the edge {a, a′} from a to a′ at time α2 a and reaches b at a later time step. Consider a subpath R from a′ to b′ of one such (u, v)-path R′. Since R′ traversed the edge {a, a′} at time α2 a, the path R traverses its first edge in time strictly larger than α2 c. Moreover, R′ reaches vertex b′ prior to time step α2 b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "path",
                "edge",
                "step",
                "pair",
                "temporal",
                "traverses",
                "choice",
                "vertex",
                "reaches"
            ]
        }
    },
    {
        "id": "c8e5d258-302d-4053-bf49-e5961f460b29",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Hence, the path R can (simultaneously) be extended to start from any vertex of {v≤ a , f ≥ a′} and end at any vertex of {b, f ≥ b′ }. Thus, all arcs of Item 6 are realized. Similarly, one can show that all arcs of Item 7 are realized, due to the existence of some vertex pair (u, w) with (u, w) ∈A, such that each temporal (u, v)-path under λ∗traverses the edge {b, b′} from b′ to b at time α1 b and visits a at an earlier time step.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "simultaneously",
                "vertex",
                "realized",
                "arcs",
                "extended",
                "start",
                "end",
                "path",
                "time"
            ]
        }
    },
    {
        "id": "8c17efec-6058-40ce-906d-9139532e5f83",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, one can show that all arcs of Item 8 are realized, due to the existence of some vertex pair (u, w) with (u, w) ∈A, such that each temporal (u, v)-path under λ∗traverses the edge {a, a′} from a to a′ at time α2 a and also traverses the edge {b, b′} from b′ to b at time α1 b. By definition, V < c′ are exactly the vertices of Int that have an arc to c in D. Let vin ∈V < c′ . Since (vin, c) ∈A, there is a temporal (vin, c)-path R in G[V (C)] under λ∗and thus λ′ Γ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "time",
                "Item",
                "traverses",
                "Similarly",
                "vin",
                "temporal",
                "path",
                "realized",
                "due"
            ]
        }
    },
    {
        "id": "11cfbca9-3d48-4ec2-9821-26c15807c854",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This path thus reaches c′ at a time strictly smaller than α2 c. The subpath from vin to c′ can thus be extended to end in f ≤ c′ by traversing the edge {f ≤ c′ , c′} at time α2 c. Hence, each arc of Item 9 is realized. Similar to the argument that each arc of Item 9 is realized, we can show that each arc of Item 10 is realized.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "realized",
                "arc",
                "time",
                "path",
                "reaches",
                "strictly",
                "smaller",
                "edge",
                "subpath"
            ]
        }
    },
    {
        "id": "aadeaed2-9d1a-46d1-9bf3-dafad8d8fe29",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Suppose that v≥ c ∈Q.By definition of Q, this implies that there is some vout ∈Ext for which there is some vertex w ∈V with (vout, w) ∈A, such that each (vout, w)-path under λ∗traverses the edge {c, c′} from c to c′ at time α2 c. This implies that (vout, c′) ∈A, and that each temporal (vout, c′)-path under λ∗traverses the edge {c, c′} from c to c′ at time α2 c.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "Ext",
                "path",
                "traverses",
                "edge",
                "time",
                "implies",
                "Suppose",
                "Q.By",
                "definition"
            ]
        }
    },
    {
        "id": "9a81b711-6083-435b-b876-dbfa35d781c6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Due to Claim 60, V ≥ c′ is exactly the set of vertices vin of Int with (vout, vin) ∈A that can be reached by vout only via the edge {c, c′}. Consequently, all arcs specified in Item 11 are realized, since for each vin ∈V ≥ c′ each temporal (vout, vin)-path under λ∗traverses the edge {c, c′} at time α2 c and thus implies the existence of a temporal (c′, vin)-path starting at a time step strictly larger than α2 c.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Claim",
                "Int",
                "edge",
                "vin",
                "vout",
                "Due",
                "temporal",
                "path",
                "set",
                "vertices"
            ]
        }
    },
    {
        "id": "08f29616-1470-4c8b-b584-c1db583f43c1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similar to the proof that each arc of Item 11 is realized, we can show that each arc of Item 12 is realized. Note that only the arcs described above are realized. This is mainly due to the fact that D[V (C)] = DΓ[V (C)]. ◁ This implies that a labeling λΓ for DΓ is contained in LP . We now complete the proof by showing that λ∗⋉λΓ realizes D. ▷Claim 62. The labeling λ∗⋉λΓ realizes D. Proof. First, we observe some properties about the labeling λΓ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Item",
                "realized",
                "arc",
                "proof",
                "labeling",
                "Similar",
                "show",
                "realizes",
                "arcs",
                "Claim"
            ]
        }
    },
    {
        "id": "247077e6-8e5e-43b8-a648-c7e271903dea",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let λ′ Γ be the realization for DΓ from which we obtained the labeling λΓ. For each c ∈{a, b}, where v≤ c ∈Q, the 52 Recognizing and Realizing Temporal Reachability Graphs edge {v≤ c , c} receives label α1 c and the edge {f ≥ c′ , c′} receives label α2 c. This is due to the fact that λΓ({c, c′}) = {α1 c, α2 c} and A contains the arcs (v≤ c , c′) and (c, f ≥ c′ ) but not the arc (v≤ c , f ≥ c′ ).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "receives",
                "label",
                "edge",
                "realization",
                "obtained",
                "labeling",
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability"
            ]
        }
    },
    {
        "id": "3125900d-b5a1-4a0c-8772-fb70d8ad2af5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly, if v≥ c ∈Q, the edge {v≥ c , c} receives label α2 c and the edge {f ≤ c′ , c′} receives label α1 c. We now show that λ∗⋉λΓ realizes D. First consider the arcs between the vertices of V (C). Since D[V (C)] = DΓ[V (C)] and since P is robust connector (that is, there is no dense path between a and b outside of V (C) \\ {a, b}), λ∗⋉λΓ surely realizes exactly the arcs between the vertices of V (C) in D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "receives",
                "label",
                "Similarly",
                "arcs",
                "vertices",
                "realizes",
                "show",
                "connector",
                "robust"
            ]
        }
    },
    {
        "id": "3394d027-a052-4903-9400-fd506705bb4a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Next, consider the arcs between one vertex vin of Int = V (C) \\ {a, b} and one vertex vout of Ext \\ {a, b} = V \\ V (C). Let vout ∈Ext \\ {a, b} and let vin ∈Int with (vout, vin) ∈A (the case for (vin, vout) ∈A can be shown analogously). Moreover, let c ∈{a, b} such that the edge {c, c′} is the edge outputted by Lemma 54 for the arc (vout, vin). This implies that each temporal (vout, vin)-path under λ∗traverses the edge {c, c′} from c to c′. We consider two cases.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Ext",
                "Int",
                "vin",
                "vout",
                "vertex",
                "edge",
                "Lemma",
                "arcs",
                "arc",
                "analogously"
            ]
        }
    },
    {
        "id": "f81c0a78-d0dd-4b2b-a0b9-b3a791aab183",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Case 1: each temporal (vout, vin)-path under λ∗traverses the edge {c, c′} from c to c′ at time α2 c. Hence, due to Claim 60, V ≥ c′ are exactly the vertices of Int that can be reached from vout over the edge {c, c′}. In particular, vin ∈V ≥ c′ . Moreover, by construction of Q, the vertex v≤ c was added to Q. Since λ′ Γ({v≤ c , c}) = α1 c, each path from v≤ c to c′ reaches vertex c′ at time exactly α2 c under λ′ Γ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "vin",
                "Case",
                "vout",
                "temporal",
                "traverses",
                "time",
                "path",
                "Claim",
                "Int"
            ]
        }
    },
    {
        "id": "c6d6142c-1e28-4adb-89fe-cf3a16700f47",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Consequently, since (i) V ≥ c′ are exactly the vertices of Int that vertex v≤ c can reach in DΓ and (ii) λ′ Γ realizes DΓ, for exactly the vertices V ≥ c′ , there is a temporal path under λ′ Γ starting at a time step larger than α2 c from c′ to these vertices of Int. Hence, (vout, vin) is realized by λ∗⋉λΓ. Case 2: at least one temporal (vout, vin)-path under λ∗traverses the edge {c, c′} from c to c′ at time α1 c. This case follows similarly with respect to the set V > c′ .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Int",
                "vertices",
                "vout",
                "vin",
                "path",
                "vertex",
                "reach",
                "realizes",
                "starting",
                "step"
            ]
        }
    },
    {
        "id": "44f9ff14-bc3b-4db1-ba97-e3add383d2ce",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Finally, consider the arcs between two vertices vout 1 and vout 2 of Ext. Let (vout 1 , vout 2 ) ∈A. If at least one temporal (vout 1 , vout 2 )-path under λ∗does not traverse any edge of C, then this path still exists under λ∗⋉λΓ. Hence, assume in the following that each temporal (vout 1 , vout 2 )- path under λ∗does traverses some edge of C.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "vout",
                "Ext",
                "Finally",
                "path",
                "temporal",
                "arcs",
                "vertices",
                "edge",
                "traverse",
                "traverses"
            ]
        }
    },
    {
        "id": "c449554e-61e0-4368-aa70-2946c4e9b7c5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In particular, this implies that P is a dense (in,out)-connector and each such (vout 1 , vout 2 )-path under λ∗traverses the edge {a, a′} from a to a′ at time αi a ∈{α1 a, α2 a} and traverses the edge {b, b′} from b′ to b at time αj b ∈{α1 b, α2 b} with αi a < αj b. We show that there is a temporal (a, b)-path under λΓ that traverses the edge {a, a′} from a to a′ at time αi a and traverses the edge {b, b′} from b′ to b at time αj b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edge",
                "time",
                "traverses",
                "vout",
                "path",
                "in,out",
                "dense",
                "connector",
                "implies",
                "temporal"
            ]
        }
    },
    {
        "id": "4d515b14-5268-4824-b097-c72eeba15009",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By construction of AQ, (a, v≥ b ) is contained in AQ if αj b = α1 b, (v≤ a , b) is contained in AQ if αi a = α2 b, and (v≤ a , v≥ b ) is contained in AQ if αi a = α2 b and αj b = α1 b. Based on these arcs that are contained in AQ and thus in DΓ, and the fact that DΓ is realized by λ′ Γ, there is a temporal (a, b)-path under λΓ that traverses the edge {a, a′} from a to a′ at time αi a and traverses the edge {b, b′} from b′ to b at time αj b.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "contained",
                "edge",
                "construction",
                "traverses",
                "time",
                "Based",
                "temporal",
                "path",
                "arcs",
                "fact"
            ]
        }
    },
    {
        "id": "36039f95-3f90-4c2b-a5f7-8eaab578305b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Note that only the arcs described are realized by λ∗⋉λΓ. Hence, λ∗⋉λΓ realizes D. ◁ Consequently, the set LP of labelings of the edges of C fulfills the desired properties and can be computed in polynomial time. ◀ 7.5 The Final Algorithm Our algorithm works as follows by using the main results of the last subsections: Theoretically, these results correctly detect that D is not realizable, or perform some preprocessing.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Note",
                "arcs",
                "realized",
                "Algorithm",
                "Theoretically",
                "results",
                "Final",
                "realizes",
                "time",
                "subsections"
            ]
        }
    },
    {
        "id": "2361e180-288f-40ec-97a4-2c10e402db97",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In the description of the algorithm, we will implicitly assume that they perform the desired Thomas Erlebach, Othon Michail, Nils Morawietz 53 Algorithm 1 FPT Algorithm for parameter fes. Input : An input-instance D = (V, A) of our undirected problem. Output : Yes if and only if D is a yes-instance of the respective version of the problem. 1 Compute the solid graph G = (V, E) of D. 2 Compute an arbitrary feedback edge set F of minimum size, as well as the set X∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "algorithm",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "FPT",
                "Thomas",
                "Compute",
                "fes"
            ]
        }
    },
    {
        "id": "632ad480-341b-4efd-b47a-b1afd8fcf954",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "3 Apply all splitting operations and reduction rules. 4 Compute W ∗⊆V ∗according to Proposition 57 and the set C := {P1, . . . , P|C|} of W ∗-connectors. 5 E∗←{e ∈E | e ∩W ∗̸= ∅} ∪S w∈W ∗E(Tw) 6 L ←{i · 2n | i ∈O(fes2)} 7 foreach λ: E∗→2L with |λ(e)| ∈O(fes) for each edge e ∈E∗do 8 foreach P ∈C do 9 Compute the set LP of labelings for the edges of the extension of the connector P that agree with λ on the labels of the first and the last edge of P according to Lemma 58. 10 foreach (λP1, . . .",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Apply",
                "Compute",
                "foreach",
                "rules",
                "splitting",
                "operations",
                "reduction",
                "Proposition",
                "set",
                "edge"
            ]
        }
    },
    {
        "id": "e16fdb89-d626-4019-8a7e-a9bc63c7e724",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": ", λP|C|) ∈LP1 × · · · × LP|C| do 11 λ∗←λ ⋉λP1 ⋉· · · ⋉λP|C| 12 if λ∗realizes D then return Yes 13 return No preprocessing, as in the case where we detect that D is not realizable, our algorithm can simply output that D is not realizable. A pseudo code of our algorithm is shown in Algorithm 1. First, we apply the operation behind Proposition 40 to ensure that all pendant trees are small with respect to the degree of their root in G[V ∗].",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "realizable",
                "algorithm",
                "return",
                "realizes",
                "preprocessing",
                "case",
                "detect",
                "simply",
                "output",
                "Proposition"
            ]
        }
    },
    {
        "id": "d56bcfa4-c799-443c-81df-5f8d1d40ca92",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Afterwards, compute a set W ∗ according to Proposition 57 and the collection C of all W ∗-connectors. Moreover, let E∗ denote all edges incident with vertices of W ∗and all edges that are part of a pendant tree having its root in W ∗. Note that this includes the first and the last edge of each W ∗- connector. Let L := {i · 2n | i ∈O(fes2)}. Iterate over all possible labelings λ: E∗→2L that assign O(fes) labels to each edge of E∗.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Proposition",
                "compute",
                "connectors",
                "connector",
                "set",
                "collection",
                "edges",
                "edge",
                "denote",
                "incident"
            ]
        }
    },
    {
        "id": "177fafe4-2715-4ce4-b83b-7e95538e6a94",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each such labeling λ, compute for each W ∗- connector P the set of labelings LP for the edges of the extension of P according to Lemma 58 for {α1 a, α2 a} = λ({a, a′}) and {α1 b, α2 b} = λ({b, b′}). Iterate over all possible combinations of such connector labelings, that is, iterate over each (λ1, . . . , λ|C|) ∈LP1 × · · · × LP|C|. For each such combination, consider the labeling λ∗:= λ ⋉λP1 ⋉· · · ⋉λP|C|. If λ∗realizes D, then correctly output that D is realizable.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "Iterate",
                "connector",
                "compute",
                "labeling",
                "labelings",
                "set",
                "edges",
                "extension",
                "combinations"
            ]
        }
    },
    {
        "id": "7a07f3fe-1de7-4b9c-97de-262c21515d91",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Otherwise, if no considered labeling λ∗realizes D, output that D is not realizable. Recall that W ∗has size O(fes), which implies that E∗has size O(fes) due to Observation 36 and since we assumed that the operation behind Proposition 40 was applied. Moreover, recall that LPi has constant size for each Pi ∈C.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "size",
                "Recall",
                "realizes",
                "output",
                "realizable",
                "considered",
                "labeling",
                "Observation",
                "Proposition"
            ]
        }
    },
    {
        "id": "1c89fef4-b0f4-4f3b-a888-2fe3556eca5f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since (i) all preprocessing steps run in polynomial time, (ii) there are |L||E∗|·O(fes) ⊆fesO(fes2) possible candidates for λ, and (iii) for each candidate λ, we check O(1)|C| ⊆2O(fes) labelings λ∗, the whole algorithm runs in fesO(fes2) · nO(1) time. It thus remains to prove the correctness. Assume towards a contradiction that the algorithm is not correct. That is, D is realizable but the algorithm does not find a labeling λ∗ that realizes D. We first observe the following.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "fes",
                "time",
                "fesO",
                "iii",
                "algorithm",
                "run",
                "runs",
                "candidates",
                "candidate",
                "preprocessing"
            ]
        }
    },
    {
        "id": "1fce6d5a-148b-4ded-b6db-acf363f50fbd",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "54 Recognizing and Realizing Temporal Reachability Graphs ▶Observation 63. If D is realizable, then there is a frugal realization for D, where the labels of the edges of E∗are from L. This follows by two facts: First, in every frugal realization, each of the O(fes) edges in E∗ receives at most O(fes) labels. Hence, in each frugal realization, the set of all labels assigned to edges of E∗has size at most O(fes2).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Observation",
                "Recognizing",
                "Graphs",
                "Realizing",
                "Temporal",
                "Reachability",
                "frugal",
                "realization",
                "fes",
                "edges"
            ]
        }
    },
    {
        "id": "773e77d3-a6de-4794-9039-60fb20070ef7",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Second, since each edge of E \\ E∗receives at most two labels in each minimal realization and there are at most n edges in E \\ E∗(since the feedback edge set F is a subset of E∗and G −F is a tree), by first removing all empty time steps from a frugal realization, and afterwards introducing sufficiently many empty time steps, we can ensure that the labels assigned to E∗are multiples of 2n and more precisely, are from L.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "time",
                "empty",
                "steps",
                "labels",
                "realization",
                "edge",
                "receives",
                "tree",
                "precisely",
                "minimal"
            ]
        }
    },
    {
        "id": "55f7a9f9-d7a2-4a6e-be6f-3cd3eb765d9c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since we assumed that D is realizable, there is, thus, a frugal realization λ′ for D that only assigns labels of L to the edges of E∗. We thus consider the labeling λ which is the restriction of λ′ to the edges of E∗. Now, for each W ∗-connector P, let LP be the corresponding labeling for the edges of the extension of P that agrees with λ′ on the labels of the first and the last edge of P according to Lemma 58.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "edges",
                "realizable",
                "labels",
                "assumed",
                "frugal",
                "realization",
                "assigns",
                "edge",
                "labeling",
                "Lemma"
            ]
        }
    },
    {
        "id": "aa76645e-20e8-41fa-a46d-4ff38b518f03",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since λ′ realizes D, Lemma 58 implies that there is some λP such that λ′ ⋉λP still realizes D. Since all connectors are pairwise edge-disjoint, there thus exists (λ1, . . . , λ|C|) ∈LP1 ×· · ·×LP|C| for which λ∗:= λ′⋉λ1⋉· · ·⋉λ|C| realizes D. By the fact that λ is the restriction of λ′ to the edges of E∗, λ∗equals λ ⋉λ1 ⋉· · · ⋉λ|C|. This contradicts the assumption that our algorithm does not find a realization λ∗for D. This thus proves Proposition 37 and Theorem 33. Remarks on kernelization.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "realizes",
                "implies",
                "Proposition",
                "Theorem",
                "edge-disjoint",
                "exists",
                "connectors",
                "pairwise",
                "equals"
            ]
        }
    },
    {
        "id": "a3524f02-425e-4825-80d6-ea8a9e4380ee",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "All our preprocessing steps run in polynomial time and lead to the set W ∗for which each connector is nice. Moreover, there are only O(fes) edges incident with vertices of W ∗or vertices of pendant trees that have their root in W ∗. Our preprocessing thus nearly achieves a polynomial problem kernel for our problem. Only the size of the connectors prevent this kernelization algorithm so far.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "nice",
                "preprocessing",
                "steps",
                "run",
                "time",
                "lead",
                "set",
                "vertices",
                "polynomial",
                "fes"
            ]
        }
    },
    {
        "id": "0da1d39d-3afd-42e4-b250-003ca44dd07c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We conjecture that (by an even deeper analysis) it is possible to, in polynomial time, replace each connector individually by a connector of constant size. This would then, together with our previous reduction rules imply a kernel for our problem with O(fes) vertices and solid edges and O(fes2) dashed arcs. Based on our exact algorithm (see Theorem 5), this would then also imply a running time of 2O(fes2) · nO(1) by simply solving the kernel via the exact algorithm.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "connector",
                "analysis",
                "replace",
                "size",
                "algorithm",
                "conjecture",
                "deeper",
                "polynomial",
                "individually",
                "constant"
            ]
        }
    },
    {
        "id": "1ba5a3de-1d4b-4dcc-af2d-9b7e325de094",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "8 The Complexity of Directed Reachability Graph Realizability Finally, we consider the complexity of versions of Directed Reachability Graph Real- izability. As already discussed by Döring [10], each directed graph D can be the strict reachability graph of a simple directed temporal graph (by assigning label 1 to each arc of D). Hence, Any Strict DRGR and Simple Strict DRGR are always yes-instances and can thus be solved in polynomial time.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Complexity",
                "Reachability",
                "Graph",
                "Directed",
                "Finally",
                "Real",
                "Realizability",
                "strict",
                "izability",
                "DRGR"
            ]
        }
    },
    {
        "id": "3c392b8f-2580-4f4f-b072-f2ae7d7a9c60",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We now show that all DAGs and all transitive graphs are trivial yes-instances for each version of the problem. ▶Lemma 64. An instance D = (V, A) of DRGR is a yes-instance, if we consider Any Strict DRGR or Simple Strict DRGR, D is a DAG, or D is a transitive graph. Thomas Erlebach, Othon Michail, Nils Morawietz 55 Here, a directed graph D = (V, A) is transitive, if for every distinct vertices u, v, w ∈V with (u, v) ∈A and (v, w) ∈A, the arc (u, w) is also in A. Proof.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DRGR",
                "transitive",
                "Strict",
                "problem",
                "Lemma",
                "show",
                "trivial",
                "version",
                "graph",
                "DAGs"
            ]
        }
    },
    {
        "id": "3807c2e1-b2c7-4afc-ab11-7426abe4224d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "The first point was already shown by Döring [10]: By assigning label 1 to every arc of D, each arc is realized and each strict temporal path has length at most one. Hence, this trivial labeling realizes D. For the second point consider an arbitrary topological ordering π of D. One can realize D by a happy labeling λ as follows: Iterate over the topological ordering π from the sinks towards the sources.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Döring",
                "arc",
                "label",
                "shown",
                "assigning",
                "realized",
                "strict",
                "temporal",
                "path",
                "length"
            ]
        }
    },
    {
        "id": "90a5fa3e-2ce6-4ebf-86f7-9251ad8ffb0a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For the ith vertex v of π, label the outgoing arcs B of v via an arbitrary bijection between B and [i · n + 1, i · n + |B|]. Since each vertex has less than n outgoing arcs, this labeling assigns a unique label to each arc. Hence, λ is a happy labeling. Moreover, no temporal path under λ has length more than one, since each path of D of length at least two, the assigned labels are strictly decreasing. This implies that λ realizes D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "outgoing",
                "arcs",
                "vertex",
                "ith",
                "arbitrary",
                "bijection",
                "label",
                "labeling",
                "path",
                "length"
            ]
        }
    },
    {
        "id": "b5ff7d6a-eaa3-4f79-bc85-c12f3f4e4235",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For the last point consider an arbitrary bijection λ between A and [1, |A|]. Clearly, each arc receives one label and λ is a happy labeling. It remains to show that there is no temporal path between any two vertices u and v for which D does not contain the arc (u, v). Suppose that there is such a temporal path P. Since this path can only use arcs that received a label under λ (that is, since P only uses arcs of D), P is a path in D, which implies that (u, v) is an arc of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "arc",
                "point",
                "arbitrary",
                "bijection",
                "arcs",
                "temporal",
                "label",
                "labeling",
                "receives"
            ]
        }
    },
    {
        "id": "52ff405d-9cf9-45f0-ab25-beea0baeefad",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is due to the fact that D is a transitive graph. Hence, λ realizes D. ◀ Next, we show that on directed graphs that are close to being a DAG, Proper Strict DRGR, Happy Strict DRGR, and each version of Non-strict DRGR under consideration is NP-hard. To this end, we first make the following observations about the possibility of labeling arcs in these settings. Our first observation is a generalization of [10, Lemma 4.1]. ▶Lemma 65.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Lemma",
                "DRGR",
                "Strict",
                "due",
                "fact",
                "transitive",
                "DAG",
                "Proper",
                "Happy",
                "Non-strict"
            ]
        }
    },
    {
        "id": "9314012c-e3b6-40f2-a4e1-1d187fe35e2a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let D be an instance of Proper DRGR, Happy DRGR, or some version of Non-strict DRGR. Moreover, let C be an induces directed cycle of length at least 3 in D. Then, for each realization of D, there is at least one arc of C that receives no label. Proof. Let C = (v1, . . . , vℓ, v1). Assume towards a contradiction that this is not the case and let λ be a proper or non-strict directed realization where each arc of C receives at least one label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DRGR",
                "Happy",
                "instance",
                "version",
                "Proper",
                "Non-strict",
                "label",
                "arc",
                "directed",
                "realization"
            ]
        }
    },
    {
        "id": "4be7784a-9d1c-44da-ba3e-d317d0b58a9d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since the cycle is induced, for each i, (vi, vi+2) is not an arc of D. Hence, max λ((vi+1, vi+2)) ≤min λ((vi, vi+1)) for each i ∈[1, ℓ].2 Since λ is a proper or non- strict realization, we even get that max λ((vi+1, vi+2)) < min λ((vi, vi+1)). This leads to a contradiction, since max λ((v2, v3)) < min λ((v1, v2)) ≤max λ((v1, v2)) < min λ((vℓ, v1)) ≤ · · · ≤max λ((v2, v3)). ◀ Let D = (V, A) be a directed graph.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "min",
                "max",
                "induced",
                "cycle",
                "arc",
                "strict",
                "realization",
                "proper",
                "contradiction",
                "leads"
            ]
        }
    },
    {
        "id": "cd8e1a8c-4d42-4000-83c5-fef91ed29929",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "We say that an arc (u, v) ∈A is triangulated in D, if there is a vertex x ∈V such that (u, x) ∈A and (x, v) ∈A. ▶Lemma 66. Let D be an instance of any version of DRGR. In each realization of D, each arc (u, v) of D that is not triangulated receives at least one label. Proof. Assume towards a contradiction that there is a directed temporal graph (G, λ) that realizes D such that there is an arc (u, v) of D which is not triangulated in D and receives no label.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "triangulated",
                "Lemma",
                "vertex",
                "label",
                "DRGR",
                "receives",
                "Proof",
                "instance",
                "version"
            ]
        }
    },
    {
        "id": "04022cfa-ab18-4934-9937-9c67c0a2eb2d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since (G, λ) realizes D and D contains the arc (u, v), there is a temporal path P from u to v in (G, λ). Let x be an arbitrary vertex of P distinct from u and v. The existence of the temporal path P implies that there is a temporal path P1 from u to x in (G, λ) and that there is a temporal path P2 from x to v in (G, λ). Since the reachability graph of (G, λ) 2 For convenience, ℓ+ 1 = 1 and ℓ+ 2 = 2.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "temporal",
                "path",
                "realizes",
                "arc",
                "arbitrary",
                "vertex",
                "distinct",
                "convenience",
                "existence",
                "implies"
            ]
        }
    },
    {
        "id": "1679cf14-5509-448d-98e3-8b0b3bf9b0a1",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "56 Recognizing and Realizing Temporal Reachability Graphs is exactly D, this implies that D contains the arcs (u, x) and (x, v). This contradicts the assumption that (u, v) is not triangulated. ◀ Based on these two lemma, we can now show the stated hardness results. ▶Theorem 67. Proper DRGR, Happy DRGR, and all considered versions of Non- strict DRGR are NP-hard on graphs with a constant size feedback arc set.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "DRGR",
                "Graphs",
                "implies",
                "Theorem",
                "Based",
                "Happy"
            ]
        }
    },
    {
        "id": "98e000b2-038c-404d-9e07-bd06539ffed6",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, none of these versions of DRGR can be solved in 2o(|V |+|A|) · nO(1) time, unless the ETH fails. Proof. We again reduce from 2P2N-3SAT. Let ϕ be an instance of 2P2N-3SAT with variables X and clauses Y . We construct a directed graph D = (V, A) as follows: For each variable x ∈X, V contain the vertices x, x′, ax, bx, x, x′, ax, and bx. For each clause yi ∈Y , V contains the vertex si. Additionally, V contains the vertices v∗, w∗, ⊤, ⊤′, vS, vL, vL′. Next, we describe the arcs of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DRGR",
                "ETH",
                "time",
                "fails",
                "versions",
                "solved",
                "vertices",
                "Proof",
                "variables",
                "variable"
            ]
        }
    },
    {
        "id": "38d83ec1-8196-4997-a4af-744f381fce00",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "For each variable x ∈X, A contains the arcs (v∗, x), (x, x′), (x′, x), (x, x′), (x′, w∗), (x, ax), (ax, ⊤), (x, bx), (bx, x′), (x, ⊤), (x′, ⊤), (x′, vL′), (vL, x), and (x, ax), (ax, ⊤), (x, bx), (bx, x′), (x, ⊤), (x′, ⊤), (x′, vL′), (vL, x). Let yi be a clause of Y . For each literal ℓof yi, A contains the arcs (si, ℓ), (si, ℓ′), and (si, bℓ). Additionally, A contains the arcs (si, ⊤) and (vS, si). Finally, A contains the arcs (w∗, v∗), (⊤, ⊤′), (⊤′, vS), (⊤′, vL), and (vL′, vS).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arcs",
                "vL′",
                "variable",
                "clause",
                "literal",
                "ℓof",
                "Additionally",
                "Finally"
            ]
        }
    },
    {
        "id": "794a1488-6433-4869-b950-5079427d2d14",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This completes the construction of D. ▷Claim 68. The set of arcs {(w∗, v∗), (⊤, ⊤′), (vL′, vS)} is a feedback arc set of D. Proof. Consider the graph D′ obtained by removing these three arcs from D. By construction, for each (u, v) ∈{(w∗, v∗), (⊤, ⊤′), (vL′, vS)}, (u, v) is the only arc going out of u in D and (u, v) is the only arc going into v in D. This implies that u is a sink in D′ and v is a source in D′.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Claim",
                "arc",
                "vL′",
                "completes",
                "set",
                "construction",
                "arcs",
                "Proof",
                "feedback",
                "graph"
            ]
        }
    },
    {
        "id": "0f7d90a0-8d0b-4540-9c61-97ef8612e69d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To show that D′ is a DAG it thus remains to show that D′′ := D′ −{w∗, v∗, ⊤, ⊤′, vL′, vS} is a DAG. Note that for each clause yi ∈Y , (vS, si) is the only arc going into si in D. Hence, each vertex of QS := {si | yi ∈Y } is a source in D′′. To show that D′′ is a DAG it thus remains to show that D′′′ := D′′ −QS is a DAG. By construction, D′′′ consists of one connected component Vx for each variable x ∈X, each of which is a DAG itself. Consequently, D′ is a DAG.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "show",
                "vL′",
                "remains",
                "Note",
                "clause",
                "arc",
                "vertex",
                "source",
                "construction"
            ]
        }
    },
    {
        "id": "f25091e7-0b8b-4a5b-8690-62eef35ec09a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "◁ (⇒) Let π be a satisfying assignment for ϕ. We show that there is a directed happy temporal graph G := (D′, λ) with reachability graph D. We set λ((w∗, v∗)) = 8, λ((⊤, ⊤′)) = 13, λ((⊤′, vL)) = λ((⊤′, vS)) = 12, and λ((vL′, vS)) = 4. For each variable x ∈X, we set λ((v∗, x)) = 7 and λ((x′, w∗)) = 9. Moreover, for each ℓ∈{x, x}, we set λ((ℓ, aℓ)) = 1, λ((aℓ, ⊤)) = λ((ℓ′, ⊤)) = 14, λ((ℓ, bℓ)) = 3, λ((bℓ, ℓ′)) = 15, λ((ℓ′, vL′)) = 5, and λ((vL, ℓ)) = 11.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "vL′",
                "satisfying",
                "assignment",
                "graph",
                "show",
                "directed",
                "happy",
                "temporal",
                "reachability"
            ]
        }
    },
    {
        "id": "931a9131-2b23-4330-b546-89fd6ec798b3",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If π(x) = true, we set λ((x, x′)) = 6 and λ((x′, x)) = 5. Otherwise, that is, if π(x) = false, we set λ((x′, x)) = 11 and λ((x, x′)) = 10. Finally, for each clause yi ∈Y , we set λ((vS, si)) = 3. Moreover, for each literal ℓof yi, we set λ((si, ℓ)) = 2. All other arcs receive no label. This completes the construction of λ. Note that λ is happy. We now show that the reachability graph of G equals D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "set",
                "true",
                "false",
                "Finally",
                "clause",
                "label",
                "literal",
                "ℓof",
                "Note",
                "happy"
            ]
        }
    },
    {
        "id": "85a19b1a-344e-40c6-91de-28d522b8b859",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "To show this, it suffices to show that (i) for each arc (u, v) ∈A that receives no label under λ, there is a temporal (u, v)-path under λ, and (ii) for each non-arc (u, v) /∈A, there is no temporal (u, v)-path under λ. First, we show that all arcs of D are realized. Let (u, v) be an arc of D that receives no label under λ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "temporal",
                "show",
                "receives",
                "label",
                "non-arc",
                "arc",
                "suffices",
                "arcs",
                "realized"
            ]
        }
    },
    {
        "id": "ce7e9e60-584b-419f-8957-45d932da009a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By construction of λ, (u, v) has one of four types: there is some variable x ∈X and some ℓ∈{x, x}, such that u = ℓand v = ℓ′, Thomas Erlebach, Othon Michail, Nils Morawietz 57 there is some variable x ∈X and some ℓ∈{x, x}, such that u = ℓand v = ⊤, there is some clause yi ∈Y and some literal ℓcontained in yi, such that u = si and v ∈{ℓ′, bℓ}, or there is some clause yi ∈Y , such that u = si and v = ⊤.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "ℓand",
                "variable",
                "clause",
                "Thomas",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "types"
            ]
        }
    },
    {
        "id": "0e7968dc-7e4d-4126-a961-e21d1fcbb5c5",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If (u, v) is of the first type, the arc is realized by the temporal path (ℓ, bℓ, ℓ′) with la- bels (3, 15). If (u, v) is of the second type, the arc is realized by the temporal path (ℓ, aℓ, ⊤) with labels (1, 14). If (u, v) is of the third type, the arc is realized by the temporal path (si, ℓ, bℓ, ℓ′) with labels (2, 3, 15) (or its subpath). Hence, consider the fourth type and let yi ∈Y . Since π satisfies ϕ, there is some literal ℓof yi, such that ℓis satisfied by π.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "arc",
                "realized",
                "temporal",
                "type",
                "bels",
                "labels",
                "subpath",
                "fourth",
                "satisfies"
            ]
        }
    },
    {
        "id": "28c2cf97-31c1-4e83-be73-7c2b653e2948",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This implies that the arc (ℓ, ℓ′) received a label α under λ. By definition, α ∈{6, 10}. Hence, the arc (si, ⊤) is realized by the path (si, ℓ, ℓ′, ⊤) with labels (2, α, 14). Consequently, each arc of D is realized. Next, we show that no non-arc of D is realized. To this end, we analyze the structure of temporal paths of length more than one under λ. Let P be a temporal path of length at least two under λ and let u and v be the endpoints of P. We show that (u, v) is an arc of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "realized",
                "received",
                "implies",
                "path",
                "show",
                "temporal",
                "length",
                "label",
                "labels"
            ]
        }
    },
    {
        "id": "92013e10-ef67-47cd-8db9-b21f8ba81b32",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By definition of λ, for every vertex u ∈{⊤, ⊤′, vS, vL, vL′, v∗, w∗} ∪{si | yi ∈Y }, each arc going into u has a strictly larger label than each arc going out of u. Thus, P contains none of these vertices as an intermediate vertex. In other words, the set of intermediate vertices of P is a subset of {ℓ, ℓ′, aℓ, bℓ| x ∈X, ℓ∈{x, x}}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "vL′",
                "vertex",
                "definition",
                "strictly",
                "larger",
                "label",
                "vertices",
                "intermediate",
                "words"
            ]
        }
    },
    {
        "id": "a19e0b44-8007-440d-a05f-b51be8cdc417",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Moreover, P cannot traverse the arc (v∗, x) for any variable x ∈X, since v∗is not an intermediate vertex of P as each outgoing arc of x receives a strictly smaller label. Similarly, P traverses neither the arc (x′, x) nor the arc (x′, w∗). This implies that there is some variable x ∈X and some literal ℓ∈{x, x}, such that P contains only vertices of Qℓ= {ℓ, ℓ′, aℓ, bℓ, ⊤} ∪Sℓ, where Sℓdenotes the vertices of {si | yi ∈Y, ℓ∈yi}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "label",
                "variable",
                "intermediate",
                "vertex",
                "outgoing",
                "receives",
                "strictly",
                "smaller",
                "vertices"
            ]
        }
    },
    {
        "id": "38539daa-237c-40d4-8f3d-a3aeb2d89f8b",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "By construction of D, D[Qℓ] is a DAG with sources Sℓand unique sink ⊤. Moreover, bℓis the only vertex of Qℓthat has no arc towards ⊤. Clearly, P cannot be a temporal path from bℓto ⊤, since each arc going into ⊤has label 13 and the unique arc (bℓ, ℓ′) going out of bℓreceives label 14. Hence, if P is an (u, v)-path with v = ⊤, then (u, v) is an arc of D. Similarly, for each vertex si ∈Sℓ, aℓis the only vertex of Qℓ\\ Sℓfor which (si, aℓ) is not an arc of D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DAG",
                "Sℓand",
                "arc",
                "vertex",
                "sink",
                "unique",
                "construction",
                "sources",
                "label",
                "Qℓthat"
            ]
        }
    },
    {
        "id": "be1d1b90-d059-401c-9e73-2b72d78c1f36",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Clearly, P cannot be a temporal path from si to aℓ, since each arc going out of si has label 2 and the unique arc (ℓ, aℓ) going into aℓreceives label 1. Hence, if P is a (u, v)-path with u ∈Si, then (u, v) is an arc of D. Thus, in the following, we only have to consider the case where P contains only vertices of {ℓ, ℓ′, aℓ, bℓ}. The only path of length at least two in D[{ℓ, ℓ′, aℓ, bℓ}] is the path (ℓ, bℓ, ℓ′). Thus, the only remaining option for P is to be this unique path.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "label",
                "path",
                "arc",
                "temporal",
                "aℓreceives",
                "unique",
                "case",
                "vertices",
                "length",
                "remaining"
            ]
        }
    },
    {
        "id": "e9f88b9e-9b63-4a5e-a53c-b08d6a0c2292",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since (ℓ, ℓ′) is an arc of D, there is an arc between the endpoints of P in D. Consequently, no non-arc of D is realized, which implies that λ realizes D. (⇐) Let G := (D, λ: A →2N) be a directed temporal graph with (i) proper labeling λ and strict reachability graph equal to D or (ii) non-strict reachability graph equal to D. We show that there is a satisfying assignment π for ϕ. For each variable x ∈X, we set π(x) := ( true λ((x, x′)) ̸= ∅and false otherwise.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "graph",
                "endpoints",
                "equal",
                "reachability",
                "realized",
                "non-arc",
                "implies",
                "realizes",
                "proper"
            ]
        }
    },
    {
        "id": "ae4a7424-0322-465c-a891-7893ca566735",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "In the following, we show that π satisfies ϕ. To this end, we first show that λ((x, x′)) = ∅ if π(x) = true, that is, if λ((x, x′)) ̸= ∅. This statement follows form Lemmas 65 and 66 and the fact that C := (v∗, x, x′, x, x′, w∗, v∗) is an induced directed cycle in D for which (x, x′) and (x, x′) are the only triangulated arcs. Hence, if λ((x, x′)) ̸= ∅, then π(x) = false. 58 Recognizing and Realizing Temporal Reachability Graphs Based on this observation, we now show that π satisfies ϕ.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "show",
                "satisfies",
                "Lemmas",
                "true",
                "Recognizing",
                "Realizing",
                "Temporal",
                "Reachability",
                "Graphs",
                "Based"
            ]
        }
    },
    {
        "id": "04833874-c0c9-4785-bb99-571dcb285d8c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Let yi be a clause of Y . Since G realizes D and (si, ⊤) is an arc of D, there is a temporal path P from si to ⊤in G. Recall that si has only the out-neighbor ⊤and the out-neighbors {ℓ, ℓ′, bℓ} for each literal ℓof yi. Hence, the temporal path P only visits these vertices, since P is a dense path, that is, since there is an arc from si to each other vertex of P. Moreover, P cannot visit any vertex bℓ, since no such vertex has an arc towards ⊤.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "arc",
                "temporal",
                "vertex",
                "clause",
                "realizes",
                "out-neighbor",
                "Recall",
                "literal",
                "ℓof"
            ]
        }
    },
    {
        "id": "dd471eb0-83f4-4772-9239-7cf45fcd1d17",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This implies that P is either the path (si, ⊤), or for some literal ℓof yi, P ∈{(si, ℓ, ⊤), (si, ℓ′, ⊤), (si, ℓ, ℓ′, ⊤)}. First, note that the direct arc (si, ⊤) does not receive a label under λ. This is due to Lemmas 65 and 66 and the fact that C := (si, ⊤, ⊤′, vS, si) is an induced directed cycle in D for which (si, ⊤) is the only triangulated arc. This implies that P ̸= (si, ⊤). Hence, there is a literal ℓof yi such that P ∈{(si, ℓ, ⊤), (si, ℓ′, ⊤), (si, ℓ, ℓ′, ⊤)}.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "path",
                "arc",
                "implies",
                "ℓof",
                "literal",
                "Lemmas",
                "note",
                "direct",
                "receive",
                "label"
            ]
        }
    },
    {
        "id": "8bb4b41e-7a81-4a65-be13-b8999e484e9d",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Similarly to the above, (ℓ, ⊤) does not receive a label under λ, since C := (ℓ, ⊤, ⊤′, vL, ℓ) is an induced directed cycle in D for which (ℓ, ⊤) is the only triangulated arc. This implies that P ̸= (si, ℓ, ⊤). Analogously, (si, ℓ′) does not receive a label under λ, since C := (si, ℓ′, vL′, vS, si) is an induced directed cycle in D for which (si, ℓ′) is the only triangulated arc. This implies that P ̸= (si, ℓ′, ⊤). As a consequence, P = (si, ℓ, ℓ′, ⊤), which implies that λ((ℓ, ℓ′)) ̸= ∅.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "arc",
                "implies",
                "receive",
                "label",
                "induced",
                "directed",
                "cycle",
                "triangulated",
                "Similarly",
                "Analogously"
            ]
        }
    },
    {
        "id": "0d13d10b-12c5-442c-a2f1-07252e301022",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "If ℓ= x for some variable x ∈X, then π(x) = true by definition of π, which implies that clause yi is satisfied by π. Otherwise, that is, if ℓ= x for some variable x ∈X, then λ((x, x′)) = ∅, since λ((x, x′)) ̸= ∅. Hence π(x) = false by definition of π, which implies that clause yi is satisfied by π. In both cases, clause yi is satisfied by π. Consequently, π satisfies ϕ. ETH lower-bound. Note that D has O(|ϕ|) vertices and arcs.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "satisfied",
                "clause",
                "variable",
                "definition",
                "implies",
                "true",
                "ETH",
                "false",
                "cases",
                "lower-bound"
            ]
        }
    },
    {
        "id": "5ca12b45-e6a5-4628-a656-221e521e5cac",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Since 2P2N-3SAT cannot be solved in 2o(|ϕ|) · |ϕ|O(1) time, unless the ETH fails [23], this implies the stated running-time lower-bound for the stated versions of DRGR. ◀ This thus settles the complexity of each version of DRGR under consideration. Moreover, an FPT algorithm for any of these versions when parameterized by the size of a smallest feedback arc set is impossible, unless P = NP.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "DRGR",
                "stated",
                "ETH",
                "time",
                "fails",
                "versions",
                "solved",
                "implies",
                "running-time",
                "lower-bound"
            ]
        }
    },
    {
        "id": "f9e010af-7168-4518-ba13-0d34019d117a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "9 Conclusion We studied Reachability Graph Realizability and gave for both directed and undirected temporal graphs the complete picture for the classical complexity of all settings, answering this open problem posed by [3] and [10]. For URGR, we additionally showed that the problem can be solved in FPT-time for the feedback edge set number fes of the solid graph.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Conclusion",
                "Reachability",
                "Realizability",
                "settings",
                "answering",
                "Graph",
                "problem",
                "studied",
                "gave",
                "directed"
            ]
        }
    },
    {
        "id": "9905e33b-5d77-4c6f-a7bd-613dbaef6845",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "As we showed, this parameter cannot be replaced by smaller parameters like feedback vertex set number or treedepth of the solid graph, unless FPT = W[2]. There are several directions for future work: First, it would be interesting to see whether (some) versions of URGR admit a polynomial kernel for fes. Another interesting task is to determine whether Proper URGR, Happy URGR, or Non-strict URGR admits an FPT algorithm for feedback vertex set or treedepth.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "FPT",
                "showed",
                "graph",
                "vertex",
                "feedback",
                "set",
                "treedepth",
                "replaced",
                "smaller"
            ]
        }
    },
    {
        "id": "23fc45d3-d0f6-4ef8-9886-0b763c87f33f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "This is not excluded by our W[2]-hardness result, since that reduction only worked for Any Strict URGR and Simple Strict URGR. It would also be interesting to see whether Proper URGR, Happy URGR, or Non-strict URGR can be solved in polynomial time on solid graphs that are triangle-free. Finally, one could analyze the parameterized complexity of Directed Reachability Graph Realizability with respect to directed graph parameters.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "URGR",
                "Strict",
                "Simple",
                "hardness",
                "result",
                "excluded",
                "reduction",
                "worked",
                "Happy",
                "Graph"
            ]
        }
    },
    {
        "id": "76489626-4a72-4708-b9f8-018a06f6e808",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Thomas Erlebach, Othon Michail, Nils Morawietz 59 References 1 Eleni C Akrida, Leszek Gąsieniec, George B Mertzios, and Paul G Spirakis. The complexity of optimal design of temporally connected graphs. Theory of Computing Systems, 61:907–944, 2017. 2 Binh-Minh Bui-Xuan, Afonso Ferreira, and Aubin Jarry. Computing shortest, fastest, and foremost journeys in dynamic networks. Int. J. Found. Comput. Sci., 14(2):267–285, 2003. doi:10.1142/S0129054103001728.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "References",
                "Erlebach",
                "Othon",
                "Michail",
                "Nils",
                "Morawietz",
                "Eleni",
                "Akrida",
                "Leszek",
                "Gąsieniec"
            ]
        }
    },
    {
        "id": "276c5b4a-ad39-4d52-acab-babeb8580437",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "3 Arnaud Casteigts, Timothée Corsini, and Writika Sarkar. Simple, strict, proper, happy: A study of reachability in temporal graphs. Theor. Comput. Sci., 991:114434, 2024. doi: 10.1016/J.TCS.2024.114434. 4 Arnaud Casteigts, Paola Flocchini, Walter Quattrociocchi, and Nicola Santoro. Time-varying graphs and dynamic networks. International Journal of Parallel, Emergent and Distributed Systems, 27(5):387–408, 2012. 5 Arnaud Casteigts, Nils Morawietz, and Petra Wolf.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Timothée",
                "Corsini",
                "Sarkar",
                "Arnaud",
                "Casteigts",
                "Writika",
                "graphs",
                "Simple",
                "strict",
                "proper"
            ]
        }
    },
    {
        "id": "a314d819-8f7d-492b-8737-6dae3fe05f4a",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Distance to transitivity: New parameters for taming reachability in temporal graphs. In 49th International Symposium on Mathematical Foundations of Computer Science (MFCS 2024), volume 306 of LIPIcs, pages 36:1–36:17. Schloss Dagstuhl - Leibniz-Zentrum für Informatik, 2024. 6 Esteban Christiann, Eric Sanlaville, and Jason Schoeters. On inefficiently connecting temporal networks. In 3rd Symposium on Algorithmic Foundations of Dynamic Networks (SAND 2024).",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "MFCS",
                "Distance",
                "transitivity",
                "graphs",
                "Symposium",
                "Foundations",
                "International",
                "Science",
                "networks",
                "parameters"
            ]
        }
    },
    {
        "id": "3278aa45-e229-4f90-831f-b2880ce151e4",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Schloss Dagstuhl–Leibniz-Zentrum für Informatik, 2024. 7 Marek Cygan, Fedor V. Fomin, Lukasz Kowalik, Daniel Lokshtanov, Dániel Marx, Marcin Pilipczuk, Michal Pilipczuk, and Saket Saurabh. Parameterized Algorithms. Springer, 2015. doi:10.1007/978-3-319-21275-3. 8 Argyrios Deligkas and Igor Potapov. Optimizing reachability sets in temporal graphs by delaying. Information and Computation, 285:104890, 2022. 9 Rodney G. Downey and Michael R. Fellows. Fundamentals of Parameterized Complexity.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Dagstuhl",
                "Informatik",
                "Pilipczuk",
                "Schloss",
                "Leibniz-Zentrum",
                "für",
                "Marek",
                "Cygan",
                "Fedor",
                "Fomin"
            ]
        }
    },
    {
        "id": "ea09930f-c51f-4587-8592-2361f08444ee",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Texts in Computer Science. Springer, 2013. doi:10.1007/978-1-4471-5559-1. 10 Michelle Döring. Simple, Strict, Proper, and Directed: Comparing Reachability in Directed and Undirected Temporal Graphs. CoRR, abs/2501.11697, 2025. arXiv:2501.11697. 11 Jessica Enright, Kitty Meeks, George B Mertzios, and Viktor Zamaraev. Deleting edges to restrict the size of an epidemic in temporal networks. Journal of Computer and System Sciences, 119:60–77, 2021. 12 Thomas Erlebach, Nils Morawietz, and Petra Wolf.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Texts",
                "Directed",
                "Computer",
                "Temporal",
                "Strict",
                "Proper",
                "Michelle",
                "Döring",
                "Science",
                "Sciences"
            ]
        }
    },
    {
        "id": "a1e2cd63-6e38-4bf5-a8fa-e053aa02dffa",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Parameterized algorithms for multi- label periodic temporal graph realization. In 3rd Symposium on Algorithmic Foundations of Dynamic Networks (SAND 2024), volume 292 of LIPIcs, pages 12:1–12:16. Schloss Dagstuhl - Leibniz-Zentrum für Informatik, 2024. doi:10.4230/LIPIcs.SAND.2024.12. 13 F. Göbel, J. Orestes Cerdeira, and Henk Jan Veldman. Label-connected graphs and the gossip problem. Discret. Math., 87(1):29–40, 1991. doi:10.1016/0012-365X(91)90068-D.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "SAND",
                "doi",
                "Parameterized",
                "multi",
                "label",
                "realization",
                "Symposium",
                "Networks",
                "volume",
                "12:16"
            ]
        }
    },
    {
        "id": "da04429f-1731-40b0-abd2-ee865145da2f",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "14 David Kempe, Jon Kleinberg, and Amit Kumar. Connectivity and inference problems for temporal networks. In Proceedings of the thirty-second annual ACM symposium on Theory of computing, pages 504–513, 2000. 15 Nina Klobas, George B Mertzios, Hendrik Molter, and Paul G Spirakis. The complexity of computing optimum labelings for temporal connectivity. Journal of Computer and System Sciences, 146:103564, 2024. 16 Nina Klobas, George B. Mertzios, Hendrik Molter, and Paul G. Spirakis.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "David",
                "Kempe",
                "Jon",
                "Kleinberg",
                "Kumar",
                "Amit",
                "Nina",
                "Klobas",
                "Hendrik",
                "Molter"
            ]
        }
    },
    {
        "id": "9b457d21-c5f2-47d5-ac0b-7552db3e7587",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "Temporal graph realization from fastest paths. In 3rd Symposium on Algorithmic Foundations of Dynamic Networks (SAND 2024), volume 292 of LIPIcs, pages 16:1–16:18. Schloss Dagstuhl - Leibniz- Zentrum für Informatik, 2024. doi:10.4230/LIPIcs.SAND.2024.16. 17 Édouard Lucas. Récréations mathématiques, volume 1. Gauthier-Villars, 1882. 18 George B Mertzios, Othon Michail, and Paul G Spirakis. Temporal network optimization subject to connectivity constraints. Algorithmica, 81(4):1416–1449, 2019.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "volume",
                "SAND",
                "paths",
                "Leibniz",
                "Symposium",
                "16:18",
                "Temporal",
                "graph",
                "realization",
                "fastest"
            ]
        }
    },
    {
        "id": "015dcecd-50f3-4682-9e9e-485252093f1c",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "60 Recognizing and Realizing Temporal Reachability Graphs 19 George B. Mertzios, Hendrik Molter, Nils Morawietz, and Paul G. Spirakis. Realizing temporal transportation trees. CoRR, 2025. URL: https://arxiv.org/abs/2403.18513, arXiv:2403.18513. 20 Othon Michail. An introduction to temporal graphs: An algorithmic perspective. Internet Mathematics, 12(4):239–280, 2016. 21 Othon Michail and Paul G Spirakis. Elements of the theory of dynamic networks. Communic- ations of the ACM, 61(2):72–72, 2018.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Recognizing",
                "George",
                "Mertzios",
                "Hendrik",
                "Molter",
                "Nils",
                "Morawietz",
                "Reachability",
                "Realizing",
                "Temporal"
            ]
        }
    },
    {
        "id": "089c0814-b903-4bfc-b3c8-39b298095a29",
        "title": "Recognizing and Realizing Temporal Reachability Graphs",
        "chunk_text": "22 Stephen B. Seidman. Network structure and minimum degree. Social Networks, 5(3):269–287, 1983. doi:https://doi.org/10.1016/0378-8733(83)90028-X. 23 Craig A. Tovey. A simplified NP-complete satisfiability problem. Discret. Appl. Math., 8(1):85–89, 1984. doi:10.1016/0166-218X(84)90081-7. 24 Philipp Zschoche, Till Fluschnik, Hendrik Molter, and Rolf Niedermeier. The complexity of finding small separators in temporal graphs. Journal of Computer and System Sciences, 107:72–92, 2020.",
        "metadata": {
            "author": "Thomas Erlebach, Othon Michail, Nils Morawietz",
            "keywords": [
                "Stephen",
                "Seidman",
                "doi",
                "Craig",
                "Tovey",
                "degree",
                "https",
                "doi.org",
                "0378-8733",
                "Network"
            ]
        }
    }
]